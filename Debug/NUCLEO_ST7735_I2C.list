
NUCLEO_ST7735_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007904  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b70  08007aa8  08007aa8  00017aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008618  08008618  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008618  08008618  00018618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008620  08008620  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008620  08008620  00018620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008624  08008624  00018624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08008628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  200001f0  08008818  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08008818  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f30  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e9  00000000  00000000  00027150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  00028840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000113f9  00000000  00000000  00028f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00006ffd  00000000  00000000  0003a349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00057d0f  00000000  00000000  00041346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00099055  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000630  00000000  00000000  000990a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003014  00000000  00000000  000996d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a8c 	.word	0x08007a8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08007a8c 	.word	0x08007a8c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <i2c_activate_pb89>:
	// LIDAR
	bool enableLIDAR = false;


void i2c_activate_pb89(I2C_TypeDef *i2c)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

    GPIO_TypeDef  *portB = GPIOB;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <i2c_activate_pb89+0x70>)
 8000ec6:	60fb      	str	r3, [r7, #12]

    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB8/PB9 (I2C).
    i2cSelectI2C(i2c);                           // I2C1: Bustakt aktivieren
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f001 ff3f 	bl	8002d4c <i2cSelectI2C>
    //i2cDisableDevice(i2c);
    gpioInitPort(portB);
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f001 fb96 	bl	8002600 <gpioInitPort>
    //gpioSetPin(portB, PIN8);// falls der Takt-Ausgang auf Low hängen geblieben ist
    //gpioSetPin(portB, PIN9);
    gpioSelectPinMode(portB, PIN8, ALTFUNC);
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	2108      	movs	r1, #8
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f001 fc57 	bl	800278c <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN8, AF4);         // PB8 : I2C1 SCL
 8000ede:	2204      	movs	r2, #4
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f001 fcf4 	bl	80028d0 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN9, ALTFUNC);
 8000ee8:	2202      	movs	r2, #2
 8000eea:	2109      	movs	r1, #9
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f001 fc4d 	bl	800278c <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN9, AF4);         // PB9 : I2C1 SDA
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	2109      	movs	r1, #9
 8000ef6:	68f8      	ldr	r0, [r7, #12]
 8000ef8:	f001 fcea 	bl	80028d0 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN8, OPENDRAIN);   // Immer externe Pull-up-
 8000efc:	2201      	movs	r2, #1
 8000efe:	2108      	movs	r1, #8
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f001 fd4e 	bl	80029a2 <gpioSetOutputType>
    gpioSetOutputType(portB, PIN9, OPENDRAIN);   // Widerstaende verwenden!!!
 8000f06:	2201      	movs	r2, #1
 8000f08:	2109      	movs	r1, #9
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f001 fd49 	bl	80029a2 <gpioSetOutputType>
    // Initialisierung des I2C-Controllers

    i2cInitI2C(i2c, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_400);
 8000f10:	2302      	movs	r3, #2
 8000f12:	2211      	movs	r2, #17
 8000f14:	2100      	movs	r1, #0
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f001 fe7e 	bl	8002c18 <i2cInitI2C>
    i2cSetPeripheralClockFreq(i2c, pclock);      // I2C1: Periph. Clk in MHz
    i2cSetDutyCycle(i2c, I2C_DUTY_CYCLE_2);      // I2C1: Duty-cycle einstellen
    i2cSetRiseTime(i2c, 17);                     // I2C1: 17 ist ein bewaehrter Wert
    i2c->CCR |= 0x50;                            // I2C1: Keine MCAL-Funktion
    */
    i2cEnableDevice(i2c);                        // I2C1: Aktivieren
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f002 f8ee 	bl	80030fe <i2cEnableDevice>


}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40020400 	.word	0x40020400

08000f30 <convDecByteToHex>:


uint8_t *convDecByteToHex(uint8_t byte)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
    static  uint8_t hex[2] = { 0 };

    uint8_t temp;

    temp = byte % 16;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 030f 	and.w	r3, r3, #15
 8000f40:	73fb      	strb	r3, [r7, #15]
    if (temp < 10)
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b09      	cmp	r3, #9
 8000f46:	d803      	bhi.n	8000f50 <convDecByteToHex+0x20>
    {
        temp += '0';
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	3330      	adds	r3, #48	; 0x30
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	e002      	b.n	8000f56 <convDecByteToHex+0x26>
    }
    else
    {
        temp += '7';
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	3337      	adds	r3, #55	; 0x37
 8000f54:	73fb      	strb	r3, [r7, #15]
    }
    hex[1] = temp;
 8000f56:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <convDecByteToHex+0x5c>)
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	7053      	strb	r3, [r2, #1]

    temp = byte / 16;
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	73fb      	strb	r3, [r7, #15]
    if (temp < 10)
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	2b09      	cmp	r3, #9
 8000f66:	d803      	bhi.n	8000f70 <convDecByteToHex+0x40>
    {
        temp += '0';
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	3330      	adds	r3, #48	; 0x30
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	e002      	b.n	8000f76 <convDecByteToHex+0x46>
    }
    else
    {
        temp += '7';
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	3337      	adds	r3, #55	; 0x37
 8000f74:	73fb      	strb	r3, [r7, #15]
    }
    hex[0] = temp;
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <convDecByteToHex+0x5c>)
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	7013      	strb	r3, [r2, #0]

    return hex;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <convDecByteToHex+0x5c>)
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000210 	.word	0x20000210

08000f90 <LIS3DH_init>:

int8_t LIS3DH_init(I2C_TypeDef *i2c)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	//i2cBurstWrite(i2c, i2cAddr_LIS3DH, LIS3DHcmd_TempOn, 2);
	i2cSendByteToSlaveReg(i2c, i2cAddr_LIS3DH,CtrlReg5,  0b11000000); // reboot default memory content
 8000f98:	23c0      	movs	r3, #192	; 0xc0
 8000f9a:	2224      	movs	r2, #36	; 0x24
 8000f9c:	2118      	movs	r1, #24
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f001 ff08 	bl	8002db4 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(i2c, i2cAddr_LIS3DH,CtrlReg4,  0b10001010); // BDU BLE FS1 FS0 HR ST1 ST0 SIM
 8000fa4:	238a      	movs	r3, #138	; 0x8a
 8000fa6:	2223      	movs	r2, #35	; 0x23
 8000fa8:	2118      	movs	r1, #24
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f001 ff02 	bl	8002db4 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(i2c, i2cAddr_LIS3DH,CtrlReg4,  0b10001100); // BDU BLE FS1 FS0 HR ST1 ST0 SIM
 8000fb0:	238c      	movs	r3, #140	; 0x8c
 8000fb2:	2223      	movs	r2, #35	; 0x23
 8000fb4:	2118      	movs	r1, #24
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f001 fefc 	bl	8002db4 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(i2c, i2cAddr_LIS3DH,CtrlReg1,  0b10010111); //
 8000fbc:	2397      	movs	r3, #151	; 0x97
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	2118      	movs	r1, #24
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f001 fef6 	bl	8002db4 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(i2c, i2cAddr_LIS3DH,CtrlReg4,  0b10001000); // BDU BLE FS1 FS0 HR ST1 ST0 SIM
 8000fc8:	2388      	movs	r3, #136	; 0x88
 8000fca:	2223      	movs	r2, #35	; 0x23
 8000fcc:	2118      	movs	r1, #24
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f001 fef0 	bl	8002db4 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(i2c, i2cAddr_LIS3DH,ADCConfReg,0b11000000); // ADC Temp 0 0 0 0 0 0
 8000fd4:	23c0      	movs	r3, #192	; 0xc0
 8000fd6:	221f      	movs	r2, #31
 8000fd8:	2118      	movs	r1, #24
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f001 feea 	bl	8002db4 <i2cSendByteToSlaveReg>
	return 0;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <LIS3DH_XYZ>:


int16_t LIS3DH_XYZ(I2C_TypeDef *i2c, int16_t *xyz)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af02      	add	r7, sp, #8
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]
	uint8_t readBuffer[6];
	int16_t Temp = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	81fb      	strh	r3, [r7, #14]
	i2cBurstRegRead(i2c, i2cAddr_LIS3DH, (OUTxyz|repeat),readBuffer, 6);
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	2206      	movs	r2, #6
 8000ffe:	9200      	str	r2, [sp, #0]
 8001000:	22a8      	movs	r2, #168	; 0xa8
 8001002:	2118      	movs	r1, #24
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f001 ff80 	bl	8002f0a <i2cBurstRegRead>
	*xyz = (readBuffer[1]<<8) + readBuffer[0];
 800100a:	7a7b      	ldrb	r3, [r7, #9]
 800100c:	b29b      	uxth	r3, r3
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b29a      	uxth	r2, r3
 8001012:	7a3b      	ldrb	r3, [r7, #8]
 8001014:	b29b      	uxth	r3, r3
 8001016:	4413      	add	r3, r2
 8001018:	b29b      	uxth	r3, r3
 800101a:	b21a      	sxth	r2, r3
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	801a      	strh	r2, [r3, #0]
	xyz++;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	3302      	adds	r3, #2
 8001024:	603b      	str	r3, [r7, #0]
	*xyz = (readBuffer[3]<<8) + readBuffer[2];
 8001026:	7afb      	ldrb	r3, [r7, #11]
 8001028:	b29b      	uxth	r3, r3
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b29a      	uxth	r2, r3
 800102e:	7abb      	ldrb	r3, [r7, #10]
 8001030:	b29b      	uxth	r3, r3
 8001032:	4413      	add	r3, r2
 8001034:	b29b      	uxth	r3, r3
 8001036:	b21a      	sxth	r2, r3
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	801a      	strh	r2, [r3, #0]
	xyz++;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	3302      	adds	r3, #2
 8001040:	603b      	str	r3, [r7, #0]
	*xyz = (readBuffer[5]<<8) + readBuffer[4];
 8001042:	7b7b      	ldrb	r3, [r7, #13]
 8001044:	b29b      	uxth	r3, r3
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	b29a      	uxth	r2, r3
 800104a:	7b3b      	ldrb	r3, [r7, #12]
 800104c:	b29b      	uxth	r3, r3
 800104e:	4413      	add	r3, r2
 8001050:	b29b      	uxth	r3, r3
 8001052:	b21a      	sxth	r2, r3
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	801a      	strh	r2, [r3, #0]
	return Temp;
 8001058:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <LIS3DH_Temp>:
/* This function register represent the deviation of the current Sensor Temp versus the Kalibration Refenze Temp approx 20dergC
 *
 *
 */
int16_t LIS3DH_Temp(I2C_TypeDef *i2c)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af02      	add	r7, sp, #8
 800106a:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer[6];
	int16_t Temp;
	i2cBurstRegRead(i2c, i2cAddr_LIS3DH, (ADC3Temp|repeat), readBuffer, 2);
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	2202      	movs	r2, #2
 8001072:	9200      	str	r2, [sp, #0]
 8001074:	228c      	movs	r2, #140	; 0x8c
 8001076:	2118      	movs	r1, #24
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f001 ff46 	bl	8002f0a <i2cBurstRegRead>
	Temp = (readBuffer[1]<<8) + readBuffer[0];
 800107e:	7a7b      	ldrb	r3, [r7, #9]
 8001080:	b29b      	uxth	r3, r3
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	b29a      	uxth	r2, r3
 8001086:	7a3b      	ldrb	r3, [r7, #8]
 8001088:	b29b      	uxth	r3, r3
 800108a:	4413      	add	r3, r2
 800108c:	b29b      	uxth	r3, r3
 800108e:	81fb      	strh	r3, [r7, #14]
	return (Temp);					// makes an approx absolut Temp Value
 8001090:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <RFID_LED>:


void RFID_LED(I2C_TypeDef *i2c, bool LEDon)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
	if (LEDon == 1)
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d006      	beq.n	80010bc <RFID_LED+0x20>
	{
		i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_LEDon, 3);
 80010ae:	2303      	movs	r3, #3
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <RFID_LED+0x34>)
 80010b2:	2150      	movs	r1, #80	; 0x50
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f001 fecb 	bl	8002e50 <i2cBurstWrite>
	}
	else
	{
		i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_LEDoff, 3);
	}
}
 80010ba:	e005      	b.n	80010c8 <RFID_LED+0x2c>
		i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_LEDoff, 3);
 80010bc:	2303      	movs	r3, #3
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <RFID_LED+0x38>)
 80010c0:	2150      	movs	r1, #80	; 0x50
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f001 fec4 	bl	8002e50 <i2cBurstWrite>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000004 	.word	0x20000004

080010d8 <RFID_readFWVersion>:
	}
	return typeCard;
}

int8_t RFID_readFWVersion(I2C_TypeDef *i2c, uint8_t* strFirmware)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
	static  uint8_t step = 1;
		uint8_t readBuffer[16];
		uint8_t i, len;
		int8_t status = -1;
 80010e2:	23ff      	movs	r3, #255	; 0xff
 80010e4:	77bb      	strb	r3, [r7, #30]

		switch (step)
 80010e6:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <RFID_readFWVersion+0xbc>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d848      	bhi.n	8001182 <RFID_readFWVersion+0xaa>
 80010f0:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <RFID_readFWVersion+0x20>)
 80010f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f6:	bf00      	nop
 80010f8:	08001109 	.word	0x08001109
 80010fc:	08001119 	.word	0x08001119
 8001100:	0800112d 	.word	0x0800112d
 8001104:	08001173 	.word	0x08001173
		{
			case 1:
			{
				RFID_LED(i2c,0);
 8001108:	2100      	movs	r1, #0
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffc6 	bl	800109c <RFID_LED>
				step = 2;
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <RFID_readFWVersion+0xbc>)
 8001112:	2202      	movs	r2, #2
 8001114:	701a      	strb	r2, [r3, #0]
				break;
 8001116:	e037      	b.n	8001188 <RFID_readFWVersion+0xb0>
			}
			case 2:
			{
				i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_getFirmwareVersion, 2);
 8001118:	2302      	movs	r3, #2
 800111a:	4a1f      	ldr	r2, [pc, #124]	; (8001198 <RFID_readFWVersion+0xc0>)
 800111c:	2150      	movs	r1, #80	; 0x50
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f001 fe96 	bl	8002e50 <i2cBurstWrite>
				step = 3;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <RFID_readFWVersion+0xbc>)
 8001126:	2203      	movs	r2, #3
 8001128:	701a      	strb	r2, [r3, #0]
				break;
 800112a:	e02d      	b.n	8001188 <RFID_readFWVersion+0xb0>
			}
			case 3:
			{
				i2cBurstRead(i2c, i2cAddr_RFID, readBuffer, 0xF);
 800112c:	f107 020c 	add.w	r2, r7, #12
 8001130:	230f      	movs	r3, #15
 8001132:	2150      	movs	r1, #80	; 0x50
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f001 ff79 	bl	800302c <i2cBurstRead>
				len = readBuffer[0];
 800113a:	7b3b      	ldrb	r3, [r7, #12]
 800113c:	777b      	strb	r3, [r7, #29]
				status = readBuffer[2];
 800113e:	7bbb      	ldrb	r3, [r7, #14]
 8001140:	77bb      	strb	r3, [r7, #30]
				step = 4;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <RFID_readFWVersion+0xbc>)
 8001144:	2204      	movs	r2, #4
 8001146:	701a      	strb	r2, [r3, #0]
				for (i = 0; i<= len; i++ )
 8001148:	2300      	movs	r3, #0
 800114a:	77fb      	strb	r3, [r7, #31]
 800114c:	e00c      	b.n	8001168 <RFID_readFWVersion+0x90>
				{
				 strFirmware[i] = readBuffer[i+3];
 800114e:	7ffb      	ldrb	r3, [r7, #31]
 8001150:	1cda      	adds	r2, r3, #3
 8001152:	7ffb      	ldrb	r3, [r7, #31]
 8001154:	6839      	ldr	r1, [r7, #0]
 8001156:	440b      	add	r3, r1
 8001158:	3220      	adds	r2, #32
 800115a:	443a      	add	r2, r7
 800115c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001160:	701a      	strb	r2, [r3, #0]
				for (i = 0; i<= len; i++ )
 8001162:	7ffb      	ldrb	r3, [r7, #31]
 8001164:	3301      	adds	r3, #1
 8001166:	77fb      	strb	r3, [r7, #31]
 8001168:	7ffa      	ldrb	r2, [r7, #31]
 800116a:	7f7b      	ldrb	r3, [r7, #29]
 800116c:	429a      	cmp	r2, r3
 800116e:	d9ee      	bls.n	800114e <RFID_readFWVersion+0x76>
				}

				break;
 8001170:	e00a      	b.n	8001188 <RFID_readFWVersion+0xb0>
			}
			case 4:
			{
				RFID_LED(i2c,0);
 8001172:	2100      	movs	r1, #0
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff91 	bl	800109c <RFID_LED>
				step = 1;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <RFID_readFWVersion+0xbc>)
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
				break;
 8001180:	e002      	b.n	8001188 <RFID_readFWVersion+0xb0>
			}

			default:
			{
				step = 1;
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <RFID_readFWVersion+0xbc>)
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
			}
		}
		return status;
 8001188:	f997 301e 	ldrsb.w	r3, [r7, #30]

}
 800118c:	4618      	mov	r0, r3
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	2000000a 	.word	0x2000000a
 8001198:	20000008 	.word	0x20000008

0800119c <commandList>:
static uint16_t _fg = ST7735_GREEN;
static uint16_t _bg = ST7735_BLACK;

// Companion code to the above tables.  Reads and issues
// a series of LCD commands stored in PROGMEM byte array.
static void commandList(const uint8_t *addr) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;   // Number of commands to follow
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {                 // For each command...
 80011ae:	e033      	b.n	8001218 <commandList+0x7c>
		lcd7735_sendCmd(*addr++); //   Read, issue command
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	607a      	str	r2, [r7, #4]
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fcd1 	bl	8001b60 <lcd7735_sendCmd>
		numArgs  = *addr++;    //   Number of args to follow
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	73bb      	strb	r3, [r7, #14]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 80011c8:	7bbb      	ldrb	r3, [r7, #14]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d0:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;                   //   Mask out delay bit
 80011d2:	7bbb      	ldrb	r3, [r7, #14]
 80011d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011d8:	73bb      	strb	r3, [r7, #14]
		while(numArgs--) {                   //   For each argument...
 80011da:	e006      	b.n	80011ea <commandList+0x4e>
			lcd7735_sendData(*addr++);  //     Read, issue argument
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 fccf 	bl	8001b88 <lcd7735_sendData>
		while(numArgs--) {                   //   For each argument...
 80011ea:	7bbb      	ldrb	r3, [r7, #14]
 80011ec:	1e5a      	subs	r2, r3, #1
 80011ee:	73ba      	strb	r2, [r7, #14]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1f3      	bne.n	80011dc <commandList+0x40>
		}

		if(ms) {
 80011f4:	89bb      	ldrh	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00e      	beq.n	8001218 <commandList+0x7c>
			ms = *addr++; // Read post-command delay time (ms)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	1c5a      	adds	r2, r3, #1
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8001204:	89bb      	ldrh	r3, [r7, #12]
 8001206:	2bff      	cmp	r3, #255	; 0xff
 8001208:	d102      	bne.n	8001210 <commandList+0x74>
 800120a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800120e:	81bb      	strh	r3, [r7, #12]
			delay_ms(ms);
 8001210:	89bb      	ldrh	r3, [r7, #12]
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fc78 	bl	8001b08 <delay_ms>
	while(numCommands--) {                 // For each command...
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	1e5a      	subs	r2, r3, #1
 800121c:	73fa      	strb	r2, [r7, #15]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1c6      	bne.n	80011b0 <commandList+0x14>
		}
	}
}
 8001222:	bf00      	nop
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <commonInit>:

// Initialization code common to both 'B' and 'R' type displays
static void commonInit(const uint8_t *cmdList) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	// toggle RST low to reset; CS low so it'll listen to us
	ST7735_CS0;
 8001234:	2106      	movs	r1, #6
 8001236:	480c      	ldr	r0, [pc, #48]	; (8001268 <commonInit+0x3c>)
 8001238:	f001 fb1e 	bl	8002878 <gpioResetPin>
	lcd7735_sendCmd(ST7735_SWRESET);
	delay_ms(500);
#else
	//ST7735_RST1;
	//delay_ms(500);
	ST7735_RST0;
 800123c:	2109      	movs	r1, #9
 800123e:	480b      	ldr	r0, [pc, #44]	; (800126c <commonInit+0x40>)
 8001240:	f001 fb1a 	bl	8002878 <gpioResetPin>
	delay_ms(50);  //default value 500
 8001244:	2032      	movs	r0, #50	; 0x32
 8001246:	f000 fc5f 	bl	8001b08 <delay_ms>
	ST7735_RST1;
 800124a:	2109      	movs	r1, #9
 800124c:	4807      	ldr	r0, [pc, #28]	; (800126c <commonInit+0x40>)
 800124e:	f001 fae8 	bl	8002822 <gpioSetPin>
	//delay_ms(500);
#endif    
	if(cmdList) commandList(cmdList);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <commonInit+0x32>
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff9f 	bl	800119c <commandList>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40020400 	.word	0x40020400
 800126c:	40020000 	.word	0x40020000

08001270 <lcd7735_initR>:
	commonInit(Bcmd);
}


// Initialization for ST7735R screens (green or red tabs)
void lcd7735_initR(uint8_t options) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
	delay_ms(50);
 800127a:	2032      	movs	r0, #50	; 0x32
 800127c:	f000 fc44 	bl	8001b08 <delay_ms>
	commonInit(Rcmd1);
 8001280:	4811      	ldr	r0, [pc, #68]	; (80012c8 <lcd7735_initR+0x58>)
 8001282:	f7ff ffd3 	bl	800122c <commonInit>
	if(options == INITR_GREENTAB) {
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d109      	bne.n	80012a0 <lcd7735_initR+0x30>
		commandList(Rcmd2green);
 800128c:	480f      	ldr	r0, [pc, #60]	; (80012cc <lcd7735_initR+0x5c>)
 800128e:	f7ff ff85 	bl	800119c <commandList>
		colstart = 2;
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <lcd7735_initR+0x60>)
 8001294:	2202      	movs	r2, #2
 8001296:	601a      	str	r2, [r3, #0]
		rowstart = 1;
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <lcd7735_initR+0x64>)
 800129a:	2201      	movs	r2, #1
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e002      	b.n	80012a6 <lcd7735_initR+0x36>
	} else {
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <lcd7735_initR+0x68>)
 80012a2:	f7ff ff7b 	bl	800119c <commandList>
	}
	commandList(Rcmd3);
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <lcd7735_initR+0x6c>)
 80012a8:	f7ff ff78 	bl	800119c <commandList>

	// if black, change MADCTL color filter
	if (options == INITR_BLACKTAB) {
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d105      	bne.n	80012be <lcd7735_initR+0x4e>
		lcd7735_sendCmd(ST7735_MADCTL);
 80012b2:	2036      	movs	r0, #54	; 0x36
 80012b4:	f000 fc54 	bl	8001b60 <lcd7735_sendCmd>
		lcd7735_sendData(0xC0);
 80012b8:	20c0      	movs	r0, #192	; 0xc0
 80012ba:	f000 fc65 	bl	8001b88 <lcd7735_sendData>
	}

	//  tabcolor = options;
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	08007fbc 	.word	0x08007fbc
 80012cc:	08007ff8 	.word	0x08007ff8
 80012d0:	20000214 	.word	0x20000214
 80012d4:	20000218 	.word	0x20000218
 80012d8:	08008008 	.word	0x08008008
 80012dc:	08008018 	.word	0x08008018

080012e0 <lcd7735_setAddrWindow>:


void lcd7735_setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4604      	mov	r4, r0
 80012e8:	4608      	mov	r0, r1
 80012ea:	4611      	mov	r1, r2
 80012ec:	461a      	mov	r2, r3
 80012ee:	4623      	mov	r3, r4
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	4603      	mov	r3, r0
 80012f4:	71bb      	strb	r3, [r7, #6]
 80012f6:	460b      	mov	r3, r1
 80012f8:	717b      	strb	r3, [r7, #5]
 80012fa:	4613      	mov	r3, r2
 80012fc:	713b      	strb	r3, [r7, #4]
	lcd7735_sendCmd(ST7735_CASET);		// Column addr set
 80012fe:	202a      	movs	r0, #42	; 0x2a
 8001300:	f000 fc2e 	bl	8001b60 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);
 8001304:	2000      	movs	r0, #0
 8001306:	f000 fc3f 	bl	8001b88 <lcd7735_sendData>
	lcd7735_sendData(x0+colstart);     // XSTART 
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <lcd7735_setAddrWindow+0x98>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	4413      	add	r3, r2
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f000 fc36 	bl	8001b88 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 800131c:	2000      	movs	r0, #0
 800131e:	f000 fc33 	bl	8001b88 <lcd7735_sendData>
	lcd7735_sendData(x1+colstart);     // XEND
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <lcd7735_setAddrWindow+0x98>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	4413      	add	r3, r2
 800132c:	b2db      	uxtb	r3, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fc2a 	bl	8001b88 <lcd7735_sendData>

	lcd7735_sendCmd(ST7735_RASET); // Row addr set
 8001334:	202b      	movs	r0, #43	; 0x2b
 8001336:	f000 fc13 	bl	8001b60 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);
 800133a:	2000      	movs	r0, #0
 800133c:	f000 fc24 	bl	8001b88 <lcd7735_sendData>
	lcd7735_sendData(y0+rowstart);     // YSTART
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <lcd7735_setAddrWindow+0x9c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	79bb      	ldrb	r3, [r7, #6]
 8001348:	4413      	add	r3, r2
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fc1b 	bl	8001b88 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8001352:	2000      	movs	r0, #0
 8001354:	f000 fc18 	bl	8001b88 <lcd7735_sendData>
	lcd7735_sendData(y1+rowstart);     // YEND
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <lcd7735_setAddrWindow+0x9c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	793b      	ldrb	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fc0f 	bl	8001b88 <lcd7735_sendData>

	lcd7735_sendCmd(ST7735_RAMWR); // write to RAM
 800136a:	202c      	movs	r0, #44	; 0x2c
 800136c:	f000 fbf8 	bl	8001b60 <lcd7735_sendCmd>
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	20000214 	.word	0x20000214
 800137c:	20000218 	.word	0x20000218

08001380 <lcd7735_pushColor>:
void lcd7735_pushColor(uint16_t color) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
	ST7735_DC1;
 800138a:	2107      	movs	r1, #7
 800138c:	4809      	ldr	r0, [pc, #36]	; (80013b4 <lcd7735_pushColor+0x34>)
 800138e:	f001 fa48 	bl	8002822 <gpioSetPin>
	putpix(color);
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	b29b      	uxth	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fbcc 	bl	8001b38 <lcd7735_senddata>
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 fbc7 	bl	8001b38 <lcd7735_senddata>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40020800 	.word	0x40020800

080013b8 <lcd7735_fillRect>:
	lcd7735_setAddrWindow(x,y,x+1,y+1);
	lcd7735_pushColor(color);
}

// fill a rectangle
void lcd7735_fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {	
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4604      	mov	r4, r0
 80013c0:	4608      	mov	r0, r1
 80013c2:	4611      	mov	r1, r2
 80013c4:	461a      	mov	r2, r3
 80013c6:	4623      	mov	r3, r4
 80013c8:	80fb      	strh	r3, [r7, #6]
 80013ca:	4603      	mov	r3, r0
 80013cc:	80bb      	strh	r3, [r7, #4]
 80013ce:	460b      	mov	r3, r1
 80013d0:	807b      	strh	r3, [r7, #2]
 80013d2:	4613      	mov	r3, r2
 80013d4:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= _width) || (y >= _height)) return;
 80013d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013da:	4a37      	ldr	r2, [pc, #220]	; (80014b8 <lcd7735_fillRect+0x100>)
 80013dc:	8812      	ldrh	r2, [r2, #0]
 80013de:	4293      	cmp	r3, r2
 80013e0:	da65      	bge.n	80014ae <lcd7735_fillRect+0xf6>
 80013e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013e6:	4a35      	ldr	r2, [pc, #212]	; (80014bc <lcd7735_fillRect+0x104>)
 80013e8:	8812      	ldrh	r2, [r2, #0]
 80013ea:	4293      	cmp	r3, r2
 80013ec:	da5f      	bge.n	80014ae <lcd7735_fillRect+0xf6>
	if((x + w - 1) >= _width)  w = _width  - x;
 80013ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013f6:	4413      	add	r3, r2
 80013f8:	4a2f      	ldr	r2, [pc, #188]	; (80014b8 <lcd7735_fillRect+0x100>)
 80013fa:	8812      	ldrh	r2, [r2, #0]
 80013fc:	4293      	cmp	r3, r2
 80013fe:	dd05      	ble.n	800140c <lcd7735_fillRect+0x54>
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <lcd7735_fillRect+0x100>)
 8001402:	881a      	ldrh	r2, [r3, #0]
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	b29b      	uxth	r3, r3
 800140a:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= _height) h = _height - y;
 800140c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001410:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001414:	4413      	add	r3, r2
 8001416:	4a29      	ldr	r2, [pc, #164]	; (80014bc <lcd7735_fillRect+0x104>)
 8001418:	8812      	ldrh	r2, [r2, #0]
 800141a:	4293      	cmp	r3, r2
 800141c:	dd05      	ble.n	800142a <lcd7735_fillRect+0x72>
 800141e:	4b27      	ldr	r3, [pc, #156]	; (80014bc <lcd7735_fillRect+0x104>)
 8001420:	881a      	ldrh	r2, [r3, #0]
 8001422:	88bb      	ldrh	r3, [r7, #4]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	b29b      	uxth	r3, r3
 8001428:	803b      	strh	r3, [r7, #0]

	lcd7735_setAddrWindow(x, y, x+w-1, y+h-1);
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	b2d8      	uxtb	r0, r3
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	b2d9      	uxtb	r1, r3
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	4413      	add	r3, r2
 800143c:	b2db      	uxtb	r3, r3
 800143e:	3b01      	subs	r3, #1
 8001440:	b2dc      	uxtb	r4, r3
 8001442:	88bb      	ldrh	r3, [r7, #4]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	883b      	ldrh	r3, [r7, #0]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4413      	add	r3, r2
 800144c:	b2db      	uxtb	r3, r3
 800144e:	3b01      	subs	r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	4622      	mov	r2, r4
 8001454:	f7ff ff44 	bl	80012e0 <lcd7735_setAddrWindow>

	ST7735_DC1;
 8001458:	2107      	movs	r1, #7
 800145a:	4819      	ldr	r0, [pc, #100]	; (80014c0 <lcd7735_fillRect+0x108>)
 800145c:	f001 f9e1 	bl	8002822 <gpioSetPin>
	for(y=h; y>0; y--) {
 8001460:	883b      	ldrh	r3, [r7, #0]
 8001462:	80bb      	strh	r3, [r7, #4]
 8001464:	e01e      	b.n	80014a4 <lcd7735_fillRect+0xec>
		for(x=w; x>0; x--) {
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	80fb      	strh	r3, [r7, #6]
 800146a:	e011      	b.n	8001490 <lcd7735_fillRect+0xd8>
			putpix(color);
 800146c:	8b3b      	ldrh	r3, [r7, #24]
 800146e:	0a1b      	lsrs	r3, r3, #8
 8001470:	b29b      	uxth	r3, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fb5f 	bl	8001b38 <lcd7735_senddata>
 800147a:	8b3b      	ldrh	r3, [r7, #24]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f000 fb5a 	bl	8001b38 <lcd7735_senddata>
		for(x=w; x>0; x--) {
 8001484:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001488:	b29b      	uxth	r3, r3
 800148a:	3b01      	subs	r3, #1
 800148c:	b29b      	uxth	r3, r3
 800148e:	80fb      	strh	r3, [r7, #6]
 8001490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001494:	2b00      	cmp	r3, #0
 8001496:	dce9      	bgt.n	800146c <lcd7735_fillRect+0xb4>
	for(y=h; y>0; y--) {
 8001498:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800149c:	b29b      	uxth	r3, r3
 800149e:	3b01      	subs	r3, #1
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	80bb      	strh	r3, [r7, #4]
 80014a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	dcdc      	bgt.n	8001466 <lcd7735_fillRect+0xae>
 80014ac:	e000      	b.n	80014b0 <lcd7735_fillRect+0xf8>
	if((x >= _width) || (y >= _height)) return;
 80014ae:	bf00      	nop
		}
	}
}
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000000c 	.word	0x2000000c
 80014bc:	2000000e 	.word	0x2000000e
 80014c0:	40020800 	.word	0x40020800

080014c4 <lcd7735_setFont>:
				lcd7735_pushColor(data[(ty*sx)+tx]);
			}
	}
}

void lcd7735_setFont(uint8_t* font) {
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <lcd7735_setFont+0x40>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
	cfont.x_size=font[0];
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <lcd7735_setFont+0x40>)
 80014d8:	711a      	strb	r2, [r3, #4]
	cfont.y_size=font[1];
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	785a      	ldrb	r2, [r3, #1]
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <lcd7735_setFont+0x40>)
 80014e0:	715a      	strb	r2, [r3, #5]
	cfont.offset=font[2];
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	789a      	ldrb	r2, [r3, #2]
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <lcd7735_setFont+0x40>)
 80014e8:	719a      	strb	r2, [r3, #6]
	cfont.numchars=font[3];
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3303      	adds	r3, #3
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <lcd7735_setFont+0x40>)
 80014f4:	811a      	strh	r2, [r3, #8]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000220 	.word	0x20000220

08001508 <printChar>:

void printChar(uint8_t c, int x, int y) {
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch,fz;
	uint16_t j;
	uint16_t temp; 
	int zz;

	if( cfont.x_size < 8 ) 
 8001516:	4b74      	ldr	r3, [pc, #464]	; (80016e8 <printChar+0x1e0>)
 8001518:	791b      	ldrb	r3, [r3, #4]
 800151a:	2b07      	cmp	r3, #7
 800151c:	d803      	bhi.n	8001526 <printChar+0x1e>
		fz = cfont.x_size;
 800151e:	4b72      	ldr	r3, [pc, #456]	; (80016e8 <printChar+0x1e0>)
 8001520:	791b      	ldrb	r3, [r3, #4]
 8001522:	77bb      	strb	r3, [r7, #30]
 8001524:	e003      	b.n	800152e <printChar+0x26>
	else
		fz = cfont.x_size/8;
 8001526:	4b70      	ldr	r3, [pc, #448]	; (80016e8 <printChar+0x1e0>)
 8001528:	791b      	ldrb	r3, [r3, #4]
 800152a:	08db      	lsrs	r3, r3, #3
 800152c:	77bb      	strb	r3, [r7, #30]
	if (!_transparent) {
 800152e:	4b6f      	ldr	r3, [pc, #444]	; (80016ec <printChar+0x1e4>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d15e      	bne.n	80015f4 <printChar+0xec>
		lcd7735_setAddrWindow(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	b2d9      	uxtb	r1, r3
 800153e:	4b6a      	ldr	r3, [pc, #424]	; (80016e8 <printChar+0x1e0>)
 8001540:	791a      	ldrb	r2, [r3, #4]
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4413      	add	r3, r2
 8001548:	b2db      	uxtb	r3, r3
 800154a:	3b01      	subs	r3, #1
 800154c:	b2dc      	uxtb	r4, r3
 800154e:	4b66      	ldr	r3, [pc, #408]	; (80016e8 <printChar+0x1e0>)
 8001550:	795a      	ldrb	r2, [r3, #5]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	4413      	add	r3, r2
 8001558:	b2db      	uxtb	r3, r3
 800155a:	3b01      	subs	r3, #1
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4622      	mov	r2, r4
 8001560:	f7ff febe 	bl	80012e0 <lcd7735_setAddrWindow>

		temp=((c-cfont.offset)*((fz)*cfont.y_size))+4;
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	4a60      	ldr	r2, [pc, #384]	; (80016e8 <printChar+0x1e0>)
 8001568:	7992      	ldrb	r2, [r2, #6]
 800156a:	1a9b      	subs	r3, r3, r2
 800156c:	b29a      	uxth	r2, r3
 800156e:	7fbb      	ldrb	r3, [r7, #30]
 8001570:	b299      	uxth	r1, r3
 8001572:	4b5d      	ldr	r3, [pc, #372]	; (80016e8 <printChar+0x1e0>)
 8001574:	795b      	ldrb	r3, [r3, #5]
 8001576:	b29b      	uxth	r3, r3
 8001578:	fb11 f303 	smulbb	r3, r1, r3
 800157c:	b29b      	uxth	r3, r3
 800157e:	fb12 f303 	smulbb	r3, r2, r3
 8001582:	b29b      	uxth	r3, r3
 8001584:	3304      	adds	r3, #4
 8001586:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++) {
 8001588:	2300      	movs	r3, #0
 800158a:	83bb      	strh	r3, [r7, #28]
 800158c:	e029      	b.n	80015e2 <printChar+0xda>
			ch = cfont.font[temp];
 800158e:	4b56      	ldr	r3, [pc, #344]	; (80016e8 <printChar+0x1e0>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	8b7b      	ldrh	r3, [r7, #26]
 8001594:	4413      	add	r3, r2
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	74fb      	strb	r3, [r7, #19]
			for(i=0;i<8;i++) {   
 800159a:	2300      	movs	r3, #0
 800159c:	77fb      	strb	r3, [r7, #31]
 800159e:	e017      	b.n	80015d0 <printChar+0xc8>
				if((ch&(1<<(7-i)))!=0)   
 80015a0:	7cfa      	ldrb	r2, [r7, #19]
 80015a2:	7ffb      	ldrb	r3, [r7, #31]
 80015a4:	f1c3 0307 	rsb	r3, r3, #7
 80015a8:	fa42 f303 	asr.w	r3, r2, r3
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <printChar+0xb8>
				{
					lcd7735_pushColor(_fg);
 80015b4:	4b4e      	ldr	r3, [pc, #312]	; (80016f0 <printChar+0x1e8>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fee1 	bl	8001380 <lcd7735_pushColor>
 80015be:	e004      	b.n	80015ca <printChar+0xc2>
				} 
				else
				{
					lcd7735_pushColor(_bg);
 80015c0:	4b4c      	ldr	r3, [pc, #304]	; (80016f4 <printChar+0x1ec>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fedb 	bl	8001380 <lcd7735_pushColor>
			for(i=0;i<8;i++) {   
 80015ca:	7ffb      	ldrb	r3, [r7, #31]
 80015cc:	3301      	adds	r3, #1
 80015ce:	77fb      	strb	r3, [r7, #31]
 80015d0:	7ffb      	ldrb	r3, [r7, #31]
 80015d2:	2b07      	cmp	r3, #7
 80015d4:	d9e4      	bls.n	80015a0 <printChar+0x98>
				}   
			}
			temp++;
 80015d6:	8b7b      	ldrh	r3, [r7, #26]
 80015d8:	3301      	adds	r3, #1
 80015da:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++) {
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
 80015de:	3301      	adds	r3, #1
 80015e0:	83bb      	strh	r3, [r7, #28]
 80015e2:	8bba      	ldrh	r2, [r7, #28]
 80015e4:	7fbb      	ldrb	r3, [r7, #30]
 80015e6:	4940      	ldr	r1, [pc, #256]	; (80016e8 <printChar+0x1e0>)
 80015e8:	7949      	ldrb	r1, [r1, #5]
 80015ea:	fb01 f303 	mul.w	r3, r1, r3
 80015ee:	429a      	cmp	r2, r3
 80015f0:	dbcd      	blt.n	800158e <printChar+0x86>
				}
			}
			temp+=(fz);
		}
	}
}
 80015f2:	e075      	b.n	80016e0 <printChar+0x1d8>
		temp=((c-cfont.offset)*((fz)*cfont.y_size))+4;
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	4a3c      	ldr	r2, [pc, #240]	; (80016e8 <printChar+0x1e0>)
 80015f8:	7992      	ldrb	r2, [r2, #6]
 80015fa:	1a9b      	subs	r3, r3, r2
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	7fbb      	ldrb	r3, [r7, #30]
 8001600:	b299      	uxth	r1, r3
 8001602:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <printChar+0x1e0>)
 8001604:	795b      	ldrb	r3, [r3, #5]
 8001606:	b29b      	uxth	r3, r3
 8001608:	fb11 f303 	smulbb	r3, r1, r3
 800160c:	b29b      	uxth	r3, r3
 800160e:	fb12 f303 	smulbb	r3, r2, r3
 8001612:	b29b      	uxth	r3, r3
 8001614:	3304      	adds	r3, #4
 8001616:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++) 
 8001618:	2300      	movs	r3, #0
 800161a:	83bb      	strh	r3, [r7, #28]
 800161c:	e05a      	b.n	80016d4 <printChar+0x1cc>
			for (zz=0; zz<(fz); zz++)
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	e04b      	b.n	80016bc <printChar+0x1b4>
				ch = cfont.font[temp+zz]; 
 8001624:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <printChar+0x1e0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	8b79      	ldrh	r1, [r7, #26]
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	440a      	add	r2, r1
 800162e:	4413      	add	r3, r2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 8001634:	2300      	movs	r3, #0
 8001636:	77fb      	strb	r3, [r7, #31]
 8001638:	e03a      	b.n	80016b0 <printChar+0x1a8>
					lcd7735_setAddrWindow(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	7ffb      	ldrb	r3, [r7, #31]
 8001640:	4413      	add	r3, r2
 8001642:	b2da      	uxtb	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	b2db      	uxtb	r3, r3
 800164c:	4413      	add	r3, r2
 800164e:	b2d8      	uxtb	r0, r3
 8001650:	8bbb      	ldrh	r3, [r7, #28]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	4413      	add	r3, r2
 800165a:	b2d9      	uxtb	r1, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	7ffb      	ldrb	r3, [r7, #31]
 8001662:	4413      	add	r3, r2
 8001664:	b2da      	uxtb	r2, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	4413      	add	r3, r2
 8001670:	b2db      	uxtb	r3, r3
 8001672:	3301      	adds	r3, #1
 8001674:	b2dc      	uxtb	r4, r3
 8001676:	8bbb      	ldrh	r3, [r7, #28]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	4413      	add	r3, r2
 8001680:	b2db      	uxtb	r3, r3
 8001682:	3301      	adds	r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	4622      	mov	r2, r4
 8001688:	f7ff fe2a 	bl	80012e0 <lcd7735_setAddrWindow>
					if((ch&(1<<(7-i)))!=0)   
 800168c:	7cfa      	ldrb	r2, [r7, #19]
 800168e:	7ffb      	ldrb	r3, [r7, #31]
 8001690:	f1c3 0307 	rsb	r3, r3, #7
 8001694:	fa42 f303 	asr.w	r3, r2, r3
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d004      	beq.n	80016aa <printChar+0x1a2>
						lcd7735_pushColor(_fg);
 80016a0:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <printChar+0x1e8>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fe6b 	bl	8001380 <lcd7735_pushColor>
				for(i=0;i<8;i++)
 80016aa:	7ffb      	ldrb	r3, [r7, #31]
 80016ac:	3301      	adds	r3, #1
 80016ae:	77fb      	strb	r3, [r7, #31]
 80016b0:	7ffb      	ldrb	r3, [r7, #31]
 80016b2:	2b07      	cmp	r3, #7
 80016b4:	d9c1      	bls.n	800163a <printChar+0x132>
			for (zz=0; zz<(fz); zz++)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3301      	adds	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	7fbb      	ldrb	r3, [r7, #30]
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dbaf      	blt.n	8001624 <printChar+0x11c>
			temp+=(fz);
 80016c4:	7fbb      	ldrb	r3, [r7, #30]
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	8b7b      	ldrh	r3, [r7, #26]
 80016ca:	4413      	add	r3, r2
 80016cc:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++) 
 80016ce:	8bbb      	ldrh	r3, [r7, #28]
 80016d0:	3301      	adds	r3, #1
 80016d2:	83bb      	strh	r3, [r7, #28]
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <printChar+0x1e0>)
 80016d6:	795b      	ldrb	r3, [r3, #5]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	8bba      	ldrh	r2, [r7, #28]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d39e      	bcc.n	800161e <printChar+0x116>
}
 80016e0:	bf00      	nop
 80016e2:	3724      	adds	r7, #36	; 0x24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd90      	pop	{r4, r7, pc}
 80016e8:	20000220 	.word	0x20000220
 80016ec:	2000022c 	.word	0x2000022c
 80016f0:	20000010 	.word	0x20000010
 80016f4:	2000022e 	.word	0x2000022e

080016f8 <rotateChar>:

void rotateChar(uint8_t c, int x, int y, int pos, int deg) {
 80016f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016fc:	b08e      	sub	sp, #56	; 0x38
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	4603      	mov	r3, r0
 8001708:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch,fz;
	uint16_t temp; 
	int newx,newy;
	double radian = deg*0.0175;
 800170a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800170c:	f7fe ff12 	bl	8000534 <__aeabi_i2d>
 8001710:	a395      	add	r3, pc, #596	; (adr r3, 8001968 <rotateChar+0x270>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	f7fe ff77 	bl	8000608 <__aeabi_dmul>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int zz;

	if( cfont.x_size < 8 ) 
 8001722:	4b8d      	ldr	r3, [pc, #564]	; (8001958 <rotateChar+0x260>)
 8001724:	791b      	ldrb	r3, [r3, #4]
 8001726:	2b07      	cmp	r3, #7
 8001728:	d804      	bhi.n	8001734 <rotateChar+0x3c>
		fz = cfont.x_size;
 800172a:	4b8b      	ldr	r3, [pc, #556]	; (8001958 <rotateChar+0x260>)
 800172c:	791b      	ldrb	r3, [r3, #4]
 800172e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001732:	e004      	b.n	800173e <rotateChar+0x46>
	else
		fz = cfont.x_size/8;	
 8001734:	4b88      	ldr	r3, [pc, #544]	; (8001958 <rotateChar+0x260>)
 8001736:	791b      	ldrb	r3, [r3, #4]
 8001738:	08db      	lsrs	r3, r3, #3
 800173a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	temp=((c-cfont.offset)*((fz)*cfont.y_size))+4;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	4a85      	ldr	r2, [pc, #532]	; (8001958 <rotateChar+0x260>)
 8001742:	7992      	ldrb	r2, [r2, #6]
 8001744:	1a9b      	subs	r3, r3, r2
 8001746:	b29a      	uxth	r2, r3
 8001748:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800174c:	b299      	uxth	r1, r3
 800174e:	4b82      	ldr	r3, [pc, #520]	; (8001958 <rotateChar+0x260>)
 8001750:	795b      	ldrb	r3, [r3, #5]
 8001752:	b29b      	uxth	r3, r3
 8001754:	fb11 f303 	smulbb	r3, r1, r3
 8001758:	b29b      	uxth	r3, r3
 800175a:	fb12 f303 	smulbb	r3, r2, r3
 800175e:	b29b      	uxth	r3, r3
 8001760:	3304      	adds	r3, #4
 8001762:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0;j<cfont.y_size;j++) {
 8001764:	2300      	movs	r3, #0
 8001766:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800176a:	e0e6      	b.n	800193a <rotateChar+0x242>
		for (zz=0; zz<(fz); zz++) {
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001770:	e0d2      	b.n	8001918 <rotateChar+0x220>
			ch = cfont.font[temp+zz]; 
 8001772:	4b79      	ldr	r3, [pc, #484]	; (8001958 <rotateChar+0x260>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800177a:	440a      	add	r2, r1
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	77fb      	strb	r3, [r7, #31]
			for(i=0;i<8;i++) {   
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001788:	e0be      	b.n	8001908 <rotateChar+0x210>
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 800178a:	68b8      	ldr	r0, [r7, #8]
 800178c:	f7fe fed2 	bl	8000534 <__aeabi_i2d>
 8001790:	4604      	mov	r4, r0
 8001792:	460d      	mov	r5, r1
 8001794:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	441a      	add	r2, r3
 800179e:	4b6e      	ldr	r3, [pc, #440]	; (8001958 <rotateChar+0x260>)
 80017a0:	791b      	ldrb	r3, [r3, #4]
 80017a2:	4619      	mov	r1, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	fb01 f303 	mul.w	r3, r1, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fec1 	bl	8000534 <__aeabi_i2d>
 80017b2:	4680      	mov	r8, r0
 80017b4:	4689      	mov	r9, r1
 80017b6:	ed97 0b08 	vldr	d0, [r7, #32]
 80017ba:	f005 f8c9 	bl	8006950 <cos>
 80017be:	ec53 2b10 	vmov	r2, r3, d0
 80017c2:	4640      	mov	r0, r8
 80017c4:	4649      	mov	r1, r9
 80017c6:	f7fe ff1f 	bl	8000608 <__aeabi_dmul>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4692      	mov	sl, r2
 80017d0:	469b      	mov	fp, r3
 80017d2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe feac 	bl	8000534 <__aeabi_i2d>
 80017dc:	4680      	mov	r8, r0
 80017de:	4689      	mov	r9, r1
 80017e0:	ed97 0b08 	vldr	d0, [r7, #32]
 80017e4:	f005 f908 	bl	80069f8 <sin>
 80017e8:	ec53 2b10 	vmov	r2, r3, d0
 80017ec:	4640      	mov	r0, r8
 80017ee:	4649      	mov	r1, r9
 80017f0:	f7fe ff0a 	bl	8000608 <__aeabi_dmul>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4650      	mov	r0, sl
 80017fa:	4659      	mov	r1, fp
 80017fc:	f7fe fd4c 	bl	8000298 <__aeabi_dsub>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4620      	mov	r0, r4
 8001806:	4629      	mov	r1, r5
 8001808:	f7fe fd48 	bl	800029c <__adddf3>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f7ff f9a8 	bl	8000b68 <__aeabi_d2iz>
 8001818:	4603      	mov	r3, r0
 800181a:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7fe fe89 	bl	8000534 <__aeabi_i2d>
 8001822:	4604      	mov	r4, r0
 8001824:	460d      	mov	r5, r1
 8001826:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe82 	bl	8000534 <__aeabi_i2d>
 8001830:	4680      	mov	r8, r0
 8001832:	4689      	mov	r9, r1
 8001834:	ed97 0b08 	vldr	d0, [r7, #32]
 8001838:	f005 f88a 	bl	8006950 <cos>
 800183c:	ec53 2b10 	vmov	r2, r3, d0
 8001840:	4640      	mov	r0, r8
 8001842:	4649      	mov	r1, r9
 8001844:	f7fe fee0 	bl	8000608 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4692      	mov	sl, r2
 800184e:	469b      	mov	fp, r3
 8001850:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	441a      	add	r2, r3
 800185a:	4b3f      	ldr	r3, [pc, #252]	; (8001958 <rotateChar+0x260>)
 800185c:	791b      	ldrb	r3, [r3, #4]
 800185e:	4619      	mov	r1, r3
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	fb01 f303 	mul.w	r3, r1, r3
 8001866:	4413      	add	r3, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe63 	bl	8000534 <__aeabi_i2d>
 800186e:	4680      	mov	r8, r0
 8001870:	4689      	mov	r9, r1
 8001872:	ed97 0b08 	vldr	d0, [r7, #32]
 8001876:	f005 f8bf 	bl	80069f8 <sin>
 800187a:	ec53 2b10 	vmov	r2, r3, d0
 800187e:	4640      	mov	r0, r8
 8001880:	4649      	mov	r1, r9
 8001882:	f7fe fec1 	bl	8000608 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4650      	mov	r0, sl
 800188c:	4659      	mov	r1, fp
 800188e:	f7fe fd05 	bl	800029c <__adddf3>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4620      	mov	r0, r4
 8001898:	4629      	mov	r1, r5
 800189a:	f7fe fcff 	bl	800029c <__adddf3>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff f95f 	bl	8000b68 <__aeabi_d2iz>
 80018aa:	4603      	mov	r3, r0
 80018ac:	617b      	str	r3, [r7, #20]

				lcd7735_setAddrWindow(newx,newy,newx+1,newy+1);
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	b2d8      	uxtb	r0, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	b2d9      	uxtb	r1, r3
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	3301      	adds	r3, #1
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f7ff fd0b 	bl	80012e0 <lcd7735_setAddrWindow>

				if((ch&(1<<(7-i)))!=0) {
 80018ca:	7ffa      	ldrb	r2, [r7, #31]
 80018cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018d0:	f1c3 0307 	rsb	r3, r3, #7
 80018d4:	fa42 f303 	asr.w	r3, r2, r3
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <rotateChar+0x1f4>
					lcd7735_pushColor(_fg);
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <rotateChar+0x264>)
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fd4b 	bl	8001380 <lcd7735_pushColor>
 80018ea:	e008      	b.n	80018fe <rotateChar+0x206>
				} else  {
					if (!_transparent)
 80018ec:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <rotateChar+0x268>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d104      	bne.n	80018fe <rotateChar+0x206>
						lcd7735_pushColor(_bg);
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <rotateChar+0x26c>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fd41 	bl	8001380 <lcd7735_pushColor>
			for(i=0;i<8;i++) {   
 80018fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001902:	3301      	adds	r3, #1
 8001904:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001908:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800190c:	2b07      	cmp	r3, #7
 800190e:	f67f af3c 	bls.w	800178a <rotateChar+0x92>
		for (zz=0; zz<(fz); zz++) {
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	3301      	adds	r3, #1
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001918:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800191c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191e:	429a      	cmp	r2, r3
 8001920:	f6ff af27 	blt.w	8001772 <rotateChar+0x7a>
				}   
			}
		}
		temp+=(fz);
 8001924:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001928:	b29a      	uxth	r2, r3
 800192a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800192c:	4413      	add	r3, r2
 800192e:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0;j<cfont.y_size;j++) {
 8001930:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001934:	3301      	adds	r3, #1
 8001936:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <rotateChar+0x260>)
 800193c:	795b      	ldrb	r3, [r3, #5]
 800193e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001942:	429a      	cmp	r2, r3
 8001944:	f4ff af12 	bcc.w	800176c <rotateChar+0x74>
	}
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3738      	adds	r7, #56	; 0x38
 800194e:	46bd      	mov	sp, r7
 8001950:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001954:	f3af 8000 	nop.w
 8001958:	20000220 	.word	0x20000220
 800195c:	20000010 	.word	0x20000010
 8001960:	2000022c 	.word	0x2000022c
 8001964:	2000022e 	.word	0x2000022e
 8001968:	1eb851ec 	.word	0x1eb851ec
 800196c:	3f91eb85 	.word	0x3f91eb85

08001970 <lcd7735_print>:

void lcd7735_print(char *st, int x, int y, int deg) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af02      	add	r7, sp, #8
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]
	int stl, i;

	stl = strlen(st);
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f7fe fc2e 	bl	80001e0 <strlen>
 8001984:	4603      	mov	r3, r0
 8001986:	613b      	str	r3, [r7, #16]

	if (x==RIGHT)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f113 0f02 	cmn.w	r3, #2
 800198e:	d10a      	bne.n	80019a6 <lcd7735_print+0x36>
		x=(_width+1)-(stl*cfont.x_size);
 8001990:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <lcd7735_print+0xb8>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <lcd7735_print+0xbc>)
 8001998:	791b      	ldrb	r3, [r3, #4]
 800199a:	4619      	mov	r1, r3
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	60bb      	str	r3, [r7, #8]
	if (x==CENTER)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ac:	d10d      	bne.n	80019ca <lcd7735_print+0x5a>
		x=((_height+1)-(stl*cfont.x_size))/2;
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <lcd7735_print+0xc0>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <lcd7735_print+0xbc>)
 80019b6:	791b      	ldrb	r3, [r3, #4]
 80019b8:	4619      	mov	r1, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	fb01 f303 	mul.w	r3, r1, r3
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	0fda      	lsrs	r2, r3, #31
 80019c4:	4413      	add	r3, r2
 80019c6:	105b      	asrs	r3, r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]

	for (i=0; i<stl; i++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e021      	b.n	8001a14 <lcd7735_print+0xa4>
		if (deg==0)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d110      	bne.n	80019f8 <lcd7735_print+0x88>
			printChar(*st++, x + (i*(cfont.x_size)), y);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	60fa      	str	r2, [r7, #12]
 80019dc:	7818      	ldrb	r0, [r3, #0]
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <lcd7735_print+0xbc>)
 80019e0:	791b      	ldrb	r3, [r3, #4]
 80019e2:	461a      	mov	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fb03 f202 	mul.w	r2, r3, r2
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	4413      	add	r3, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	4619      	mov	r1, r3
 80019f2:	f7ff fd89 	bl	8001508 <printChar>
 80019f6:	e00a      	b.n	8001a0e <lcd7735_print+0x9e>
		else
			rotateChar(*st++, x, y, i, deg);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	60fa      	str	r2, [r7, #12]
 80019fe:	7818      	ldrb	r0, [r3, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	f7ff fe75 	bl	80016f8 <rotateChar>
	for (i=0; i<stl; i++)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dbd9      	blt.n	80019d0 <lcd7735_print+0x60>
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000000c 	.word	0x2000000c
 8001a2c:	20000220 	.word	0x20000220
 8001a30:	2000000e 	.word	0x2000000e

08001a34 <lcd7735_fillScreen>:
*********************************************************************
*********************** Service functions ***************************
*********************************************************************
*********************************************************************/

void lcd7735_fillScreen(uint16_t color) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af02      	add	r7, sp, #8
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]
	lcd7735_fillRect(0, 0,  _width, _height, color);
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <lcd7735_fillScreen+0x2c>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <lcd7735_fillScreen+0x30>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	b219      	sxth	r1, r3
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	2100      	movs	r1, #0
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff fcb0 	bl	80013b8 <lcd7735_fillRect>
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	2000000c 	.word	0x2000000c
 8001a64:	2000000e 	.word	0x2000000e

08001a68 <lcd7735_setRotation>:
// Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t lcd7735_Color565(uint8_t r, uint8_t g, uint8_t b) {
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

void lcd7735_setRotation(uint8_t m) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation = m % 4; // can't be higher than 3
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	73fb      	strb	r3, [r7, #15]

	lcd7735_sendCmd(ST7735_MADCTL);
 8001a7a:	2036      	movs	r0, #54	; 0x36
 8001a7c:	f000 f870 	bl	8001b60 <lcd7735_sendCmd>
	switch (rotation) {
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d836      	bhi.n	8001af4 <lcd7735_setRotation+0x8c>
 8001a86:	a201      	add	r2, pc, #4	; (adr r2, 8001a8c <lcd7735_setRotation+0x24>)
 8001a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8c:	08001a9d 	.word	0x08001a9d
 8001a90:	08001ab1 	.word	0x08001ab1
 8001a94:	08001ac5 	.word	0x08001ac5
 8001a98:	08001ad9 	.word	0x08001ad9
   case PORTRAIT:
	   lcd7735_sendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 8001a9c:	20c0      	movs	r0, #192	; 0xc0
 8001a9e:	f000 f873 	bl	8001b88 <lcd7735_sendData>
	   _width  = ST7735_TFTWIDTH;
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <lcd7735_setRotation+0x94>)
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	801a      	strh	r2, [r3, #0]
	   _height = ST7735_TFTHEIGHT;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <lcd7735_setRotation+0x98>)
 8001aaa:	22a0      	movs	r2, #160	; 0xa0
 8001aac:	801a      	strh	r2, [r3, #0]
	   break;
 8001aae:	e01d      	b.n	8001aec <lcd7735_setRotation+0x84>
   case LANDSCAPE:
	   lcd7735_sendData(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 8001ab0:	20a0      	movs	r0, #160	; 0xa0
 8001ab2:	f000 f869 	bl	8001b88 <lcd7735_sendData>
	   _width  = ST7735_TFTHEIGHT;
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <lcd7735_setRotation+0x94>)
 8001ab8:	22a0      	movs	r2, #160	; 0xa0
 8001aba:	801a      	strh	r2, [r3, #0]
	   _height = ST7735_TFTWIDTH;
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <lcd7735_setRotation+0x98>)
 8001abe:	2280      	movs	r2, #128	; 0x80
 8001ac0:	801a      	strh	r2, [r3, #0]
	   break;
 8001ac2:	e013      	b.n	8001aec <lcd7735_setRotation+0x84>
   case PORTRAIT_FLIP:
	   lcd7735_sendData(MADCTL_RGB);
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f000 f85f 	bl	8001b88 <lcd7735_sendData>
	   _width  = ST7735_TFTWIDTH;
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <lcd7735_setRotation+0x94>)
 8001acc:	2280      	movs	r2, #128	; 0x80
 8001ace:	801a      	strh	r2, [r3, #0]
	   _height = ST7735_TFTHEIGHT;
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <lcd7735_setRotation+0x98>)
 8001ad2:	22a0      	movs	r2, #160	; 0xa0
 8001ad4:	801a      	strh	r2, [r3, #0]
	   break;
 8001ad6:	e009      	b.n	8001aec <lcd7735_setRotation+0x84>
   case LANDSCAPE_FLIP:
	   lcd7735_sendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 8001ad8:	2060      	movs	r0, #96	; 0x60
 8001ada:	f000 f855 	bl	8001b88 <lcd7735_sendData>
	   _width  = ST7735_TFTHEIGHT;
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <lcd7735_setRotation+0x94>)
 8001ae0:	22a0      	movs	r2, #160	; 0xa0
 8001ae2:	801a      	strh	r2, [r3, #0]
	   _height = ST7735_TFTWIDTH;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <lcd7735_setRotation+0x98>)
 8001ae6:	2280      	movs	r2, #128	; 0x80
 8001ae8:	801a      	strh	r2, [r3, #0]
	   break;
 8001aea:	bf00      	nop
   default:
	   return;
	}
	orientation = m;
 8001aec:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <lcd7735_setRotation+0x9c>)
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	7013      	strb	r3, [r2, #0]
 8001af2:	e000      	b.n	8001af6 <lcd7735_setRotation+0x8e>
	   return;
 8001af4:	bf00      	nop
}
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	2000000c 	.word	0x2000000c
 8001b00:	2000000e 	.word	0x2000000e
 8001b04:	2000021c 	.word	0x2000021c

08001b08 <delay_ms>:
#include <mcalSPI.h>
#include "hw_config.h"

static SPI_TypeDef  *spi  = SPI1;

void delay_ms(uint32_t delay_value) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
    //TimingDelay = delay_value;
	LED_blue_on;		// for Debug only
 8001b10:	210a      	movs	r1, #10
 8001b12:	4807      	ldr	r0, [pc, #28]	; (8001b30 <delay_ms+0x28>)
 8001b14:	f000 feb0 	bl	8002878 <gpioResetPin>
	//systickSetTicktime(&ST7735_Timer, delay_value);
	//while ((isSystickExpired(ST7735_Timer))== 0) { }
	systickDelay(&ST7735_Timer, delay_value);
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4806      	ldr	r0, [pc, #24]	; (8001b34 <delay_ms+0x2c>)
 8001b1c:	f001 ffe0 	bl	8003ae0 <systickDelay>
	LED_blue_off;			//for Debug only
 8001b20:	210a      	movs	r1, #10
 8001b22:	4803      	ldr	r0, [pc, #12]	; (8001b30 <delay_ms+0x28>)
 8001b24:	f000 fe7d 	bl	8002822 <gpioSetPin>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40020400 	.word	0x40020400
 8001b34:	20000238 	.word	0x20000238

08001b38 <lcd7735_senddata>:

// Send byte via SPI to controller
void lcd7735_senddata(const uint8_t data)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(spi, ST7735_CS_PORT, ST7735_CS, data);
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <lcd7735_senddata+0x20>)
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	2206      	movs	r2, #6
 8001b4a:	4904      	ldr	r1, [pc, #16]	; (8001b5c <lcd7735_senddata+0x24>)
 8001b4c:	f001 fe92 	bl	8003874 <spiWriteByte>
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000014 	.word	0x20000014
 8001b5c:	40020400 	.word	0x40020400

08001b60 <lcd7735_sendCmd>:
	spiWriteWord(spi, ST7735_CS_PORT, ST7735_CS, data);
}

// Send control command to controller
void lcd7735_sendCmd(const uint8_t cmd)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
	ST7735_DC0;
 8001b6a:	2107      	movs	r1, #7
 8001b6c:	4805      	ldr	r0, [pc, #20]	; (8001b84 <lcd7735_sendCmd+0x24>)
 8001b6e:	f000 fe83 	bl	8002878 <gpioResetPin>
    lcd7735_senddata(cmd);
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ffdf 	bl	8001b38 <lcd7735_senddata>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40020800 	.word	0x40020800

08001b88 <lcd7735_sendData>:

// Send parameters o command to controller
void lcd7735_sendData(const uint8_t data)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
    ST7735_DC1;
 8001b92:	2107      	movs	r1, #7
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <lcd7735_sendData+0x24>)
 8001b96:	f000 fe44 	bl	8002822 <gpioSetPin>
    lcd7735_senddata(data);
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ffcb 	bl	8001b38 <lcd7735_senddata>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40020800 	.word	0x40020800

08001bb0 <lcd7735_setup>:

// Init hardware
void lcd7735_setup(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af04      	add	r7, sp, #16
    // Configuration LED Pin
    gpioSelectPort(LED_GPIO);
 8001bb6:	4843      	ldr	r0, [pc, #268]	; (8001cc4 <lcd7735_setup+0x114>)
 8001bb8:	f000 fd84 	bl	80026c4 <gpioSelectPort>
    gpioSelectPinMode(LED_GPIO, LED_red, OUTPUT);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	2103      	movs	r1, #3
 8001bc0:	4840      	ldr	r0, [pc, #256]	; (8001cc4 <lcd7735_setup+0x114>)
 8001bc2:	f000 fde3 	bl	800278c <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_red	, PUSHPULL);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2103      	movs	r1, #3
 8001bca:	483e      	ldr	r0, [pc, #248]	; (8001cc4 <lcd7735_setup+0x114>)
 8001bcc:	f000 fee9 	bl	80029a2 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_red, PULLUP);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2103      	movs	r1, #3
 8001bd4:	483b      	ldr	r0, [pc, #236]	; (8001cc4 <lcd7735_setup+0x114>)
 8001bd6:	f000 ff2d 	bl	8002a34 <gpioSelectPushPullMode>
    LED_red_off;
 8001bda:	2103      	movs	r1, #3
 8001bdc:	4839      	ldr	r0, [pc, #228]	; (8001cc4 <lcd7735_setup+0x114>)
 8001bde:	f000 fe20 	bl	8002822 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_green, OUTPUT);
 8001be2:	2201      	movs	r2, #1
 8001be4:	2104      	movs	r1, #4
 8001be6:	4837      	ldr	r0, [pc, #220]	; (8001cc4 <lcd7735_setup+0x114>)
 8001be8:	f000 fdd0 	bl	800278c <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_green, PUSHPULL);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2104      	movs	r1, #4
 8001bf0:	4834      	ldr	r0, [pc, #208]	; (8001cc4 <lcd7735_setup+0x114>)
 8001bf2:	f000 fed6 	bl	80029a2 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_green, PULLUP);
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	4832      	ldr	r0, [pc, #200]	; (8001cc4 <lcd7735_setup+0x114>)
 8001bfc:	f000 ff1a 	bl	8002a34 <gpioSelectPushPullMode>
    LED_green_off;
 8001c00:	2104      	movs	r1, #4
 8001c02:	4830      	ldr	r0, [pc, #192]	; (8001cc4 <lcd7735_setup+0x114>)
 8001c04:	f000 fe0d 	bl	8002822 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_blue, OUTPUT);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	210a      	movs	r1, #10
 8001c0c:	482d      	ldr	r0, [pc, #180]	; (8001cc4 <lcd7735_setup+0x114>)
 8001c0e:	f000 fdbd 	bl	800278c <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_blue, PUSHPULL);
 8001c12:	2200      	movs	r2, #0
 8001c14:	210a      	movs	r1, #10
 8001c16:	482b      	ldr	r0, [pc, #172]	; (8001cc4 <lcd7735_setup+0x114>)
 8001c18:	f000 fec3 	bl	80029a2 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_blue, PULLUP);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	210a      	movs	r1, #10
 8001c20:	4828      	ldr	r0, [pc, #160]	; (8001cc4 <lcd7735_setup+0x114>)
 8001c22:	f000 ff07 	bl	8002a34 <gpioSelectPushPullMode>
    LED_blue_off;
 8001c26:	210a      	movs	r1, #10
 8001c28:	4826      	ldr	r0, [pc, #152]	; (8001cc4 <lcd7735_setup+0x114>)
 8001c2a:	f000 fdfa 	bl	8002822 <gpioSetPin>
    /* Declartion of SPI & IO Pins für ST7735-Port
     *
     *
     */

    gpioSelectPort(ST7735_RST_PORT);
 8001c2e:	4826      	ldr	r0, [pc, #152]	; (8001cc8 <lcd7735_setup+0x118>)
 8001c30:	f000 fd48 	bl	80026c4 <gpioSelectPort>
    gpioSelectPinMode(ST7735_RST_PORT, ST7735_RST, OUTPUT);		// RESET
 8001c34:	2201      	movs	r2, #1
 8001c36:	2109      	movs	r1, #9
 8001c38:	4823      	ldr	r0, [pc, #140]	; (8001cc8 <lcd7735_setup+0x118>)
 8001c3a:	f000 fda7 	bl	800278c <gpioSelectPinMode>
    gpioSelectPort(ST7735_DC_PORT);
 8001c3e:	4823      	ldr	r0, [pc, #140]	; (8001ccc <lcd7735_setup+0x11c>)
 8001c40:	f000 fd40 	bl	80026c4 <gpioSelectPort>
    gpioSelectPinMode(ST7735_DC_PORT, ST7735_DC, OUTPUT);		// DATA/Command
 8001c44:	2201      	movs	r2, #1
 8001c46:	2107      	movs	r1, #7
 8001c48:	4820      	ldr	r0, [pc, #128]	; (8001ccc <lcd7735_setup+0x11c>)
 8001c4a:	f000 fd9f 	bl	800278c <gpioSelectPinMode>

    gpioInitPort(ST7735_CS_PORT);
 8001c4e:	481d      	ldr	r0, [pc, #116]	; (8001cc4 <lcd7735_setup+0x114>)
 8001c50:	f000 fcd6 	bl	8002600 <gpioInitPort>
    gpioSelectPinMode(ST7735_CS_PORT,ST7735_CS, OUTPUT);        // CS
 8001c54:	2201      	movs	r2, #1
 8001c56:	2106      	movs	r1, #6
 8001c58:	481a      	ldr	r0, [pc, #104]	; (8001cc4 <lcd7735_setup+0x114>)
 8001c5a:	f000 fd97 	bl	800278c <gpioSelectPinMode>
    gpioSelectPushPullMode(ST7735_CS_PORT, ST7735_CS, PULLUP);
 8001c5e:	2201      	movs	r2, #1
 8001c60:	2106      	movs	r1, #6
 8001c62:	4818      	ldr	r0, [pc, #96]	; (8001cc4 <lcd7735_setup+0x114>)
 8001c64:	f000 fee6 	bl	8002a34 <gpioSelectPushPullMode>

    gpioInitPort(ST7735_SPI_PORT);
 8001c68:	4817      	ldr	r0, [pc, #92]	; (8001cc8 <lcd7735_setup+0x118>)
 8001c6a:	f000 fcc9 	bl	8002600 <gpioInitPort>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_CLK, ALTFUNC);     // SPI1 Clock
 8001c6e:	2202      	movs	r2, #2
 8001c70:	2105      	movs	r1, #5
 8001c72:	4815      	ldr	r0, [pc, #84]	; (8001cc8 <lcd7735_setup+0x118>)
 8001c74:	f000 fd8a 	bl	800278c <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_CLK, AF5);
 8001c78:	2205      	movs	r2, #5
 8001c7a:	2105      	movs	r1, #5
 8001c7c:	4812      	ldr	r0, [pc, #72]	; (8001cc8 <lcd7735_setup+0x118>)
 8001c7e:	f000 fe27 	bl	80028d0 <gpioSelectAltFunc>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_MOSI, ALTFUNC);    // SPI1 MOSI
 8001c82:	2202      	movs	r2, #2
 8001c84:	2107      	movs	r1, #7
 8001c86:	4810      	ldr	r0, [pc, #64]	; (8001cc8 <lcd7735_setup+0x118>)
 8001c88:	f000 fd80 	bl	800278c <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_MOSI, AF5);
 8001c8c:	2205      	movs	r2, #5
 8001c8e:	2107      	movs	r1, #7
 8001c90:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <lcd7735_setup+0x118>)
 8001c92:	f000 fe1d 	bl	80028d0 <gpioSelectAltFunc>

    // Init SPI1
    spiSelectSPI(spi);
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <lcd7735_setup+0x120>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 fd8e 	bl	80037bc <spiSelectSPI>

    spiInitSPI(spi, CLK_DIV_16, DATA_FORMAT_8, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_1, SPI_IDLE_LOW);
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <lcd7735_setup+0x120>)
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	9303      	str	r3, [sp, #12]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9302      	str	r3, [sp, #8]
 8001cac:	2300      	movs	r3, #0
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2103      	movs	r1, #3
 8001cba:	f001 fc83 	bl	80035c4 <spiInitSPI>

}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40020400 	.word	0x40020400
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	20000014 	.word	0x20000014

08001cd4 <main>:
uint8_t I2C_SCAN(uint8_t scanAddr);



int main(void)
{
 8001cd4:	b5b0      	push	{r4, r5, r7, lr}
 8001cd6:	b09a      	sub	sp, #104	; 0x68
 8001cd8:	af00      	add	r7, sp, #0
/*  I2C Variables  */

	uint8_t        scanAddr = 0x7F;  //7Bit Adresse
 8001cda:	237f      	movs	r3, #127	; 0x7f
 8001cdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	I2C_TypeDef   *i2c  = I2C1;
 8001ce0:	4b8a      	ldr	r3, [pc, #552]	; (8001f0c <main+0x238>)
 8001ce2:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t   I2CTaskTime = 20UL;
 8001ce4:	2314      	movs	r3, #20
 8001ce6:	663b      	str	r3, [r7, #96]	; 0x60

/*  End I2C Variables  */

	//char strOut[] =      ". . . . . . . .\0";
	char strFirmware[] = ". . .          \0";  // dummyString with NULL
 8001ce8:	4b89      	ldr	r3, [pc, #548]	; (8001f10 <main+0x23c>)
 8001cea:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001cee:	461d      	mov	r5, r3
 8001cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf4:	682b      	ldr	r3, [r5, #0]
 8001cf6:	7023      	strb	r3, [r4, #0]
	//int testmode = 1;
   	//unsigned int r = 0;

       // Dies ist das Array, das die Adressen aller Timer-Variablen enthaelt.
       // Auch die Groesse des Arrays wird berechnet.
       uint32_t *timerList[] = { &Timer1, &ST7735_Timer, &I2C_Timer /*, weitere Timer */ };
 8001cf8:	4a86      	ldr	r2, [pc, #536]	; (8001f14 <main+0x240>)
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
       size_t    arraySize = sizeof(timerList)/sizeof(timerList[0]);
 8001d02:	2303      	movs	r3, #3
 8001d04:	65bb      	str	r3, [r7, #88]	; 0x58


    // Initialisiert den Systick-Timer
    systickInit(SYSTICK_1MS);
 8001d06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d0a:	f001 fe67 	bl	80039dc <systickInit>

    systickSetMillis(&Timer1, 100);
 8001d0e:	2164      	movs	r1, #100	; 0x64
 8001d10:	4881      	ldr	r0, [pc, #516]	; (8001f18 <main+0x244>)
 8001d12:	f001 fe55 	bl	80039c0 <systickSetMillis>
    systickSetMillis(&I2C_Timer, I2CTaskTime);
 8001d16:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d18:	4880      	ldr	r0, [pc, #512]	; (8001f1c <main+0x248>)
 8001d1a:	f001 fe51 	bl	80039c0 <systickSetMillis>
    //lcd7735_initR(0);
    lcd7735_setup();
 8001d1e:	f7ff ff47 	bl	8001bb0 <lcd7735_setup>
    LED_red_on;
 8001d22:	2103      	movs	r1, #3
 8001d24:	487e      	ldr	r0, [pc, #504]	; (8001f20 <main+0x24c>)
 8001d26:	f000 fda7 	bl	8002878 <gpioResetPin>
    lcd7735_initR(INITR_REDTAB);
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f7ff faa0 	bl	8001270 <lcd7735_initR>
    lcd7735_setRotation(LANDSCAPE);
 8001d30:	2001      	movs	r0, #1
 8001d32:	f7ff fe99 	bl	8001a68 <lcd7735_setRotation>
    //lcd7735_init_screen((uint8_t *)&SmallFont[0],ST7735_GREEN,ST7735_BLACK,LANDSCAPE); // not OK
    lcd7735_setFont((uint8_t *)&SmallFont[0]);
 8001d36:	487b      	ldr	r0, [pc, #492]	; (8001f24 <main+0x250>)
 8001d38:	f7ff fbc4 	bl	80014c4 <lcd7735_setFont>
    LED_red_off;
 8001d3c:	2103      	movs	r1, #3
 8001d3e:	4878      	ldr	r0, [pc, #480]	; (8001f20 <main+0x24c>)
 8001d40:	f000 fd6f 	bl	8002822 <gpioSetPin>
    lcd7735_fillScreen(ST7735_BLACK);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7ff fe75 	bl	8001a34 <lcd7735_fillScreen>
    //lcd7735_cursor_set(0,0);
    //i2cResetDevice(i2c);
    i2c_activate_pb89(i2c);
 8001d4a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001d4c:	f7ff f8b6 	bl	8000ebc <i2c_activate_pb89>
    i2cSetRiseTime(i2c, 17);
 8001d50:	2111      	movs	r1, #17
 8001d52:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001d54:	f001 f9e4 	bl	8003120 <i2cSetRiseTime>
    lcd7735_print((char *)"I2C Scanner running \0",0,0,0);
 8001d58:	2300      	movs	r3, #0
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4872      	ldr	r0, [pc, #456]	; (8001f28 <main+0x254>)
 8001d60:	f7ff fe06 	bl	8001970 <lcd7735_print>


    while (1)
    {
	   if (true == timerTrigger)
 8001d64:	4b71      	ldr	r3, [pc, #452]	; (8001f2c <main+0x258>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <main+0xa6>
	   {
			systickUpdateTimerList((uint32_t *) timerList, arraySize);
 8001d6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	463b      	mov	r3, r7
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f001 fe89 	bl	8003a8c <systickUpdateTimerList>
	   }

	   if (isSystickExpired(I2C_Timer))
 8001d7a:	4b68      	ldr	r3, [pc, #416]	; (8001f1c <main+0x248>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f001 fe4e 	bl	8003a20 <isSystickExpired>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 816c 	beq.w	8002064 <main+0x390>
	   {
		   systickSetTicktime(&I2C_Timer, I2CTaskTime);
 8001d8c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d8e:	4863      	ldr	r0, [pc, #396]	; (8001f1c <main+0x248>)
 8001d90:	f001 fe38 	bl	8003a04 <systickSetTicktime>
		   LED_green_off;
 8001d94:	2104      	movs	r1, #4
 8001d96:	4862      	ldr	r0, [pc, #392]	; (8001f20 <main+0x24c>)
 8001d98:	f000 fd43 	bl	8002822 <gpioSetPin>


		   switch (testmode)
 8001d9c:	4b64      	ldr	r3, [pc, #400]	; (8001f30 <main+0x25c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	f000 80dd 	beq.w	8001f60 <main+0x28c>
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	f300 8158 	bgt.w	800205c <main+0x388>
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d003      	beq.n	8001db8 <main+0xe4>
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	f000 8089 	beq.w	8001ec8 <main+0x1f4>
 8001db6:	e151      	b.n	800205c <main+0x388>
		   {
		   	   case 1:  //I2C Scan
		   	   {
		   		   LED_green_on;
 8001db8:	2104      	movs	r1, #4
 8001dba:	4859      	ldr	r0, [pc, #356]	; (8001f20 <main+0x24c>)
 8001dbc:	f000 fd5c 	bl	8002878 <gpioResetPin>
		   		   if ( I2C_SCAN(scanAddr) != 0)
 8001dc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 f95b 	bl	8002080 <I2C_SCAN>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d046      	beq.n	8001e5e <main+0x18a>
				   {
					   LED_green_off;
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	4853      	ldr	r0, [pc, #332]	; (8001f20 <main+0x24c>)
 8001dd4:	f000 fd25 	bl	8002822 <gpioSetPin>
					   switch (scanAddr)
 8001dd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ddc:	2b50      	cmp	r3, #80	; 0x50
 8001dde:	d006      	beq.n	8001dee <main+0x11a>
 8001de0:	2b50      	cmp	r3, #80	; 0x50
 8001de2:	dc3d      	bgt.n	8001e60 <main+0x18c>
 8001de4:	2b18      	cmp	r3, #24
 8001de6:	d014      	beq.n	8001e12 <main+0x13e>
 8001de8:	2b29      	cmp	r3, #41	; 0x29
 8001dea:	d00e      	beq.n	8001e0a <main+0x136>
 8001dec:	e038      	b.n	8001e60 <main+0x18c>
					   {
						   case i2cAddr_RFID:
						   {
							   enableRFID = true;
 8001dee:	4b51      	ldr	r3, [pc, #324]	; (8001f34 <main+0x260>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]
							   lcd7735_print((char *)"RFID connected \0",0,28,0);
 8001df4:	2300      	movs	r3, #0
 8001df6:	221c      	movs	r2, #28
 8001df8:	2100      	movs	r1, #0
 8001dfa:	484f      	ldr	r0, [pc, #316]	; (8001f38 <main+0x264>)
 8001dfc:	f7ff fdb8 	bl	8001970 <lcd7735_print>
							   RFID_LED(i2c,true);
 8001e00:	2101      	movs	r1, #1
 8001e02:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001e04:	f7ff f94a 	bl	800109c <RFID_LED>
							   break;
 8001e08:	e02a      	b.n	8001e60 <main+0x18c>
						   }
						   case i2cAddr_LIDAR:
						   {
							   enableLIDAR = true;
 8001e0a:	4b4c      	ldr	r3, [pc, #304]	; (8001f3c <main+0x268>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
							   //lcd7735_print((char *)"TOF/LIADR connected \0",0,28,0);
							   break;
 8001e10:	e026      	b.n	8001e60 <main+0x18c>
						   }
						   case i2cAddr_LIS3DH:
						   {
							   enableLIS3DH = true;
 8001e12:	4b4b      	ldr	r3, [pc, #300]	; (8001f40 <main+0x26c>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
							   lcd7735_print((char *)"LIS3DH connected \0",0,28,0);
 8001e18:	2300      	movs	r3, #0
 8001e1a:	221c      	movs	r2, #28
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4849      	ldr	r0, [pc, #292]	; (8001f44 <main+0x270>)
 8001e20:	f7ff fda6 	bl	8001970 <lcd7735_print>
							   lcd7735_print((char *)"Temp:\0",0,40,0);
 8001e24:	2300      	movs	r3, #0
 8001e26:	2228      	movs	r2, #40	; 0x28
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4847      	ldr	r0, [pc, #284]	; (8001f48 <main+0x274>)
 8001e2c:	f7ff fda0 	bl	8001970 <lcd7735_print>
							   lcd7735_print((char *)"X:\0",0,50,0);
 8001e30:	2300      	movs	r3, #0
 8001e32:	2232      	movs	r2, #50	; 0x32
 8001e34:	2100      	movs	r1, #0
 8001e36:	4845      	ldr	r0, [pc, #276]	; (8001f4c <main+0x278>)
 8001e38:	f7ff fd9a 	bl	8001970 <lcd7735_print>
							   lcd7735_print((char *)"Y:\0",0,60,0);
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	223c      	movs	r2, #60	; 0x3c
 8001e40:	2100      	movs	r1, #0
 8001e42:	4843      	ldr	r0, [pc, #268]	; (8001f50 <main+0x27c>)
 8001e44:	f7ff fd94 	bl	8001970 <lcd7735_print>
							   lcd7735_print((char *)"Z:\0",0,70,0);
 8001e48:	2300      	movs	r3, #0
 8001e4a:	2246      	movs	r2, #70	; 0x46
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4841      	ldr	r0, [pc, #260]	; (8001f54 <main+0x280>)
 8001e50:	f7ff fd8e 	bl	8001970 <lcd7735_print>
							   LED_blue_on;
 8001e54:	210a      	movs	r1, #10
 8001e56:	4832      	ldr	r0, [pc, #200]	; (8001f20 <main+0x24c>)
 8001e58:	f000 fd0e 	bl	8002878 <gpioResetPin>
							   break;
 8001e5c:	e000      	b.n	8001e60 <main+0x18c>
						   }
					   }
				   }
 8001e5e:	bf00      	nop

				   if ((scanAddr == 0) && (enableRFID))
 8001e60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10b      	bne.n	8001e80 <main+0x1ac>
 8001e68:	4b32      	ldr	r3, [pc, #200]	; (8001f34 <main+0x260>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d007      	beq.n	8001e80 <main+0x1ac>
				   {
					   scanAddr = 0x7F;
 8001e70:	237f      	movs	r3, #127	; 0x7f
 8001e72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					   I2CTaskTime = 100UL;
 8001e76:	2364      	movs	r3, #100	; 0x64
 8001e78:	663b      	str	r3, [r7, #96]	; 0x60
					   testmode = 2;
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <main+0x25c>)
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	701a      	strb	r2, [r3, #0]
				   }
				   if ((scanAddr == 0) && (enableLIS3DH))
 8001e80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10e      	bne.n	8001ea6 <main+0x1d2>
 8001e88:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <main+0x26c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00a      	beq.n	8001ea6 <main+0x1d2>
				   {
					   scanAddr = 0x7F;
 8001e90:	237f      	movs	r3, #127	; 0x7f
 8001e92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					   testmode = 3;
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <main+0x25c>)
 8001e98:	2203      	movs	r2, #3
 8001e9a:	701a      	strb	r2, [r3, #0]
					   I2CTaskTime = 200UL;
 8001e9c:	23c8      	movs	r3, #200	; 0xc8
 8001e9e:	663b      	str	r3, [r7, #96]	; 0x60
					   LIS3DH_init(i2c);
 8001ea0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001ea2:	f7ff f875 	bl	8000f90 <LIS3DH_init>
				   }
				   if ((scanAddr == 0))
 8001ea6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <main+0x1e8>
				   {
					   scanAddr = 0x7F;
 8001eae:	237f      	movs	r3, #127	; 0x7f
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				       testmode = 4;
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <main+0x25c>)
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	701a      	strb	r2, [r3, #0]
				   else
				   {
					   scanAddr -=1;
				   }

				   break;
 8001eba:	e0d6      	b.n	800206a <main+0x396>
					   scanAddr -=1;
 8001ebc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				   break;
 8001ec6:	e0d0      	b.n	800206a <main+0x396>
				}
		   	   	case 2:  // read RFID
				{
					// RFID_readCard(i2c, CardID);

					if (RFID_readFWVersion(i2c, strFirmware) >= 0)
 8001ec8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001ed0:	f7ff f902 	bl	80010d8 <RFID_readFWVersion>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f2c0 80c6 	blt.w	8002068 <main+0x394>
					{
						lcd7735_print((char *)"FW: \0",0,48,0);
 8001edc:	2300      	movs	r3, #0
 8001ede:	2230      	movs	r2, #48	; 0x30
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	481d      	ldr	r0, [pc, #116]	; (8001f58 <main+0x284>)
 8001ee4:	f7ff fd44 	bl	8001970 <lcd7735_print>
						lcd7735_print((char *)strFirmware,24,48,0);
 8001ee8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001eec:	2300      	movs	r3, #0
 8001eee:	2230      	movs	r2, #48	; 0x30
 8001ef0:	2118      	movs	r1, #24
 8001ef2:	f7ff fd3d 	bl	8001970 <lcd7735_print>
						testmode = 3;
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <main+0x25c>)
 8001ef8:	2203      	movs	r2, #3
 8001efa:	701a      	strb	r2, [r3, #0]
						lcd7735_print((char *)"ID:\0",0,70,0);
 8001efc:	2300      	movs	r3, #0
 8001efe:	2246      	movs	r2, #70	; 0x46
 8001f00:	2100      	movs	r1, #0
 8001f02:	4816      	ldr	r0, [pc, #88]	; (8001f5c <main+0x288>)
 8001f04:	f7ff fd34 	bl	8001970 <lcd7735_print>
					}
					else
					{
						;
					}
					break;
 8001f08:	e0ae      	b.n	8002068 <main+0x394>
 8001f0a:	bf00      	nop
 8001f0c:	40005400 	.word	0x40005400
 8001f10:	08007b18 	.word	0x08007b18
 8001f14:	08007b2c 	.word	0x08007b2c
 8001f18:	20000234 	.word	0x20000234
 8001f1c:	2000023c 	.word	0x2000023c
 8001f20:	40020400 	.word	0x40020400
 8001f24:	08007b44 	.word	0x08007b44
 8001f28:	08007aa8 	.word	0x08007aa8
 8001f2c:	20000230 	.word	0x20000230
 8001f30:	20000018 	.word	0x20000018
 8001f34:	2000020c 	.word	0x2000020c
 8001f38:	08007ac0 	.word	0x08007ac0
 8001f3c:	2000020e 	.word	0x2000020e
 8001f40:	2000020d 	.word	0x2000020d
 8001f44:	08007ad4 	.word	0x08007ad4
 8001f48:	08007ae8 	.word	0x08007ae8
 8001f4c:	08007af0 	.word	0x08007af0
 8001f50:	08007af4 	.word	0x08007af4
 8001f54:	08007af8 	.word	0x08007af8
 8001f58:	08007afc 	.word	0x08007afc
 8001f5c:	08007b04 	.word	0x08007b04
				}
		   		case 3:  // read LIS3DH Data
		   		{
		   			//lcd7735_print((char *)"ID:\0",0,70,0);
		   			LED_blue_on;
 8001f60:	210a      	movs	r1, #10
 8001f62:	4842      	ldr	r0, [pc, #264]	; (800206c <main+0x398>)
 8001f64:	f000 fc88 	bl	8002878 <gpioResetPin>

		   			Temp = LIS3DH_Temp(i2c);
 8001f68:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f6a:	f7ff f87b 	bl	8001064 <LIS3DH_Temp>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		   			sprintf(strT, "%6i", Temp);
 8001f74:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	493c      	ldr	r1, [pc, #240]	; (8002070 <main+0x39c>)
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f002 fb66 	bl	8004650 <siprintf>
		   			lcd7735_print((char *)strT,40,40,0);
 8001f84:	f107 0014 	add.w	r0, r7, #20
 8001f88:	2300      	movs	r3, #0
 8001f8a:	2228      	movs	r2, #40	; 0x28
 8001f8c:	2128      	movs	r1, #40	; 0x28
 8001f8e:	f7ff fcef 	bl	8001970 <lcd7735_print>

		   			Temp = LIS3DH_XYZ(i2c, XYZ);
 8001f92:	f107 030c 	add.w	r3, r7, #12
 8001f96:	4619      	mov	r1, r3
 8001f98:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f9a:	f7ff f826 	bl	8000fea <LIS3DH_XYZ>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  					X = (float) XYZ[0]/0x3FFF;  //skalierung 1mg/digit at +-2g
 8001fa4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001fa8:	ee07 3a90 	vmov	s15, r3
 8001fac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8002074 <main+0x3a0>
 8001fb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fb8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		   			Y = (float) XYZ[1]/0x3FFF;
 8001fbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fc0:	ee07 3a90 	vmov	s15, r3
 8001fc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc8:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002074 <main+0x3a0>
 8001fcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fd0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		   			Z = (float) XYZ[2]/0x3FFF;
 8001fd4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002074 <main+0x3a0>
 8001fe4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fe8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		   			sprintf(strX, "%+6.3f", X);
 8001fec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001fee:	f7fe fab3 	bl	8000558 <__aeabi_f2d>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001ffa:	491f      	ldr	r1, [pc, #124]	; (8002078 <main+0x3a4>)
 8001ffc:	f002 fb28 	bl	8004650 <siprintf>
		   			lcd7735_print((char *)strX,20,50,0);
 8002000:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002004:	2300      	movs	r3, #0
 8002006:	2232      	movs	r2, #50	; 0x32
 8002008:	2114      	movs	r1, #20
 800200a:	f7ff fcb1 	bl	8001970 <lcd7735_print>
		   			sprintf(strY, "%+6.3f", Y);
 800200e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002010:	f7fe faa2 	bl	8000558 <__aeabi_f2d>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800201c:	4916      	ldr	r1, [pc, #88]	; (8002078 <main+0x3a4>)
 800201e:	f002 fb17 	bl	8004650 <siprintf>
		   			lcd7735_print((char *)strY,20,60,0);
 8002022:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002026:	2300      	movs	r3, #0
 8002028:	223c      	movs	r2, #60	; 0x3c
 800202a:	2114      	movs	r1, #20
 800202c:	f7ff fca0 	bl	8001970 <lcd7735_print>
		   			sprintf(strZ, "%+6.3f", Z);
 8002030:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002032:	f7fe fa91 	bl	8000558 <__aeabi_f2d>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	f107 001c 	add.w	r0, r7, #28
 800203e:	490e      	ldr	r1, [pc, #56]	; (8002078 <main+0x3a4>)
 8002040:	f002 fb06 	bl	8004650 <siprintf>
		   			lcd7735_print((char *)strZ,20,70,0);
 8002044:	f107 001c 	add.w	r0, r7, #28
 8002048:	2300      	movs	r3, #0
 800204a:	2246      	movs	r2, #70	; 0x46
 800204c:	2114      	movs	r1, #20
 800204e:	f7ff fc8f 	bl	8001970 <lcd7735_print>
						//testmode = 2;
		   			LED_blue_off;
 8002052:	210a      	movs	r1, #10
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <main+0x398>)
 8002056:	f000 fbe4 	bl	8002822 <gpioSetPin>


#ifdef GrafikTests
					testmode = 4;
#endif
				    break;
 800205a:	e006      	b.n	800206a <main+0x396>
				break;
				}
#endif
		   	   default:
				{
					testmode = 1;
 800205c:	4b07      	ldr	r3, [pc, #28]	; (800207c <main+0x3a8>)
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
 8002062:	e67f      	b.n	8001d64 <main+0x90>
				}
		   }  //end switch (testmode)
	   } // end if systickexp
 8002064:	bf00      	nop
 8002066:	e67d      	b.n	8001d64 <main+0x90>
					break;
 8002068:	bf00      	nop
	   if (true == timerTrigger)
 800206a:	e67b      	b.n	8001d64 <main+0x90>
 800206c:	40020400 	.word	0x40020400
 8002070:	08007b0c 	.word	0x08007b0c
 8002074:	467ffc00 	.word	0x467ffc00
 8002078:	08007b10 	.word	0x08007b10
 800207c:	20000018 	.word	0x20000018

08002080 <I2C_SCAN>:
    }

#endif

uint8_t I2C_SCAN(uint8_t scanAddr)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
	I2C_TypeDef   *i2c  = I2C1;
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <I2C_SCAN+0x80>)
 800208c:	617b      	str	r3, [r7, #20]
	//uint8_t 	*outString;
	uint8_t 	*outString2 = (uint8_t *) "Addr at: \0";
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <I2C_SCAN+0x84>)
 8002090:	613b      	str	r3, [r7, #16]
	uint8_t     *result;

	uint8_t foundAddr = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	73fb      	strb	r3, [r7, #15]


	// ! Scan on read/odd Adress keep SDA at Low -
	// I2C Interface will stopped
	// use only write/even adresse
	foundAddr = i2cFindSlaveAddr(i2c, scanAddr);
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	4619      	mov	r1, r3
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f001 f863 	bl	8003166 <i2cFindSlaveAddr>
 80020a0:	4603      	mov	r3, r0
 80020a2:	73fb      	strb	r3, [r7, #15]
	if (xPos == 0)
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <I2C_SCAN+0x88>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d108      	bne.n	80020be <I2C_SCAN+0x3e>
	{
		lcd7735_print((char *)outString2,0,14,0);
 80020ac:	2300      	movs	r3, #0
 80020ae:	220e      	movs	r2, #14
 80020b0:	2100      	movs	r1, #0
 80020b2:	6938      	ldr	r0, [r7, #16]
 80020b4:	f7ff fc5c 	bl	8001970 <lcd7735_print>
		xPos = 66;
 80020b8:	4b13      	ldr	r3, [pc, #76]	; (8002108 <I2C_SCAN+0x88>)
 80020ba:	2242      	movs	r2, #66	; 0x42
 80020bc:	601a      	str	r2, [r3, #0]
	}
	result = convDecByteToHex(scanAddr);
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe ff35 	bl	8000f30 <convDecByteToHex>
 80020c6:	60b8      	str	r0, [r7, #8]
	if (foundAddr != 0)
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d012      	beq.n	80020f4 <I2C_SCAN+0x74>
	{
		//outString = outString2;
		lcd7735_print((char *)result,xPos,14,0);
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <I2C_SCAN+0x88>)
 80020d0:	6819      	ldr	r1, [r3, #0]
 80020d2:	2300      	movs	r3, #0
 80020d4:	220e      	movs	r2, #14
 80020d6:	68b8      	ldr	r0, [r7, #8]
 80020d8:	f7ff fc4a 	bl	8001970 <lcd7735_print>
		xPos = (int) 20 + xPos;
 80020dc:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <I2C_SCAN+0x88>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3314      	adds	r3, #20
 80020e2:	4a09      	ldr	r2, [pc, #36]	; (8002108 <I2C_SCAN+0x88>)
 80020e4:	6013      	str	r3, [r2, #0]
		if (xPos > 140)
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <I2C_SCAN+0x88>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b8c      	cmp	r3, #140	; 0x8c
 80020ec:	dd02      	ble.n	80020f4 <I2C_SCAN+0x74>
		{
			xPos = 66;
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <I2C_SCAN+0x88>)
 80020f0:	2242      	movs	r2, #66	; 0x42
 80020f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
	//	lcd7735_print((char *)result,xPos,14,0);
	}
	return foundAddr;
 80020f4:	7bfb      	ldrb	r3, [r7, #15]

}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40005400 	.word	0x40005400
 8002104:	08007b38 	.word	0x08007b38
 8002108:	20000240 	.word	0x20000240

0800210c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
	return 1;
 8002110:	2301      	movs	r3, #1
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <_kill>:

int _kill(int pid, int sig)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002126:	f001 fcff 	bl	8003b28 <__errno>
 800212a:	4603      	mov	r3, r0
 800212c:	2216      	movs	r2, #22
 800212e:	601a      	str	r2, [r3, #0]
	return -1;
 8002130:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <_exit>:

void _exit (int status)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002144:	f04f 31ff 	mov.w	r1, #4294967295
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ffe7 	bl	800211c <_kill>
	while (1) {}		/* Make sure we hang here */
 800214e:	e7fe      	b.n	800214e <_exit+0x12>

08002150 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	e00a      	b.n	8002178 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002162:	f3af 8000 	nop.w
 8002166:	4601      	mov	r1, r0
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	60ba      	str	r2, [r7, #8]
 800216e:	b2ca      	uxtb	r2, r1
 8002170:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	3301      	adds	r3, #1
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	429a      	cmp	r2, r3
 800217e:	dbf0      	blt.n	8002162 <_read+0x12>
	}

return len;
 8002180:	687b      	ldr	r3, [r7, #4]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	e009      	b.n	80021b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	60ba      	str	r2, [r7, #8]
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	3301      	adds	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	dbf1      	blt.n	800219c <_write+0x12>
	}
	return len;
 80021b8:	687b      	ldr	r3, [r7, #4]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <_close>:

int _close(int file)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
	return -1;
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ea:	605a      	str	r2, [r3, #4]
	return 0;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <_isatty>:

int _isatty(int file)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
	return 1;
 8002202:	2301      	movs	r3, #1
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
	return 0;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002234:	4a14      	ldr	r2, [pc, #80]	; (8002288 <_sbrk+0x5c>)
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <_sbrk+0x60>)
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <_sbrk+0x64>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d102      	bne.n	800224e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <_sbrk+0x64>)
 800224a:	4a12      	ldr	r2, [pc, #72]	; (8002294 <_sbrk+0x68>)
 800224c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <_sbrk+0x64>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	429a      	cmp	r2, r3
 800225a:	d207      	bcs.n	800226c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800225c:	f001 fc64 	bl	8003b28 <__errno>
 8002260:	4603      	mov	r3, r0
 8002262:	220c      	movs	r2, #12
 8002264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	e009      	b.n	8002280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <_sbrk+0x64>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <_sbrk+0x64>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	4a05      	ldr	r2, [pc, #20]	; (8002290 <_sbrk+0x64>)
 800227c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800227e:	68fb      	ldr	r3, [r7, #12]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20018000 	.word	0x20018000
 800228c:	00000400 	.word	0x00000400
 8002290:	20000244 	.word	0x20000244
 8002294:	20000260 	.word	0x20000260

08002298 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <SystemInit+0x28>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a2:	4a07      	ldr	r2, [pc, #28]	; (80022c0 <SystemInit+0x28>)
 80022a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <SystemInit+0x28>)
 80022ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022b2:	609a      	str	r2, [r3, #8]
#endif
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	2302      	movs	r3, #2
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	2302      	movs	r3, #2
 80022dc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80022de:	4b34      	ldr	r3, [pc, #208]	; (80023b0 <SystemCoreClockUpdate+0xec>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d011      	beq.n	8002312 <SystemCoreClockUpdate+0x4e>
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d844      	bhi.n	800237e <SystemCoreClockUpdate+0xba>
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <SystemCoreClockUpdate+0x3e>
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d004      	beq.n	800230a <SystemCoreClockUpdate+0x46>
 8002300:	e03d      	b.n	800237e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002302:	4b2c      	ldr	r3, [pc, #176]	; (80023b4 <SystemCoreClockUpdate+0xf0>)
 8002304:	4a2c      	ldr	r2, [pc, #176]	; (80023b8 <SystemCoreClockUpdate+0xf4>)
 8002306:	601a      	str	r2, [r3, #0]
      break;
 8002308:	e03d      	b.n	8002386 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800230a:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <SystemCoreClockUpdate+0xf0>)
 800230c:	4a2b      	ldr	r2, [pc, #172]	; (80023bc <SystemCoreClockUpdate+0xf8>)
 800230e:	601a      	str	r2, [r3, #0]
      break;
 8002310:	e039      	b.n	8002386 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002312:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <SystemCoreClockUpdate+0xec>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	0d9b      	lsrs	r3, r3, #22
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800231e:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <SystemCoreClockUpdate+0xec>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002326:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00c      	beq.n	8002348 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800232e:	4a23      	ldr	r2, [pc, #140]	; (80023bc <SystemCoreClockUpdate+0xf8>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	fbb2 f3f3 	udiv	r3, r2, r3
 8002336:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <SystemCoreClockUpdate+0xec>)
 8002338:	6852      	ldr	r2, [r2, #4]
 800233a:	0992      	lsrs	r2, r2, #6
 800233c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002340:	fb02 f303 	mul.w	r3, r2, r3
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	e00b      	b.n	8002360 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002348:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <SystemCoreClockUpdate+0xf4>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	4a17      	ldr	r2, [pc, #92]	; (80023b0 <SystemCoreClockUpdate+0xec>)
 8002352:	6852      	ldr	r2, [r2, #4]
 8002354:	0992      	lsrs	r2, r2, #6
 8002356:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800235a:	fb02 f303 	mul.w	r3, r2, r3
 800235e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002360:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <SystemCoreClockUpdate+0xec>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	0c1b      	lsrs	r3, r3, #16
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	3301      	adds	r3, #1
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	fbb2 f3f3 	udiv	r3, r2, r3
 8002378:	4a0e      	ldr	r2, [pc, #56]	; (80023b4 <SystemCoreClockUpdate+0xf0>)
 800237a:	6013      	str	r3, [r2, #0]
      break;
 800237c:	e003      	b.n	8002386 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800237e:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <SystemCoreClockUpdate+0xf0>)
 8002380:	4a0d      	ldr	r2, [pc, #52]	; (80023b8 <SystemCoreClockUpdate+0xf4>)
 8002382:	601a      	str	r2, [r3, #0]
      break;
 8002384:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <SystemCoreClockUpdate+0xec>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	091b      	lsrs	r3, r3, #4
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	4a0b      	ldr	r2, [pc, #44]	; (80023c0 <SystemCoreClockUpdate+0xfc>)
 8002392:	5cd3      	ldrb	r3, [r2, r3]
 8002394:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <SystemCoreClockUpdate+0xf0>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
 80023a0:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <SystemCoreClockUpdate+0xf0>)
 80023a2:	6013      	str	r3, [r2, #0]
}
 80023a4:	bf00      	nop
 80023a6:	371c      	adds	r7, #28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40023800 	.word	0x40023800
 80023b4:	2000001c 	.word	0x2000001c
 80023b8:	00f42400 	.word	0x00f42400
 80023bc:	007a1200 	.word	0x007a1200
 80023c0:	08008044 	.word	0x08008044

080023c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023c4:	480d      	ldr	r0, [pc, #52]	; (80023fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023c8:	f7ff ff66 	bl	8002298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023cc:	480c      	ldr	r0, [pc, #48]	; (8002400 <LoopForever+0x6>)
  ldr r1, =_edata
 80023ce:	490d      	ldr	r1, [pc, #52]	; (8002404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023d0:	4a0d      	ldr	r2, [pc, #52]	; (8002408 <LoopForever+0xe>)
  movs r3, #0
 80023d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d4:	e002      	b.n	80023dc <LoopCopyDataInit>

080023d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023da:	3304      	adds	r3, #4

080023dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e0:	d3f9      	bcc.n	80023d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <LoopForever+0x12>)
  ldr r4, =_ebss
 80023e4:	4c0a      	ldr	r4, [pc, #40]	; (8002410 <LoopForever+0x16>)
  movs r3, #0
 80023e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e8:	e001      	b.n	80023ee <LoopFillZerobss>

080023ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023ec:	3204      	adds	r2, #4

080023ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f0:	d3fb      	bcc.n	80023ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80023f2:	f001 fb9f 	bl	8003b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023f6:	f7ff fc6d 	bl	8001cd4 <main>

080023fa <LoopForever>:

LoopForever:
  b LoopForever
 80023fa:	e7fe      	b.n	80023fa <LoopForever>
  ldr   r0, =_estack
 80023fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002404:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002408:	08008628 	.word	0x08008628
  ldr r2, =_sbss
 800240c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002410:	2000025c 	.word	0x2000025c

08002414 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002414:	e7fe      	b.n	8002414 <ADC_IRQHandler>
	...

08002418 <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a10      	ldr	r2, [pc, #64]	; (8002464 <gpioVerifyPort+0x4c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d013      	beq.n	8002450 <gpioVerifyPort+0x38>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a0f      	ldr	r2, [pc, #60]	; (8002468 <gpioVerifyPort+0x50>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d00f      	beq.n	8002450 <gpioVerifyPort+0x38>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a0e      	ldr	r2, [pc, #56]	; (800246c <gpioVerifyPort+0x54>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d00b      	beq.n	8002450 <gpioVerifyPort+0x38>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <gpioVerifyPort+0x58>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d007      	beq.n	8002450 <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a0c      	ldr	r2, [pc, #48]	; (8002474 <gpioVerifyPort+0x5c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d003      	beq.n	8002450 <gpioVerifyPort+0x38>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <gpioVerifyPort+0x60>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d101      	bne.n	8002454 <gpioVerifyPort+0x3c>
    {
        return true;
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <gpioVerifyPort+0x3e>
    }
    return false;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40020000 	.word	0x40020000
 8002468:	40020400 	.word	0x40020400
 800246c:	40020800 	.word	0x40020800
 8002470:	40020c00 	.word	0x40020c00
 8002474:	40021000 	.word	0x40021000
 8002478:	40021c00 	.word	0x40021c00

0800247c <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d02c      	beq.n	80024e6 <gpioVerifyPin+0x6a>
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d029      	beq.n	80024e6 <gpioVerifyPin+0x6a>
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d026      	beq.n	80024e6 <gpioVerifyPin+0x6a>
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d023      	beq.n	80024e6 <gpioVerifyPin+0x6a>
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d020      	beq.n	80024e6 <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	2b05      	cmp	r3, #5
 80024a8:	d01d      	beq.n	80024e6 <gpioVerifyPin+0x6a>
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	2b06      	cmp	r3, #6
 80024ae:	d01a      	beq.n	80024e6 <gpioVerifyPin+0x6a>
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	2b07      	cmp	r3, #7
 80024b4:	d017      	beq.n	80024e6 <gpioVerifyPin+0x6a>
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d014      	beq.n	80024e6 <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	2b09      	cmp	r3, #9
 80024c0:	d011      	beq.n	80024e6 <gpioVerifyPin+0x6a>
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	2b0a      	cmp	r3, #10
 80024c6:	d00e      	beq.n	80024e6 <gpioVerifyPin+0x6a>
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	2b0b      	cmp	r3, #11
 80024cc:	d00b      	beq.n	80024e6 <gpioVerifyPin+0x6a>
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	d008      	beq.n	80024e6 <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	2b0d      	cmp	r3, #13
 80024d8:	d005      	beq.n	80024e6 <gpioVerifyPin+0x6a>
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	2b0e      	cmp	r3, #14
 80024de:	d002      	beq.n	80024e6 <gpioVerifyPin+0x6a>
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	d101      	bne.n	80024ea <gpioVerifyPin+0x6e>
    {
        return true;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <gpioVerifyPin+0x70>
    }
    return false;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d02c      	beq.n	8002562 <gpioVerifyAltFunc+0x6a>
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d029      	beq.n	8002562 <gpioVerifyAltFunc+0x6a>
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d026      	beq.n	8002562 <gpioVerifyAltFunc+0x6a>
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d023      	beq.n	8002562 <gpioVerifyAltFunc+0x6a>
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	2b04      	cmp	r3, #4
 800251e:	d020      	beq.n	8002562 <gpioVerifyAltFunc+0x6a>
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	2b05      	cmp	r3, #5
 8002524:	d01d      	beq.n	8002562 <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	2b06      	cmp	r3, #6
 800252a:	d01a      	beq.n	8002562 <gpioVerifyAltFunc+0x6a>
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	2b07      	cmp	r3, #7
 8002530:	d017      	beq.n	8002562 <gpioVerifyAltFunc+0x6a>
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	2b08      	cmp	r3, #8
 8002536:	d014      	beq.n	8002562 <gpioVerifyAltFunc+0x6a>
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	2b09      	cmp	r3, #9
 800253c:	d011      	beq.n	8002562 <gpioVerifyAltFunc+0x6a>
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	2b0a      	cmp	r3, #10
 8002542:	d00e      	beq.n	8002562 <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	2b0b      	cmp	r3, #11
 8002548:	d00b      	beq.n	8002562 <gpioVerifyAltFunc+0x6a>
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	2b0c      	cmp	r3, #12
 800254e:	d008      	beq.n	8002562 <gpioVerifyAltFunc+0x6a>
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	2b0d      	cmp	r3, #13
 8002554:	d005      	beq.n	8002562 <gpioVerifyAltFunc+0x6a>
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	2b0e      	cmp	r3, #14
 800255a:	d002      	beq.n	8002562 <gpioVerifyAltFunc+0x6a>
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	2b0f      	cmp	r3, #15
 8002560:	d101      	bne.n	8002566 <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <gpioVerifyAltFunc+0x70>
    }

    return false;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <gpioVerifyPinMode+0x22>
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d005      	beq.n	8002596 <gpioVerifyPinMode+0x22>
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d002      	beq.n	8002596 <gpioVerifyPinMode+0x22>
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	2b03      	cmp	r3, #3
 8002594:	d101      	bne.n	800259a <gpioVerifyPinMode+0x26>
    {
        return true;
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <gpioVerifyPinMode+0x28>
    }

    return false;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <gpioVerifyOutputType+0x16>
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <gpioVerifyOutputType+0x1a>
    {
        return true;
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <gpioVerifyOutputType+0x1c>
    }

    return false;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <gpioVerifyPushPullMode+0x1c>
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d002      	beq.n	80025ec <gpioVerifyPushPullMode+0x1c>
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d101      	bne.n	80025f0 <gpioVerifyPushPullMode+0x20>
    {
        return true;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <gpioVerifyPushPullMode+0x22>
    }
    return false;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff ff05 	bl	8002418 <gpioVerifyPort>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d042      	beq.n	800269a <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a24      	ldr	r2, [pc, #144]	; (80026a8 <gpioInitPort+0xa8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d106      	bne.n	800262a <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800261c:	4b23      	ldr	r3, [pc, #140]	; (80026ac <gpioInitPort+0xac>)
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	4a22      	ldr	r2, [pc, #136]	; (80026ac <gpioInitPort+0xac>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6313      	str	r3, [r2, #48]	; 0x30
 8002628:	e035      	b.n	8002696 <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a20      	ldr	r2, [pc, #128]	; (80026b0 <gpioInitPort+0xb0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d106      	bne.n	8002640 <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8002632:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <gpioInitPort+0xac>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a1d      	ldr	r2, [pc, #116]	; (80026ac <gpioInitPort+0xac>)
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	e02a      	b.n	8002696 <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a1c      	ldr	r2, [pc, #112]	; (80026b4 <gpioInitPort+0xb4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d106      	bne.n	8002656 <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8002648:	4b18      	ldr	r3, [pc, #96]	; (80026ac <gpioInitPort+0xac>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	4a17      	ldr	r2, [pc, #92]	; (80026ac <gpioInitPort+0xac>)
 800264e:	f043 0304 	orr.w	r3, r3, #4
 8002652:	6313      	str	r3, [r2, #48]	; 0x30
 8002654:	e01f      	b.n	8002696 <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a17      	ldr	r2, [pc, #92]	; (80026b8 <gpioInitPort+0xb8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d106      	bne.n	800266c <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800265e:	4b13      	ldr	r3, [pc, #76]	; (80026ac <gpioInitPort+0xac>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4a12      	ldr	r2, [pc, #72]	; (80026ac <gpioInitPort+0xac>)
 8002664:	f043 0308 	orr.w	r3, r3, #8
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
 800266a:	e014      	b.n	8002696 <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a13      	ldr	r2, [pc, #76]	; (80026bc <gpioInitPort+0xbc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d106      	bne.n	8002682 <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8002674:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <gpioInitPort+0xac>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	4a0c      	ldr	r2, [pc, #48]	; (80026ac <gpioInitPort+0xac>)
 800267a:	f043 0310 	orr.w	r3, r3, #16
 800267e:	6313      	str	r3, [r2, #48]	; 0x30
 8002680:	e009      	b.n	8002696 <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a0e      	ldr	r2, [pc, #56]	; (80026c0 <gpioInitPort+0xc0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d105      	bne.n	8002696 <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 800268a:	4b08      	ldr	r3, [pc, #32]	; (80026ac <gpioInitPort+0xac>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a07      	ldr	r2, [pc, #28]	; (80026ac <gpioInitPort+0xac>)
 8002690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	e001      	b.n	800269e <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 800269a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40020400 	.word	0x40020400
 80026b4:	40020800 	.word	0x40020800
 80026b8:	40020c00 	.word	0x40020c00
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40021c00 	.word	0x40021c00

080026c4 <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff fea3 	bl	8002418 <gpioVerifyPort>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f083 0301 	eor.w	r3, r3, #1
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	e041      	b.n	8002768 <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a22      	ldr	r2, [pc, #136]	; (8002770 <gpioSelectPort+0xac>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d106      	bne.n	80026fa <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80026ec:	4b21      	ldr	r3, [pc, #132]	; (8002774 <gpioSelectPort+0xb0>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	4a20      	ldr	r2, [pc, #128]	; (8002774 <gpioSelectPort+0xb0>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6313      	str	r3, [r2, #48]	; 0x30
 80026f8:	e035      	b.n	8002766 <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a1e      	ldr	r2, [pc, #120]	; (8002778 <gpioSelectPort+0xb4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d106      	bne.n	8002710 <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <gpioSelectPort+0xb0>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a1b      	ldr	r2, [pc, #108]	; (8002774 <gpioSelectPort+0xb0>)
 8002708:	f043 0302 	orr.w	r3, r3, #2
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	e02a      	b.n	8002766 <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a1a      	ldr	r2, [pc, #104]	; (800277c <gpioSelectPort+0xb8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d106      	bne.n	8002726 <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8002718:	4b16      	ldr	r3, [pc, #88]	; (8002774 <gpioSelectPort+0xb0>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	4a15      	ldr	r2, [pc, #84]	; (8002774 <gpioSelectPort+0xb0>)
 800271e:	f043 0304 	orr.w	r3, r3, #4
 8002722:	6313      	str	r3, [r2, #48]	; 0x30
 8002724:	e01f      	b.n	8002766 <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a15      	ldr	r2, [pc, #84]	; (8002780 <gpioSelectPort+0xbc>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d106      	bne.n	800273c <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800272e:	4b11      	ldr	r3, [pc, #68]	; (8002774 <gpioSelectPort+0xb0>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4a10      	ldr	r2, [pc, #64]	; (8002774 <gpioSelectPort+0xb0>)
 8002734:	f043 0308 	orr.w	r3, r3, #8
 8002738:	6313      	str	r3, [r2, #48]	; 0x30
 800273a:	e014      	b.n	8002766 <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a11      	ldr	r2, [pc, #68]	; (8002784 <gpioSelectPort+0xc0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d106      	bne.n	8002752 <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <gpioSelectPort+0xb0>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <gpioSelectPort+0xb0>)
 800274a:	f043 0310 	orr.w	r3, r3, #16
 800274e:	6313      	str	r3, [r2, #48]	; 0x30
 8002750:	e009      	b.n	8002766 <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a0c      	ldr	r2, [pc, #48]	; (8002788 <gpioSelectPort+0xc4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d105      	bne.n	8002766 <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <gpioSelectPort+0xb0>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a05      	ldr	r2, [pc, #20]	; (8002774 <gpioSelectPort+0xb0>)
 8002760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40020000 	.word	0x40020000
 8002774:	40023800 	.word	0x40023800
 8002778:	40020400 	.word	0x40020400
 800277c:	40020800 	.word	0x40020800
 8002780:	40020c00 	.word	0x40020c00
 8002784:	40021000 	.word	0x40021000
 8002788:	40021c00 	.word	0x40021c00

0800278c <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	70fb      	strb	r3, [r7, #3]
 8002798:	4613      	mov	r3, r2
 800279a:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff fe3b 	bl	8002418 <gpioVerifyPort>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f083 0301 	eor.w	r3, r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	e032      	b.n	800281a <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fe60 	bl	800247c <gpioVerifyPin>
 80027bc:	4603      	mov	r3, r0
 80027be:	f083 0301 	eor.w	r3, r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 80027c8:	f06f 0301 	mvn.w	r3, #1
 80027cc:	e025      	b.n	800281a <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 80027ce:	78bb      	ldrb	r3, [r7, #2]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fecf 	bl	8002574 <gpioVerifyPinMode>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f083 0301 	eor.w	r3, r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 80027e2:	f06f 0305 	mvn.w	r3, #5
 80027e6:	e018      	b.n	800281a <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	78fa      	ldrb	r2, [r7, #3]
 80027ee:	0052      	lsls	r2, r2, #1
 80027f0:	2103      	movs	r1, #3
 80027f2:	fa01 f202 	lsl.w	r2, r1, r2
 80027f6:	43d2      	mvns	r2, r2
 80027f8:	401a      	ands	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 80027fe:	78bb      	ldrb	r3, [r7, #2]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d009      	beq.n	8002818 <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	78b9      	ldrb	r1, [r7, #2]
 800280a:	78fa      	ldrb	r2, [r7, #3]
 800280c:	0052      	lsls	r2, r2, #1
 800280e:	fa01 f202 	lsl.w	r2, r1, r2
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	460b      	mov	r3, r1
 800282c:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff fdf2 	bl	8002418 <gpioVerifyPort>
 8002834:	4603      	mov	r3, r0
 8002836:	f083 0301 	eor.w	r3, r3, #1
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8002840:	f04f 33ff 	mov.w	r3, #4294967295
 8002844:	e014      	b.n	8002870 <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fe17 	bl	800247c <gpioVerifyPin>
 800284e:	4603      	mov	r3, r0
 8002850:	f083 0301 	eor.w	r3, r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 800285a:	f06f 0301 	mvn.w	r3, #1
 800285e:	e007      	b.n	8002870 <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	2201      	movs	r2, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	461a      	mov	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff fdc7 	bl	8002418 <gpioVerifyPort>
 800288a:	4603      	mov	r3, r0
 800288c:	f083 0301 	eor.w	r3, r3, #1
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
 800289a:	e015      	b.n	80028c8 <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fdec 	bl	800247c <gpioVerifyPin>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f083 0301 	eor.w	r3, r3, #1
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 80028b0:	f06f 0301 	mvn.w	r3, #1
 80028b4:	e008      	b.n	80028c8 <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	3310      	adds	r3, #16
 80028ba:	2201      	movs	r2, #1
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	70fb      	strb	r3, [r7, #3]
 80028dc:	4613      	mov	r3, r2
 80028de:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff fd99 	bl	8002418 <gpioVerifyPort>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f083 0301 	eor.w	r3, r3, #1
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
 80028f6:	e050      	b.n	800299a <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fdbe 	bl	800247c <gpioVerifyPin>
 8002900:	4603      	mov	r3, r0
 8002902:	f083 0301 	eor.w	r3, r3, #1
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 800290c:	f06f 0301 	mvn.w	r3, #1
 8002910:	e043      	b.n	800299a <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 8002912:	78bb      	ldrb	r3, [r7, #2]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fdef 	bl	80024f8 <gpioVerifyAltFunc>
 800291a:	4603      	mov	r3, r0
 800291c:	f083 0301 	eor.w	r3, r3, #1
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 8002926:	f06f 0302 	mvn.w	r3, #2
 800292a:	e036      	b.n	800299a <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	2202      	movs	r2, #2
 8002930:	4619      	mov	r1, r3
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ff2a 	bl	800278c <gpioSelectPinMode>

	if (pin <= PIN7)
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	2b07      	cmp	r3, #7
 800293c:	d815      	bhi.n	800296a <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	0092      	lsls	r2, r2, #2
 8002946:	210f      	movs	r1, #15
 8002948:	fa01 f202 	lsl.w	r2, r1, r2
 800294c:	43d2      	mvns	r2, r2
 800294e:	401a      	ands	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	78b9      	ldrb	r1, [r7, #2]
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	0092      	lsls	r2, r2, #2
 800295e:	fa01 f202 	lsl.w	r2, r1, r2
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	621a      	str	r2, [r3, #32]
 8002968:	e016      	b.n	8002998 <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	3a08      	subs	r2, #8
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	210f      	movs	r1, #15
 8002976:	fa01 f202 	lsl.w	r2, r1, r2
 800297a:	43d2      	mvns	r2, r2
 800297c:	401a      	ands	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	78b9      	ldrb	r1, [r7, #2]
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	3a08      	subs	r2, #8
 800298c:	0092      	lsls	r2, r2, #2
 800298e:	fa01 f202 	lsl.w	r2, r1, r2
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	460b      	mov	r3, r1
 80029ac:	70fb      	strb	r3, [r7, #3]
 80029ae:	4613      	mov	r3, r2
 80029b0:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff fd30 	bl	8002418 <gpioVerifyPort>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f083 0301 	eor.w	r3, r3, #1
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 80029c4:	f04f 33ff 	mov.w	r3, #4294967295
 80029c8:	e030      	b.n	8002a2c <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fd55 	bl	800247c <gpioVerifyPin>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f083 0301 	eor.w	r3, r3, #1
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 80029de:	f06f 0301 	mvn.w	r3, #1
 80029e2:	e023      	b.n	8002a2c <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 80029e4:	78bb      	ldrb	r3, [r7, #2]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fdde 	bl	80025a8 <gpioVerifyOutputType>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f083 0301 	eor.w	r3, r3, #1
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 80029f8:	f06f 0303 	mvn.w	r3, #3
 80029fc:	e016      	b.n	8002a2c <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	2101      	movs	r1, #1
 8002a06:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0a:	43d2      	mvns	r2, r2
 8002a0c:	401a      	ands	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 8002a12:	78bb      	ldrb	r3, [r7, #2]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d108      	bne.n	8002a2a <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	2101      	movs	r1, #1
 8002a20:	fa01 f202 	lsl.w	r2, r1, r2
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	70fb      	strb	r3, [r7, #3]
 8002a40:	4613      	mov	r3, r2
 8002a42:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff fce7 	bl	8002418 <gpioVerifyPort>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f083 0301 	eor.w	r3, r3, #1
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	e044      	b.n	8002ae6 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fd0c 	bl	800247c <gpioVerifyPin>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f083 0301 	eor.w	r3, r3, #1
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8002a70:	f06f 0301 	mvn.w	r3, #1
 8002a74:	e037      	b.n	8002ae6 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 8002a76:	78bb      	ldrb	r3, [r7, #2]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fda9 	bl	80025d0 <gpioVerifyPushPullMode>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f083 0301 	eor.w	r3, r3, #1
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 8002a8a:	f06f 0306 	mvn.w	r3, #6
 8002a8e:	e02a      	b.n	8002ae6 <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	0052      	lsls	r2, r2, #1
 8002a98:	2103      	movs	r1, #3
 8002a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9e:	43d2      	mvns	r2, r2
 8002aa0:	401a      	ands	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d11a      	bne.n	8002ae4 <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 8002aae:	78bb      	ldrb	r3, [r7, #2]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d10a      	bne.n	8002aca <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	0052      	lsls	r2, r2, #1
 8002abc:	2101      	movs	r1, #1
 8002abe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	60da      	str	r2, [r3, #12]
 8002ac8:	e00c      	b.n	8002ae4 <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 8002aca:	78bb      	ldrb	r3, [r7, #2]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d109      	bne.n	8002ae4 <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	0052      	lsls	r2, r2, #1
 8002ad8:	2102      	movs	r1, #2
 8002ada:	fa01 f202 	lsl.w	r2, r1, r2
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <__i2c_start>:
#define I2C_RESET_POS(i2c)                  ( { i2c->CR1 &= ~I2C_CR1_POS_Msk; } )



static inline void __i2c_start(I2C_TypeDef *i2c)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_START;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	601a      	str	r2, [r3, #0]
	while (!(i2c->SR1 & I2C_SR1_SB));
 8002b02:	bf00      	nop
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f9      	beq.n	8002b04 <__i2c_start+0x16>
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <__i2c_stop>:

static inline void __i2c_stop(I2C_TypeDef *i2c)
 {
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 	i2c->CR1 |= I2C_CR1_STOP;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	601a      	str	r2, [r3, #0]
 	while (!(i2c->SR2 & I2C_SR2_BUSY));
 8002b32:	bf00      	nop
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f9      	beq.n	8002b34 <__i2c_stop+0x16>
 }
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <__i2c_dummy_read_SR1_SR2>:

static inline void __i2c_dummy_read_SR1_SR2(I2C_TypeDef *i2c)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
	while (!(i2c->SR1) | !(i2c->SR2))
 8002b56:	bf00      	nop
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bf0c      	ite	eq
 8002b6e:	2301      	moveq	r3, #1
 8002b70:	2300      	movne	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4313      	orrs	r3, r2
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1ed      	bne.n	8002b58 <__i2c_dummy_read_SR1_SR2+0xa>
	{
	;
	}
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <__i2c_Chk_TX_empty>:


static inline void __i2c_Chk_TX_empty(I2C_TypeDef *i2c)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b085      	sub	sp, #20
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]

	uint32_t simpleDelay;
	while(!(i2c->SR1 & I2C_SR1_TXE));
 8002b92:	bf00      	nop
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f9      	beq.n	8002b94 <__i2c_Chk_TX_empty+0xa>
	for (simpleDelay = 0UL; simpleDelay < 20UL; simpleDelay++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	e002      	b.n	8002bac <__i2c_Chk_TX_empty+0x22>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b13      	cmp	r3, #19
 8002bb0:	d9f9      	bls.n	8002ba6 <__i2c_Chk_TX_empty+0x1c>
	{
		;
	}

}
 8002bb2:	bf00      	nop
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <i2cVerifyDutyCycle>:

/**
 * Function to verify the I2C duty cycle.
 */
static bool i2cVerifyDutyCycle(I2C_DUTY_CYCLE_t dc)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
    if ((I2C_DUTY_CYCLE_2 == dc) || (IC2_DUTY_CYCLE_16_9 == dc))
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <i2cVerifyDutyCycle+0x16>
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <i2cVerifyDutyCycle+0x1a>
    {
        return true;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <i2cVerifyDutyCycle+0x1c>
    }
    return false;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <i2cVerifyClkSpd>:

/**
 * Function to verify the I2C clock frequency.
 */
static bool i2cVerifyClkSpd(I2C_CLOCKSPEED_t spd)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
    if ((I2C_CLOCK_100 == spd) || (I2C_CLOCK_200 == spd)|| (I2C_CLOCK_400 == spd))
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <i2cVerifyClkSpd+0x1c>
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d002      	beq.n	8002c04 <i2cVerifyClkSpd+0x1c>
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d101      	bne.n	8002c08 <i2cVerifyClkSpd+0x20>
    {
        return true;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <i2cVerifyClkSpd+0x22>
    }
    return false;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <i2cInitI2C>:
 *          <td rowspan="1">23...21</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cInitI2C(I2C_TypeDef *i2c, I2C_DUTY_CYCLE_t duty, uint8_t trise, I2C_CLOCKSPEED_t clock)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	4608      	mov	r0, r1
 8002c22:	4611      	mov	r1, r2
 8002c24:	461a      	mov	r2, r3
 8002c26:	4603      	mov	r3, r0
 8002c28:	70fb      	strb	r3, [r7, #3]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	70bb      	strb	r3, [r7, #2]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	707b      	strb	r3, [r7, #1]
	uint32_t pclock;
	if (i2cVerifyDutyCycle(duty) != true)
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ffc3 	bl	8002bc0 <i2cVerifyDutyCycle>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f083 0301 	eor.w	r3, r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <i2cInitI2C+0x34>
    {
        return I2C_INVALID_DUTY_CYCLE;
 8002c46:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 8002c4a:	e078      	b.n	8002d3e <i2cInitI2C+0x126>
    }
    if (i2cVerifyClkSpd(clock) != true)
 8002c4c:	787b      	ldrb	r3, [r7, #1]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff ffca 	bl	8002be8 <i2cVerifyClkSpd>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f083 0301 	eor.w	r3, r3, #1
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <i2cInitI2C+0x4e>
    {
        return I2C_INVALID_CLOCK_SPEED;
 8002c60:	f06f 033d 	mvn.w	r3, #61	; 0x3d
 8002c64:	e06b      	b.n	8002d3e <i2cInitI2C+0x126>
    }
    i2c->CR1 = I2C_CR1_SWRST;			// reset and clear reg
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c6c:	601a      	str	r2, [r3, #0]
    i2c->CR1 = 0x0000;                  // Reset old CR1 settings
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
    i2c->CR1 &= ~I2C_CR1_PE_Msk;        // Disable I2C component
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f023 0201 	bic.w	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	601a      	str	r2, [r3, #0]

    pclock = rccGetPclk1Freq();
 8002c80:	f000 fbce 	bl	8003420 <rccGetPclk1Freq>
 8002c84:	60f8      	str	r0, [r7, #12]
    i2c->CR2 = pclock / 1000000;		//
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4a2f      	ldr	r2, [pc, #188]	; (8002d48 <i2cInitI2C+0x130>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	0c9a      	lsrs	r2, r3, #18
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	605a      	str	r2, [r3, #4]
    //i2c->CR2 = pclk / 1000000;          // Attention: Needs to be tested with other pclk values
    i2c->CCR = 0x00;                    // Reset Clock Control Register
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	61da      	str	r2, [r3, #28]
    switch (clock)
 8002c9a:	787b      	ldrb	r3, [r7, #1]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d020      	beq.n	8002ce2 <i2cInitI2C+0xca>
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	dc2b      	bgt.n	8002cfc <i2cInitI2C+0xe4>
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <i2cInitI2C+0x96>
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d00d      	beq.n	8002cc8 <i2cInitI2C+0xb0>
 8002cac:	e026      	b.n	8002cfc <i2cInitI2C+0xe4>
    {
		case I2C_CLOCK_100:
		{
			i2c->CCR &= ~I2C_CCR_FS_Msk;    // Select 100 kHz bus clock
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	61da      	str	r2, [r3, #28]
			i2c->CCR |= 0x0050;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	61da      	str	r2, [r3, #28]
			break;
 8002cc6:	e026      	b.n	8002d16 <i2cInitI2C+0xfe>
		}
		case I2C_CLOCK_200:
			{
				i2c->CCR &= ~I2C_CCR_FS_Msk;        // Select 200 kHz bus clock
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	61da      	str	r2, [r3, #28]
				i2c->CCR |= 0x0028;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	61da      	str	r2, [r3, #28]
				break;
 8002ce0:	e019      	b.n	8002d16 <i2cInitI2C+0xfe>
			}
		case I2C_CLOCK_400:
		{
			i2c->CCR &= ~I2C_CCR_FS_Msk;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	61da      	str	r2, [r3, #28]
			//i2c->CCR |= I2C_CCR_FS;       // org Jesse Select 400 kHz bus clock
			i2c->CCR |= 0x0014;				// Select 400 kHz bus clock
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f043 0214 	orr.w	r2, r3, #20
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	61da      	str	r2, [r3, #28]
			break;
 8002cfa:	e00c      	b.n	8002d16 <i2cInitI2C+0xfe>
		}
		default:
		{
			i2c->CCR &= ~I2C_CCR_FS_Msk;    // Select 100 kHz bus clock
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	61da      	str	r2, [r3, #28]
			i2c->CCR |= 0x0050;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	61da      	str	r2, [r3, #28]
			break;
 8002d14:	bf00      	nop
		}
    }
    i2c->TRISE = 0x0011;               // Set max. rise time
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2211      	movs	r2, #17
 8002d1a:	621a      	str	r2, [r3, #32]
    // set own address to 00 - not really used in master mode
    i2c->OAR1 |= (0x00 << 1);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	609a      	str	r2, [r3, #8]
    i2c->OAR1 |= (1 << 14); // bit 14 should be kept at 1 according to the datasheet
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
    i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f043 0201 	orr.w	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	601a      	str	r2, [r3, #0]

    return I2C_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	431bde83 	.word	0x431bde83

08002d4c <i2cSelectI2C>:
 *          <td rowspan="1">23...21</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cSelectI2C(I2C_TypeDef *i2c)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
    // Activate bus clock
    if (I2C1 == i2c)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a13      	ldr	r2, [pc, #76]	; (8002da4 <i2cSelectI2C+0x58>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d106      	bne.n	8002d6a <i2cSelectI2C+0x1e>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <i2cSelectI2C+0x5c>)
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <i2cSelectI2C+0x5c>)
 8002d62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d66:	6413      	str	r3, [r2, #64]	; 0x40
 8002d68:	e014      	b.n	8002d94 <i2cSelectI2C+0x48>
    }
    else if (I2C2 == i2c)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a0f      	ldr	r2, [pc, #60]	; (8002dac <i2cSelectI2C+0x60>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d106      	bne.n	8002d80 <i2cSelectI2C+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8002d72:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <i2cSelectI2C+0x5c>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	4a0c      	ldr	r2, [pc, #48]	; (8002da8 <i2cSelectI2C+0x5c>)
 8002d78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7e:	e009      	b.n	8002d94 <i2cSelectI2C+0x48>
    }
    else if (I2C3 == i2c)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a0b      	ldr	r2, [pc, #44]	; (8002db0 <i2cSelectI2C+0x64>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d105      	bne.n	8002d94 <i2cSelectI2C+0x48>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8002d88:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <i2cSelectI2C+0x5c>)
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	4a06      	ldr	r2, [pc, #24]	; (8002da8 <i2cSelectI2C+0x5c>)
 8002d8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d92:	6413      	str	r3, [r2, #64]	; 0x40
    }

    return I2C_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40005400 	.word	0x40005400
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40005800 	.word	0x40005800
 8002db0:	40005c00 	.word	0x40005c00

08002db4 <i2cSendByteToSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * The text written in <b>bold</b> letters is required to address a device-specific register.<br>
 */
I2C_RETURN_CODE_t i2cSendByteToSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t data)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	4608      	mov	r0, r1
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	70fb      	strb	r3, [r7, #3]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	70bb      	strb	r3, [r7, #2]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	707b      	strb	r3, [r7, #1]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 8002dce:	bf00      	nop
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f9      	bne.n	8002dd0 <i2cSendByteToSlaveReg+0x1c>

    __i2c_start(i2c);					 // send start condition
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff fe86 	bl	8002aee <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8002de2:	bf00      	nop
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f9      	beq.n	8002de4 <i2cSendByteToSlaveReg+0x30>

    i2c->DR = saddr<<1;                    // Send slave 7Bit address
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	461a      	mov	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8002dfa:	bf00      	nop
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f9      	beq.n	8002dfc <i2cSendByteToSlaveReg+0x48>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff fea0 	bl	8002b4e <__i2c_dummy_read_SR1_SR2>
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff febb 	bl	8002b8a <__i2c_Chk_TX_empty>

    i2c->DR = regAddr;                  // Set the address of the slave register
 8002e14:	78ba      	ldrb	r2, [r7, #2]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff feb5 	bl	8002b8a <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fe94 	bl	8002b4e <__i2c_dummy_read_SR1_SR2>
    i2c->DR = data;                     // Send data
 8002e26:	787a      	ldrb	r2, [r7, #1]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	611a      	str	r2, [r3, #16]
    I2C_BYTE_TRANSFER_FINISHED(i2c);    // Wait until BTF Flag is set
 8002e2c:	bf00      	nop
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f9      	beq.n	8002e2e <i2cSendByteToSlaveReg+0x7a>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff fe87 	bl	8002b4e <__i2c_dummy_read_SR1_SR2>
      __i2c_stop(i2c);					  // send stop condition
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff fe6c 	bl	8002b1e <__i2c_stop>


    return I2C_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <i2cBurstWrite>:
 * @note
 * Failure handling is not yet implemented
 *
*/
I2C_RETURN_CODE_t i2cBurstWrite(I2C_TypeDef *i2c, uint8_t saddr, uint8_t *data, uint8_t len)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	72fb      	strb	r3, [r7, #11]
 8002e60:	4613      	mov	r3, r2
 8002e62:	72bb      	strb	r3, [r7, #10]
    uint8_t numBytes = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	75fb      	strb	r3, [r7, #23]

    I2C_WAIT_BUSY(i2c);                 // Check whether the I2C bus is busy
 8002e68:	bf00      	nop
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f9      	bne.n	8002e6a <i2cBurstWrite+0x1a>
    I2C_RESET_POS(i2c);                 // May only be active in 16-bit mode
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	601a      	str	r2, [r3, #0]
    __i2c_start(i2c);					 // send start condition
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f7ff fe33 	bl	8002aee <__i2c_start>

    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8002e88:	bf00      	nop
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f9      	beq.n	8002e8a <i2cBurstWrite+0x3a>

    i2c->DR = saddr<<1;                 // Send 7Bit slave address
 8002e96:	7afb      	ldrb	r3, [r7, #11]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8002ea0:	bf00      	nop
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f9      	beq.n	8002ea2 <i2cBurstWrite+0x52>

    while (numBytes < len)
 8002eae:	e016      	b.n	8002ede <i2cBurstWrite+0x8e>
    {
        __i2c_Chk_TX_empty(i2c);
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f7ff fe6a 	bl	8002b8a <__i2c_Chk_TX_empty>
        __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f7ff fe49 	bl	8002b4e <__i2c_dummy_read_SR1_SR2>
        i2c->DR = *data++;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	611a      	str	r2, [r3, #16]
        I2C_BYTE_TRANSFER_FINISHED(i2c);   // Wait until BTF Flag is set
 8002eca:	bf00      	nop
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f9      	beq.n	8002ecc <i2cBurstWrite+0x7c>

        numBytes++;
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	3301      	adds	r3, #1
 8002edc:	75fb      	strb	r3, [r7, #23]
    while (numBytes < len)
 8002ede:	7dfa      	ldrb	r2, [r7, #23]
 8002ee0:	7abb      	ldrb	r3, [r7, #10]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d3e4      	bcc.n	8002eb0 <i2cBurstWrite+0x60>
    }

    I2C_BYTE_TRANSFER_FINISHED(i2c);   // Wait until BTF Flag is set
 8002ee6:	bf00      	nop
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f9      	beq.n	8002ee8 <i2cBurstWrite+0x98>
    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f7ff fe2a 	bl	8002b4e <__i2c_dummy_read_SR1_SR2>
    __i2c_stop(i2c);					  // send stop condition
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f7ff fe0f 	bl	8002b1e <__i2c_stop>

    return I2C_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <i2cBurstRegRead>:
 * <br>
 * <b>Affected register and bit(s)</b><br>

 */
I2C_RETURN_CODE_t i2cBurstRegRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data, uint8_t num)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	607b      	str	r3, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	72fb      	strb	r3, [r7, #11]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 8002f1c:	bf00      	nop
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f9      	bne.n	8002f1e <i2cBurstRegRead+0x14>
    //I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer

    __i2c_start(i2c);					 // send start condition
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f7ff fddf 	bl	8002aee <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8002f30:	bf00      	nop
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f9      	beq.n	8002f32 <i2cBurstRegRead+0x28>

    i2c->DR = saddr<<1;                        // Send with bit 0 = '0'
 8002f3e:	7afb      	ldrb	r3, [r7, #11]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	461a      	mov	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8002f48:	bf00      	nop
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f9      	beq.n	8002f4a <i2cBurstRegRead+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f7ff fdf9 	bl	8002b4e <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                      // Send address of the functional register
 8002f5c:	7aba      	ldrb	r2, [r7, #10]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	611a      	str	r2, [r3, #16]

    __i2c_Chk_TX_empty(i2c);             // Wait until transmit buffer is empty
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f7ff fe11 	bl	8002b8a <__i2c_Chk_TX_empty>
    __i2c_dummy_read_SR1_SR2(i2c);
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f7ff fdf0 	bl	8002b4e <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 8002f7a:	bf00      	nop
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f9      	beq.n	8002f7c <i2cBurstRegRead+0x72>
    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 8002f88:	7afb      	ldrb	r3, [r7, #11]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	461a      	mov	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8002f96:	bf00      	nop
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f9      	beq.n	8002f98 <i2cBurstRegRead+0x8e>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 8002fb0:	e02e      	b.n	8003010 <i2cBurstRegRead+0x106>
    {
        if (num == 1U)                      // If there is only one byte left...
 8002fb2:	7e3b      	ldrb	r3, [r7, #24]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d117      	bne.n	8002fe8 <i2cBurstRegRead+0xde>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f7ff fdc2 	bl	8002b4e <__i2c_dummy_read_SR1_SR2>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 8002fca:	bf00      	nop
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f9      	beq.n	8002fcc <i2cBurstRegRead+0xc2>

            *data++ = i2c->DR;              // Read data from data register
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6919      	ldr	r1, [r3, #16]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	b2ca      	uxtb	r2, r1
 8002fe4:	701a      	strb	r2, [r3, #0]
            break;
 8002fe6:	e016      	b.n	8003016 <i2cBurstRegRead+0x10c>
        }
        else                                // More than one byte left
        {
        	__i2c_dummy_read_SR1_SR2(i2c);
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f7ff fdb0 	bl	8002b4e <__i2c_dummy_read_SR1_SR2>
        	I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 8002fee:	bf00      	nop
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f9      	beq.n	8002ff0 <i2cBurstRegRead+0xe6>
            (*data++) = i2c->DR;            // Read data from data register
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6919      	ldr	r1, [r3, #16]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	b2ca      	uxtb	r2, r1
 8003008:	701a      	strb	r2, [r3, #0]
            num--;
 800300a:	7e3b      	ldrb	r3, [r7, #24]
 800300c:	3b01      	subs	r3, #1
 800300e:	763b      	strb	r3, [r7, #24]
    while (num > 0)                          // Start reading multiple values
 8003010:	7e3b      	ldrb	r3, [r7, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1cd      	bne.n	8002fb2 <i2cBurstRegRead+0xa8>
        }
    }
    __i2c_dummy_read_SR1_SR2(i2c);
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f7ff fd99 	bl	8002b4e <__i2c_dummy_read_SR1_SR2>
    __i2c_stop(i2c);
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f7ff fd7e 	bl	8002b1e <__i2c_stop>

    return I2C_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <i2cBurstRead>:

I2C_RETURN_CODE_t i2cBurstRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t *data, uint8_t num)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	461a      	mov	r2, r3
 8003038:	460b      	mov	r3, r1
 800303a:	72fb      	strb	r3, [r7, #11]
 800303c:	4613      	mov	r3, r2
 800303e:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 8003040:	bf00      	nop
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f9      	bne.n	8003042 <i2cBurstRead+0x16>
    I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	601a      	str	r2, [r3, #0]

    __i2c_start(i2c);					 // send start condition
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f7ff fd47 	bl	8002aee <__i2c_start>

    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 8003060:	7afb      	ldrb	r3, [r7, #11]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	461a      	mov	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 800306e:	bf00      	nop
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f9      	beq.n	8003070 <i2cBurstRead+0x44>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f7ff fd66 	bl	8002b4e <__i2c_dummy_read_SR1_SR2>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 800308e:	e02e      	b.n	80030ee <i2cBurstRead+0xc2>
    {
        if (num == 1U)                      // If there is only one byte left...
 8003090:	7abb      	ldrb	r3, [r7, #10]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d11a      	bne.n	80030cc <i2cBurstRead+0xa0>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f7ff fd53 	bl	8002b4e <__i2c_dummy_read_SR1_SR2>
            __i2c_stop(i2c);
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f7ff fd38 	bl	8002b1e <__i2c_stop>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 80030ae:	bf00      	nop
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f9      	beq.n	80030b0 <i2cBurstRead+0x84>
            *data++ = i2c->DR;              // Read data from data register
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6919      	ldr	r1, [r3, #16]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	b2ca      	uxtb	r2, r1
 80030c8:	701a      	strb	r2, [r3, #0]
            break;
 80030ca:	e013      	b.n	80030f4 <i2cBurstRead+0xc8>
        }
        else                                // More than one byte left
        {
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 80030cc:	bf00      	nop
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f9      	beq.n	80030ce <i2cBurstRead+0xa2>
            (*data++) = i2c->DR;            // Read data from data register
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6919      	ldr	r1, [r3, #16]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	b2ca      	uxtb	r2, r1
 80030e6:	701a      	strb	r2, [r3, #0]
            num--;
 80030e8:	7abb      	ldrb	r3, [r7, #10]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	72bb      	strb	r3, [r7, #10]
    while (num > 0)                          // Start reading multiple values
 80030ee:	7abb      	ldrb	r3, [r7, #10]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1cd      	bne.n	8003090 <i2cBurstRead+0x64>
        }
    }

    return I2C_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <i2cEnableDevice>:
 *          <td rowspan="1">0</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cEnableDevice(I2C_TypeDef *i2c)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
    i2c->CR1 |= I2C_CR1_PE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f043 0201 	orr.w	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	601a      	str	r2, [r3, #0]
    return I2C_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <i2cSetRiseTime>:
 *          <td rowspan="1">5 ... 0</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cSetRiseTime(I2C_TypeDef *i2c, uint8_t riseTime)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	70fb      	strb	r3, [r7, #3]
    i2c->TRISE &= ~I2C_TRISE_TRISE_Msk;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	621a      	str	r2, [r3, #32]

    if (riseTime >= 0 && riseTime <= 63)
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	2b3f      	cmp	r3, #63	; 0x3f
 800313c:	d806      	bhi.n	800314c <i2cSetRiseTime+0x2c>
    {
        i2c->TRISE |= riseTime;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1a      	ldr	r2, [r3, #32]
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	621a      	str	r2, [r3, #32]
 800314a:	e005      	b.n	8003158 <i2cSetRiseTime+0x38>
    }
    else
    {
        i2c->TRISE |= 0x11;     // This is a reliable value
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f043 0211 	orr.w	r2, r3, #17
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	621a      	str	r2, [r3, #32]
    }
    return I2C_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <i2cFindSlaveAddr>:
 *          <td rowspan="1">-</td>
 *      </tr>
 * </table>
 */
uint8_t i2cFindSlaveAddr(I2C_TypeDef *i2c, uint8_t i2cAddr)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	70fb      	strb	r3, [r7, #3]
    uint32_t simpleDelay;

    __i2c_start(i2c);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff fcbb 	bl	8002aee <__i2c_start>
    while (!(i2c->SR1 & I2C_SR1_SB))
    {
        ;
    }
*/
    i2c->DR = i2cAddr<<1;
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	461a      	mov	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	611a      	str	r2, [r3, #16]
    __i2c_dummy_read_SR1_SR2(i2c);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff fce3 	bl	8002b4e <__i2c_dummy_read_SR1_SR2>
    {
        ;
    }
*/

    i2c->CR1 |= I2C_CR1_STOP;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	601a      	str	r2, [r3, #0]
    for (simpleDelay = 0UL; simpleDelay < 1000UL; simpleDelay++)
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	e002      	b.n	80031a0 <i2cFindSlaveAddr+0x3a>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3301      	adds	r3, #1
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031a6:	d3f8      	bcc.n	800319a <i2cFindSlaveAddr+0x34>
    {
        ;
    }

    if (i2c->SR1 & I2C_SR1_ADDR)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <i2cFindSlaveAddr+0x52>
    {
        return i2cAddr;
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	e000      	b.n	80031ba <i2cFindSlaveAddr+0x54>
    }
    else
    {
        return 0;
 80031b8:	2300      	movs	r3, #0
    }
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <rccGetSysClock>:
 *          <td rowspan="1">Values used to calculate the sysclock frequency</td>
 *      </tr>
 * </table>
 */
uint32_t rccGetSysClock(void)
{
 80031c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c8:	b094      	sub	sp, #80	; 0x50
 80031ca:	af00      	add	r7, sp, #0
    uint32_t pllm = 0u;
 80031cc:	2300      	movs	r3, #0
 80031ce:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t pllvco = 0u;
 80031d0:	2300      	movs	r3, #0
 80031d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t pllp = 0u;
 80031d4:	2300      	movs	r3, #0
 80031d6:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t sysClock = 0u;
 80031d8:	2300      	movs	r3, #0
 80031da:	64bb      	str	r3, [r7, #72]	; 0x48

    switch (RCC->CFGR & RCC_CFGR_SWS)
 80031dc:	4b79      	ldr	r3, [pc, #484]	; (80033c4 <rccGetSysClock+0x200>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d00d      	beq.n	8003204 <rccGetSysClock+0x40>
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	f200 80e1 	bhi.w	80033b0 <rccGetSysClock+0x1ec>
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <rccGetSysClock+0x34>
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d003      	beq.n	80031fe <rccGetSysClock+0x3a>
 80031f6:	e0db      	b.n	80033b0 <rccGetSysClock+0x1ec>
    {
        case RCC_CFGR_SWS_HSI:
            sysClock = HSI_VALUE;    // High-speed internal = 16MHz
 80031f8:	4b73      	ldr	r3, [pc, #460]	; (80033c8 <rccGetSysClock+0x204>)
 80031fa:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80031fc:	e0db      	b.n	80033b6 <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_HSE:
            sysClock = HSE_VALUE;    // High-speed external = 4 - 25MHz (max.)
 80031fe:	4b73      	ldr	r3, [pc, #460]	; (80033cc <rccGetSysClock+0x208>)
 8003200:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003202:	e0d8      	b.n	80033b6 <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_PLL:
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003204:	4b6f      	ldr	r3, [pc, #444]	; (80033c4 <rccGetSysClock+0x200>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800320c:	647b      	str	r3, [r7, #68]	; 0x44

            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800320e:	4b6d      	ldr	r3, [pc, #436]	; (80033c4 <rccGetSysClock+0x200>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d063      	beq.n	80032e2 <rccGetSysClock+0x11e>
            {
                /* HSE used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800321a:	4b6a      	ldr	r3, [pc, #424]	; (80033c4 <rccGetSysClock+0x200>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	099b      	lsrs	r3, r3, #6
 8003220:	2200      	movs	r2, #0
 8003222:	63bb      	str	r3, [r7, #56]	; 0x38
 8003224:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322c:	633b      	str	r3, [r7, #48]	; 0x30
 800322e:	2300      	movs	r3, #0
 8003230:	637b      	str	r3, [r7, #52]	; 0x34
 8003232:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003236:	4622      	mov	r2, r4
 8003238:	462b      	mov	r3, r5
 800323a:	f04f 0000 	mov.w	r0, #0
 800323e:	f04f 0100 	mov.w	r1, #0
 8003242:	0159      	lsls	r1, r3, #5
 8003244:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003248:	0150      	lsls	r0, r2, #5
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	4621      	mov	r1, r4
 8003250:	1a51      	subs	r1, r2, r1
 8003252:	6139      	str	r1, [r7, #16]
 8003254:	4629      	mov	r1, r5
 8003256:	eb63 0301 	sbc.w	r3, r3, r1
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003268:	4659      	mov	r1, fp
 800326a:	018b      	lsls	r3, r1, #6
 800326c:	4651      	mov	r1, sl
 800326e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003272:	4651      	mov	r1, sl
 8003274:	018a      	lsls	r2, r1, #6
 8003276:	4651      	mov	r1, sl
 8003278:	ebb2 0801 	subs.w	r8, r2, r1
 800327c:	4659      	mov	r1, fp
 800327e:	eb63 0901 	sbc.w	r9, r3, r1
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800328e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003292:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003296:	4690      	mov	r8, r2
 8003298:	4699      	mov	r9, r3
 800329a:	4623      	mov	r3, r4
 800329c:	eb18 0303 	adds.w	r3, r8, r3
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	462b      	mov	r3, r5
 80032a4:	eb49 0303 	adc.w	r3, r9, r3
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032b6:	4629      	mov	r1, r5
 80032b8:	024b      	lsls	r3, r1, #9
 80032ba:	4621      	mov	r1, r4
 80032bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032c0:	4621      	mov	r1, r4
 80032c2:	024a      	lsls	r2, r1, #9
 80032c4:	4610      	mov	r0, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ca:	2200      	movs	r2, #0
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032d4:	f7fd fc70 	bl	8000bb8 <__aeabi_uldivmod>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 80032dc:	4613      	mov	r3, r2
 80032de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032e0:	e058      	b.n	8003394 <rccGetSysClock+0x1d0>
            }
            else
            {
                /* HSI used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80032e2:	4b38      	ldr	r3, [pc, #224]	; (80033c4 <rccGetSysClock+0x200>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	099b      	lsrs	r3, r3, #6
 80032e8:	2200      	movs	r2, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	4611      	mov	r1, r2
 80032ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032f2:	623b      	str	r3, [r7, #32]
 80032f4:	2300      	movs	r3, #0
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
 80032f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032fc:	4642      	mov	r2, r8
 80032fe:	464b      	mov	r3, r9
 8003300:	f04f 0000 	mov.w	r0, #0
 8003304:	f04f 0100 	mov.w	r1, #0
 8003308:	0159      	lsls	r1, r3, #5
 800330a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800330e:	0150      	lsls	r0, r2, #5
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4641      	mov	r1, r8
 8003316:	ebb2 0a01 	subs.w	sl, r2, r1
 800331a:	4649      	mov	r1, r9
 800331c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800332c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003330:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003334:	ebb2 040a 	subs.w	r4, r2, sl
 8003338:	eb63 050b 	sbc.w	r5, r3, fp
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	00eb      	lsls	r3, r5, #3
 8003346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800334a:	00e2      	lsls	r2, r4, #3
 800334c:	4614      	mov	r4, r2
 800334e:	461d      	mov	r5, r3
 8003350:	4643      	mov	r3, r8
 8003352:	18e3      	adds	r3, r4, r3
 8003354:	603b      	str	r3, [r7, #0]
 8003356:	464b      	mov	r3, r9
 8003358:	eb45 0303 	adc.w	r3, r5, r3
 800335c:	607b      	str	r3, [r7, #4]
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800336a:	4629      	mov	r1, r5
 800336c:	028b      	lsls	r3, r1, #10
 800336e:	4621      	mov	r1, r4
 8003370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003374:	4621      	mov	r1, r4
 8003376:	028a      	lsls	r2, r1, #10
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800337e:	2200      	movs	r2, #0
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	61fa      	str	r2, [r7, #28]
 8003384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003388:	f7fd fc16 	bl	8000bb8 <__aeabi_uldivmod>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8003390:	4613      	mov	r3, r2
 8003392:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <rccGetSysClock+0x200>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	0c1b      	lsrs	r3, r3, #16
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	3301      	adds	r3, #1
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	643b      	str	r3, [r7, #64]	; 0x40

            sysClock = pllvco / pllp;
 80033a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80033ae:	e002      	b.n	80033b6 <rccGetSysClock+0x1f2>

        default:
            sysClock = HSI_VALUE;
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <rccGetSysClock+0x204>)
 80033b2:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80033b4:	bf00      	nop
    }

    return sysClock;
 80033b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3750      	adds	r7, #80	; 0x50
 80033bc:	46bd      	mov	sp, r7
 80033be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800
 80033c8:	00f42400 	.word	0x00f42400
 80033cc:	007a1200 	.word	0x007a1200

080033d0 <rccGetHclkFreq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetSysClock().
 */
uint32_t rccGetHclkFreq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
    SystemCoreClock = rccGetSysClock() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> POSITION_VAL(RCC_CFGR_HPRE)];
 80033d6:	f7ff fef5 	bl	80031c4 <rccGetSysClock>
 80033da:	4601      	mov	r1, r0
 80033dc:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <rccGetHclkFreq+0x44>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033e4:	22f0      	movs	r2, #240	; 0xf0
 80033e6:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	fa92 f2a2 	rbit	r2, r2
 80033ee:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	fab2 f282 	clz	r2, r2
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	40d3      	lsrs	r3, r2
 80033fa:	4a07      	ldr	r2, [pc, #28]	; (8003418 <rccGetHclkFreq+0x48>)
 80033fc:	5cd3      	ldrb	r3, [r2, r3]
 80033fe:	fa21 f303 	lsr.w	r3, r1, r3
 8003402:	4a06      	ldr	r2, [pc, #24]	; (800341c <rccGetHclkFreq+0x4c>)
 8003404:	6013      	str	r3, [r2, #0]
    return SystemCoreClock;
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <rccGetHclkFreq+0x4c>)
 8003408:	681b      	ldr	r3, [r3, #0]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	08008054 	.word	0x08008054
 800341c:	2000001c 	.word	0x2000001c

08003420 <rccGetPclk1Freq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetHclkFrequency().
 */
uint32_t rccGetPclk1Freq(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (rccGetHclkFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003426:	f7ff ffd3 	bl	80033d0 <rccGetHclkFreq>
 800342a:	4601      	mov	r1, r0
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <rccGetPclk1Freq+0x3c>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003434:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8003438:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	fa92 f2a2 	rbit	r2, r2
 8003440:	603a      	str	r2, [r7, #0]
  return result;
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	fab2 f282 	clz	r2, r2
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	40d3      	lsrs	r3, r2
 800344c:	4a04      	ldr	r2, [pc, #16]	; (8003460 <rccGetPclk1Freq+0x40>)
 800344e:	5cd3      	ldrb	r3, [r2, r3]
 8003450:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40023800 	.word	0x40023800
 8003460:	08008054 	.word	0x08008054

08003464 <spiVerifySPI>:

/**
 * Verifies the integrity of the SPI port.
 */
static bool spiVerifySPI(SPI_TypeDef *spi)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
    if ((SPI1 == spi) || (SPI2 == spi) || (SPI3 == spi) || (SPI4 == spi))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a0c      	ldr	r2, [pc, #48]	; (80034a0 <spiVerifySPI+0x3c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d00b      	beq.n	800348c <spiVerifySPI+0x28>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a0b      	ldr	r2, [pc, #44]	; (80034a4 <spiVerifySPI+0x40>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d007      	beq.n	800348c <spiVerifySPI+0x28>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <spiVerifySPI+0x44>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d003      	beq.n	800348c <spiVerifySPI+0x28>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a09      	ldr	r2, [pc, #36]	; (80034ac <spiVerifySPI+0x48>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d101      	bne.n	8003490 <spiVerifySPI+0x2c>
    {
        return true;
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <spiVerifySPI+0x2e>
    }
    return false;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40013000 	.word	0x40013000
 80034a4:	40003800 	.word	0x40003800
 80034a8:	40003c00 	.word	0x40003c00
 80034ac:	40013400 	.word	0x40013400

080034b0 <spiVerifyClkDivider>:

/**
 * Verifies the integrity of the SPI clock divider.
 */
static bool spiVerifyClkDivider(SPI_CLOCK_DIV_t div)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	71fb      	strb	r3, [r7, #7]
    if ((CLK_DIV_2  == div) || (CLK_DIV_4  == div) || (CLK_DIV_8   == div) || (CLK_DIV_16  == div) ||
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d014      	beq.n	80034ea <spiVerifyClkDivider+0x3a>
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d011      	beq.n	80034ea <spiVerifyClkDivider+0x3a>
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d00e      	beq.n	80034ea <spiVerifyClkDivider+0x3a>
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d00b      	beq.n	80034ea <spiVerifyClkDivider+0x3a>
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d008      	beq.n	80034ea <spiVerifyClkDivider+0x3a>
        (CLK_DIV_32 == div) || (CLK_DIV_64 == div) || (CLK_DIV_128 == div) || (CLK_DIV_256 == div))
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	2b05      	cmp	r3, #5
 80034dc:	d005      	beq.n	80034ea <spiVerifyClkDivider+0x3a>
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	2b06      	cmp	r3, #6
 80034e2:	d002      	beq.n	80034ea <spiVerifyClkDivider+0x3a>
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	2b07      	cmp	r3, #7
 80034e8:	d101      	bne.n	80034ee <spiVerifyClkDivider+0x3e>
    {
        return true;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <spiVerifyClkDivider+0x40>
    }
    return false;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <spiVerifyDataLen>:

/**
 * Verifies the integrity of the SPI data length.
 */
static bool spiVerifyDataLen(SPI_DATALEN_t len)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	71fb      	strb	r3, [r7, #7]
    if ((SPI_DATA_8BIT == len) || (SPI_DATA_16_BIT == len))
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <spiVerifyDataLen+0x16>
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <spiVerifyDataLen+0x1a>
    {
        return true;
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <spiVerifyDataLen+0x1c>
    }
    return false;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <spiVerifySSM>:

/**
 * Verifies the integrity of the SPI Software Slave Management.
 */
static bool spiVerifySSM(SPI_SSM_t ssm)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	71fb      	strb	r3, [r7, #7]
    if ((SSM_ON == ssm) || (SSM_OFF == ssm))
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d002      	beq.n	800353a <spiVerifySSM+0x16>
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <spiVerifySSM+0x1a>
    {
        return true;
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <spiVerifySSM+0x1c>
    }
    return false;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <spiVerifyOpMode>:

/**
 * Verifies the integrity of the SPI operational mode.
 */
static bool spiVerifyOpMode(SPI_OPMODE_t om)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]
    if ((MASTER == om) || (SLAVE == om))
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <spiVerifyOpMode+0x16>
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <spiVerifyOpMode+0x1a>
    {
        return true;
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <spiVerifyOpMode+0x1c>
    }
    return false;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <spiVerifyPhase>:

/**
 * Verifies the integrity of the SPI trigger phase.
 */
static bool spiVerifyPhase(SPI_PHASE_t ph)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	71fb      	strb	r3, [r7, #7]
    if ((SPI_PHASE_EDGE_1 == ph) || (SPI_PHASE_EDGE_2 == ph))
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <spiVerifyPhase+0x16>
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <spiVerifyPhase+0x1a>
    {
        return true;
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <spiVerifyPhase+0x1c>
    }
    return false;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <spiVerifyIdlePolarity>:

/**
 * Verifies the integrity of the SPI idle level.
 */
static bool spiVerifyIdlePolarity(SPI_POLARITY_t pol)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
    if ((SPI_IDLE_LOW == pol) || (SPI_IDLE_HIGH == pol))
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <spiVerifyIdlePolarity+0x16>
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <spiVerifyIdlePolarity+0x1a>
    {
        return true;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <spiVerifyIdlePolarity+0x1c>
    }
    return false;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <spiInitSPI>:


SPI_RETURN_CODE_t spiInitSPI(SPI_TypeDef *spi, SPI_CLOCK_DIV_t div, SPI_DATALEN_t len,
                             SPI_SSM_t ssm, SPI_SSI_LVL_t lvl, SPI_OPMODE_t opMode,
                             SPI_PHASE_t phase, SPI_POLARITY_t polarity)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	4608      	mov	r0, r1
 80035ce:	4611      	mov	r1, r2
 80035d0:	461a      	mov	r2, r3
 80035d2:	4603      	mov	r3, r0
 80035d4:	70fb      	strb	r3, [r7, #3]
 80035d6:	460b      	mov	r3, r1
 80035d8:	70bb      	strb	r3, [r7, #2]
 80035da:	4613      	mov	r3, r2
 80035dc:	707b      	strb	r3, [r7, #1]
    uint16_t cr1 = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	81fb      	strh	r3, [r7, #14]

    // Parameter verification
    if (spiVerifyClkDivider(div) != true)
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff63 	bl	80034b0 <spiVerifyClkDivider>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f083 0301 	eor.w	r3, r3, #1
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <spiInitSPI+0x38>
    {
        return SPI_INVALID_CLOCK_DIVIDER;
 80035f6:	f06f 0350 	mvn.w	r3, #80	; 0x50
 80035fa:	e0da      	b.n	80037b2 <spiInitSPI+0x1ee>
    }
    if (spiVerifyDataLen(len) != true)
 80035fc:	78bb      	ldrb	r3, [r7, #2]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ff7c 	bl	80034fc <spiVerifyDataLen>
 8003604:	4603      	mov	r3, r0
 8003606:	f083 0301 	eor.w	r3, r3, #1
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <spiInitSPI+0x52>
    {
        return SPI_INVALID_DATA_LENGTH;
 8003610:	f06f 0351 	mvn.w	r3, #81	; 0x51
 8003614:	e0cd      	b.n	80037b2 <spiInitSPI+0x1ee>
    }
    if (spiVerifySSM(ssm) != true)
 8003616:	787b      	ldrb	r3, [r7, #1]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff83 	bl	8003524 <spiVerifySSM>
 800361e:	4603      	mov	r3, r0
 8003620:	f083 0301 	eor.w	r3, r3, #1
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <spiInitSPI+0x6c>
    {
        return SPI_INVALID_SW_SLV_MGMT;
 800362a:	f06f 0352 	mvn.w	r3, #82	; 0x52
 800362e:	e0c0      	b.n	80037b2 <spiInitSPI+0x1ee>
    if (spiVerifySsiLvl(lvl) != true)
    {
        return SPI_INVALID_SSI_LEVEL;
    }
#endif
    if (spiVerifyOpMode(opMode) != true)
 8003630:	7f3b      	ldrb	r3, [r7, #28]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ff8a 	bl	800354c <spiVerifyOpMode>
 8003638:	4603      	mov	r3, r0
 800363a:	f083 0301 	eor.w	r3, r3, #1
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <spiInitSPI+0x86>
    {
        return SPI_INVALID_OP_MODE;
 8003644:	f06f 0355 	mvn.w	r3, #85	; 0x55
 8003648:	e0b3      	b.n	80037b2 <spiInitSPI+0x1ee>
    }
    if (spiVerifyPhase(phase) != true)
 800364a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff ff90 	bl	8003574 <spiVerifyPhase>
 8003654:	4603      	mov	r3, r0
 8003656:	f083 0301 	eor.w	r3, r3, #1
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <spiInitSPI+0xa2>
    {
        return SPI_INVALID_PHASE;
 8003660:	f06f 0356 	mvn.w	r3, #86	; 0x56
 8003664:	e0a5      	b.n	80037b2 <spiInitSPI+0x1ee>
    }
    if (spiVerifyIdlePolarity(polarity) != true)
 8003666:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff ff96 	bl	800359c <spiVerifyIdlePolarity>
 8003670:	4603      	mov	r3, r0
 8003672:	f083 0301 	eor.w	r3, r3, #1
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <spiInitSPI+0xbe>
    {
        return SPI_INVALID_IDLE_POLARITY;
 800367c:	f06f 0357 	mvn.w	r3, #87	; 0x57
 8003680:	e097      	b.n	80037b2 <spiInitSPI+0x1ee>
    /**
     *  All parameter check passed successfully!
     */

    // Setting up the baudrate (PCLK / Pre-Scaler)
    switch (div)
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	2b07      	cmp	r3, #7
 8003686:	d83b      	bhi.n	8003700 <spiInitSPI+0x13c>
 8003688:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <spiInitSPI+0xcc>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036b1 	.word	0x080036b1
 8003694:	080036bb 	.word	0x080036bb
 8003698:	080036c5 	.word	0x080036c5
 800369c:	080036cf 	.word	0x080036cf
 80036a0:	080036d9 	.word	0x080036d9
 80036a4:	080036e3 	.word	0x080036e3
 80036a8:	080036ed 	.word	0x080036ed
 80036ac:	080036f7 	.word	0x080036f7
    {
        case CLK_DIV_2:
            cr1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80036b0:	89fb      	ldrh	r3, [r7, #14]
 80036b2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80036b6:	81fb      	strh	r3, [r7, #14]
            break;
 80036b8:	e027      	b.n	800370a <spiInitSPI+0x146>

        case CLK_DIV_4:
            cr1 |= SPI_CR1_BR_0;
 80036ba:	89fb      	ldrh	r3, [r7, #14]
 80036bc:	f043 0308 	orr.w	r3, r3, #8
 80036c0:	81fb      	strh	r3, [r7, #14]
            break;
 80036c2:	e022      	b.n	800370a <spiInitSPI+0x146>

        case CLK_DIV_8:
            cr1 |= SPI_CR1_BR_1;
 80036c4:	89fb      	ldrh	r3, [r7, #14]
 80036c6:	f043 0310 	orr.w	r3, r3, #16
 80036ca:	81fb      	strh	r3, [r7, #14]
            break;
 80036cc:	e01d      	b.n	800370a <spiInitSPI+0x146>

        case CLK_DIV_16:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80036ce:	89fb      	ldrh	r3, [r7, #14]
 80036d0:	f043 0318 	orr.w	r3, r3, #24
 80036d4:	81fb      	strh	r3, [r7, #14]
            break;
 80036d6:	e018      	b.n	800370a <spiInitSPI+0x146>

        case CLK_DIV_32:
            cr1 |= SPI_CR1_BR_2;
 80036d8:	89fb      	ldrh	r3, [r7, #14]
 80036da:	f043 0320 	orr.w	r3, r3, #32
 80036de:	81fb      	strh	r3, [r7, #14]
            break;
 80036e0:	e013      	b.n	800370a <spiInitSPI+0x146>

        case CLK_DIV_64:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_0);
 80036e2:	89fb      	ldrh	r3, [r7, #14]
 80036e4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80036e8:	81fb      	strh	r3, [r7, #14]
            break;
 80036ea:	e00e      	b.n	800370a <spiInitSPI+0x146>

        case CLK_DIV_128:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 80036ec:	89fb      	ldrh	r3, [r7, #14]
 80036ee:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80036f2:	81fb      	strh	r3, [r7, #14]
            break;
 80036f4:	e009      	b.n	800370a <spiInitSPI+0x146>

        case CLK_DIV_256:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80036f6:	89fb      	ldrh	r3, [r7, #14]
 80036f8:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80036fc:	81fb      	strh	r3, [r7, #14]
            break;
 80036fe:	e004      	b.n	800370a <spiInitSPI+0x146>

        default:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8003700:	89fb      	ldrh	r3, [r7, #14]
 8003702:	f043 0318 	orr.w	r3, r3, #24
 8003706:	81fb      	strh	r3, [r7, #14]
            break;
 8003708:	bf00      	nop
    }

    // Setting up the data length
    if (SPI_DATA_8BIT == len)
 800370a:	78bb      	ldrb	r3, [r7, #2]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d104      	bne.n	800371a <spiInitSPI+0x156>
    {
        cr1 &= ~SPI_CR1_DFF_Msk;
 8003710:	89fb      	ldrh	r3, [r7, #14]
 8003712:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003716:	81fb      	strh	r3, [r7, #14]
 8003718:	e003      	b.n	8003722 <spiInitSPI+0x15e>
    }
    else
    {
        cr1 |= SPI_CR1_DFF;
 800371a:	89fb      	ldrh	r3, [r7, #14]
 800371c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003720:	81fb      	strh	r3, [r7, #14]
    }

    // Set SSM and SSI bits
    if (SSM_ON == ssm)
 8003722:	787b      	ldrb	r3, [r7, #1]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d110      	bne.n	800374a <spiInitSPI+0x186>
    {
        cr1 |= SPI_CR1_SSM;
 8003728:	89fb      	ldrh	r3, [r7, #14]
 800372a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800372e:	81fb      	strh	r3, [r7, #14]

        // SSI level works only if SSM is active
        if (SSI_LVL_HIGH == lvl)
 8003730:	7e3b      	ldrb	r3, [r7, #24]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d104      	bne.n	8003740 <spiInitSPI+0x17c>
        {
            cr1 |= SPI_CR1_SSI;
 8003736:	89fb      	ldrh	r3, [r7, #14]
 8003738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373c:	81fb      	strh	r3, [r7, #14]
 800373e:	e008      	b.n	8003752 <spiInitSPI+0x18e>
        }
        else
        {
            cr1 &= ~SPI_CR1_SSI_Msk;
 8003740:	89fb      	ldrh	r3, [r7, #14]
 8003742:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003746:	81fb      	strh	r3, [r7, #14]
 8003748:	e003      	b.n	8003752 <spiInitSPI+0x18e>
        }
    }
    else
    {
        cr1 &= ~SPI_CR1_SSM_Msk;
 800374a:	89fb      	ldrh	r3, [r7, #14]
 800374c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003750:	81fb      	strh	r3, [r7, #14]
    }

    // Select between Master/Slave mode
    if (MASTER == opMode)
 8003752:	7f3b      	ldrb	r3, [r7, #28]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <spiInitSPI+0x19e>
    {
        cr1 |= SPI_CR1_MSTR;
 8003758:	89fb      	ldrh	r3, [r7, #14]
 800375a:	f043 0304 	orr.w	r3, r3, #4
 800375e:	81fb      	strh	r3, [r7, #14]
 8003760:	e003      	b.n	800376a <spiInitSPI+0x1a6>
    }
    else
    {
        cr1 &= ~SPI_CR1_MSTR_Msk;
 8003762:	89fb      	ldrh	r3, [r7, #14]
 8003764:	f023 0304 	bic.w	r3, r3, #4
 8003768:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock phase
    if (SPI_PHASE_EDGE_1 == phase)
 800376a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d104      	bne.n	800377c <spiInitSPI+0x1b8>
    {
        cr1 &= ~SPI_CR1_CPHA_Msk;
 8003772:	89fb      	ldrh	r3, [r7, #14]
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	81fb      	strh	r3, [r7, #14]
 800377a:	e003      	b.n	8003784 <spiInitSPI+0x1c0>
    }
    else
    {
        cr1 |= SPI_CR1_CPHA;
 800377c:	89fb      	ldrh	r3, [r7, #14]
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock polarity
    if (SPI_IDLE_LOW == polarity)
 8003784:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003788:	2b00      	cmp	r3, #0
 800378a:	d104      	bne.n	8003796 <spiInitSPI+0x1d2>
    {
        cr1 &= ~SPI_CR1_CPOL_Msk;
 800378c:	89fb      	ldrh	r3, [r7, #14]
 800378e:	f023 0302 	bic.w	r3, r3, #2
 8003792:	81fb      	strh	r3, [r7, #14]
 8003794:	e003      	b.n	800379e <spiInitSPI+0x1da>
    }
    else
    {
        cr1 |= SPI_CR1_CPOL;
 8003796:	89fb      	ldrh	r3, [r7, #14]
 8003798:	f043 0302 	orr.w	r3, r3, #2
 800379c:	81fb      	strh	r3, [r7, #14]
    }

    // Transfer settings to CR1 + CR2
    spi->CR1 = cr1;
 800379e:	89fa      	ldrh	r2, [r7, #14]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	601a      	str	r2, [r3, #0]
    //spi->CR1 = 0x31E; //8-bit frames
    spi->CR2 = 0;                     // Simplified version. Should be modified.
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	605a      	str	r2, [r3, #4]

    // Finally, enable SPIn
    spiEnableSPI(spi);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f846 	bl	800383c <spiEnableSPI>

    return SPI_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop

080037bc <spiSelectSPI>:


SPI_RETURN_CODE_t spiSelectSPI(SPI_TypeDef *spi)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
    // All parameter check passed successfully!

    // Selects the bus clock for SPIn
    if (SPI1 == spi)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a18      	ldr	r2, [pc, #96]	; (8003828 <spiSelectSPI+0x6c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d106      	bne.n	80037da <spiSelectSPI+0x1e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80037cc:	4b17      	ldr	r3, [pc, #92]	; (800382c <spiSelectSPI+0x70>)
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	4a16      	ldr	r2, [pc, #88]	; (800382c <spiSelectSPI+0x70>)
 80037d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037d6:	6453      	str	r3, [r2, #68]	; 0x44
 80037d8:	e01f      	b.n	800381a <spiSelectSPI+0x5e>
    }
    else if (SPI2 == spi)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a14      	ldr	r2, [pc, #80]	; (8003830 <spiSelectSPI+0x74>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d106      	bne.n	80037f0 <spiSelectSPI+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <spiSelectSPI+0x70>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	4a11      	ldr	r2, [pc, #68]	; (800382c <spiSelectSPI+0x70>)
 80037e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ec:	6413      	str	r3, [r2, #64]	; 0x40
 80037ee:	e014      	b.n	800381a <spiSelectSPI+0x5e>
    }
    else if (SPI3 == spi)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a10      	ldr	r2, [pc, #64]	; (8003834 <spiSelectSPI+0x78>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d106      	bne.n	8003806 <spiSelectSPI+0x4a>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <spiSelectSPI+0x70>)
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	4a0b      	ldr	r2, [pc, #44]	; (800382c <spiSelectSPI+0x70>)
 80037fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003802:	6413      	str	r3, [r2, #64]	; 0x40
 8003804:	e009      	b.n	800381a <spiSelectSPI+0x5e>
    }
    else if (SPI4 == spi)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a0b      	ldr	r2, [pc, #44]	; (8003838 <spiSelectSPI+0x7c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d105      	bne.n	800381a <spiSelectSPI+0x5e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 800380e:	4b07      	ldr	r3, [pc, #28]	; (800382c <spiSelectSPI+0x70>)
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	4a06      	ldr	r2, [pc, #24]	; (800382c <spiSelectSPI+0x70>)
 8003814:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003818:	6453      	str	r3, [r2, #68]	; 0x44
    }

    return SPI_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	40013000 	.word	0x40013000
 800382c:	40023800 	.word	0x40023800
 8003830:	40003800 	.word	0x40003800
 8003834:	40003c00 	.word	0x40003c00
 8003838:	40013400 	.word	0x40013400

0800383c <spiEnableSPI>:

    return SPI_OK;
}

SPI_RETURN_CODE_t spiEnableSPI(SPI_TypeDef *spi)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
    // Parameter verification
    if (spiVerifySPI(spi) != true)
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff fe0d 	bl	8003464 <spiVerifySPI>
 800384a:	4603      	mov	r3, r0
 800384c:	f083 0301 	eor.w	r3, r3, #1
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <spiEnableSPI+0x20>
    {
        return SPI_INVALID_SPI;
 8003856:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 800385a:	e006      	b.n	800386a <spiEnableSPI+0x2e>
    }

    // All parameter check passed successfully!
    spi->CR1 |= SPI_CR1_SPE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	601a      	str	r2, [r3, #0]

    return SPI_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <spiWriteByte>:
    return SPI_OK;
}


SPI_RETURN_CODE_t spiWriteByte(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t data)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	4611      	mov	r1, r2
 8003880:	461a      	mov	r2, r3
 8003882:	460b      	mov	r3, r1
 8003884:	71fb      	strb	r3, [r7, #7]
 8003886:	4613      	mov	r3, r2
 8003888:	71bb      	strb	r3, [r7, #6]
    static uint8_t state = SPI_SEND_BYTE_1;

    if (gpioVerifyPin(pin) != true)
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	4618      	mov	r0, r3
 800388e:	f7fe fdf5 	bl	800247c <gpioVerifyPin>
 8003892:	4603      	mov	r3, r0
 8003894:	f083 0301 	eor.w	r3, r3, #1
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <spiWriteByte+0x30>
    {
        return GPIO_INVALID_PIN;
 800389e:	f06f 0301 	mvn.w	r3, #1
 80038a2:	e03a      	b.n	800391a <spiWriteByte+0xa6>
    }

    // All parameters verified successfully.
    switch (state)
 80038a4:	4b1f      	ldr	r3, [pc, #124]	; (8003924 <spiWriteByte+0xb0>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <spiWriteByte+0x3e>
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d01a      	beq.n	80038e6 <spiWriteByte+0x72>
 80038b0:	e032      	b.n	8003918 <spiWriteByte+0xa4>
    {
        case SPI_SEND_BYTE_1:
        {
            gpioResetPin(port, pin);              // Set CS input to low level
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	4619      	mov	r1, r3
 80038b6:	68b8      	ldr	r0, [r7, #8]
 80038b8:	f7fe ffde 	bl	8002878 <gpioResetPin>
            while (!(spi->SR & SPI_SR_TXE))         // Wait until the TX register is empty
 80038bc:	bf00      	nop
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f9      	beq.n	80038be <spiWriteByte+0x4a>
            {
                ;
            }
            spi->DR = data;                         // Send first byte to data register
 80038ca:	79ba      	ldrb	r2, [r7, #6]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	60da      	str	r2, [r3, #12]

            while (spi->SR & SPI_SR_BSY)            // Wait until data has been sent
 80038d0:	bf00      	nop
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f9      	bne.n	80038d2 <spiWriteByte+0x5e>
            {
                // Wait: SPI is still busy
            }
            state = SPI_SEND_BYTE_2;
 80038de:	4b11      	ldr	r3, [pc, #68]	; (8003924 <spiWriteByte+0xb0>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	701a      	strb	r2, [r3, #0]
            break;                                  // Leave switch-case-check
 80038e4:	e018      	b.n	8003918 <spiWriteByte+0xa4>
        }

        case SPI_SEND_BYTE_2:
        {
            while (!(spi->SR & SPI_SR_TXE))         // Wait until the TX register is empty
 80038e6:	bf00      	nop
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f9      	beq.n	80038e8 <spiWriteByte+0x74>
            {
                ;
            }
            spi->DR = data;                         // Send first byte to data register
 80038f4:	79ba      	ldrb	r2, [r7, #6]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	60da      	str	r2, [r3, #12]

            while (spi->SR & SPI_SR_BSY)            // Wait until data has been sent
 80038fa:	bf00      	nop
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f9      	bne.n	80038fc <spiWriteByte+0x88>
            {
                // Wait: SPI is still busy
            }

            gpioSetPin(port, pin);
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	4619      	mov	r1, r3
 800390c:	68b8      	ldr	r0, [r7, #8]
 800390e:	f7fe ff88 	bl	8002822 <gpioSetPin>
            state = SPI_SEND_BYTE_1;
 8003912:	4b04      	ldr	r3, [pc, #16]	; (8003924 <spiWriteByte+0xb0>)
 8003914:	2200      	movs	r2, #0
 8003916:	701a      	strb	r2, [r3, #0]
        }
    }

    return SPI_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000248 	.word	0x20000248

08003928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	6039      	str	r1, [r7, #0]
 8003932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003938:	2b00      	cmp	r3, #0
 800393a:	db0a      	blt.n	8003952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	b2da      	uxtb	r2, r3
 8003940:	490c      	ldr	r1, [pc, #48]	; (8003974 <__NVIC_SetPriority+0x4c>)
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	0112      	lsls	r2, r2, #4
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	440b      	add	r3, r1
 800394c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003950:	e00a      	b.n	8003968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	b2da      	uxtb	r2, r3
 8003956:	4908      	ldr	r1, [pc, #32]	; (8003978 <__NVIC_SetPriority+0x50>)
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	3b04      	subs	r3, #4
 8003960:	0112      	lsls	r2, r2, #4
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	440b      	add	r3, r1
 8003966:	761a      	strb	r2, [r3, #24]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	e000e100 	.word	0xe000e100
 8003978:	e000ed00 	.word	0xe000ed00

0800397c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3b01      	subs	r3, #1
 8003988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800398c:	d301      	bcc.n	8003992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800398e:	2301      	movs	r3, #1
 8003990:	e00f      	b.n	80039b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003992:	4a0a      	ldr	r2, [pc, #40]	; (80039bc <SysTick_Config+0x40>)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3b01      	subs	r3, #1
 8003998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800399a:	210f      	movs	r1, #15
 800399c:	f04f 30ff 	mov.w	r0, #4294967295
 80039a0:	f7ff ffc2 	bl	8003928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <SysTick_Config+0x40>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039aa:	4b04      	ldr	r3, [pc, #16]	; (80039bc <SysTick_Config+0x40>)
 80039ac:	2207      	movs	r2, #7
 80039ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	e000e010 	.word	0xe000e010

080039c0 <systickSetMillis>:
 * **systickSetMillis()** might be confusing since the user might expect to get a ticktime of a multiple of **one**
 * millisecond. However, depending on the setting of the divider used in function systickInit() the real ticktime might
 * be also a multiple of 10 or 100 milliseconds.
 */
void systickSetMillis(uint32_t *timer, uint32_t millis)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
    *timer = millis;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	601a      	str	r2, [r3, #0]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 80039e4:	f7fe fc6e 	bl	80022c4 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <systickInit+0x24>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff ffc2 	bl	800397c <SysTick_Config>
}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	2000001c 	.word	0x2000001c

08003a04 <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	601a      	str	r2, [r3, #0]
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <isSystickExpired+0x16>
	{
		timerState = true;
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
	timerTrigger = true;
 8003a48:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <SysTick_Handler+0x14>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	701a      	strb	r2, [r3, #0]
}
 8003a4e:	bf00      	nop
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	20000230 	.word	0x20000230

08003a5c <systickUpdateTimer>:
 * Updates the given timer.
 *
 * @param *timer : A pointer to the variable representing this timer.
 */
void systickUpdateTimer(uint32_t *timer)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
    DECREMENT_TIMER(*timer);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d004      	beq.n	8003a76 <systickUpdateTimer+0x1a>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	1e5a      	subs	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	601a      	str	r2, [r3, #0]
    timerTrigger = false;
 8003a76:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <systickUpdateTimer+0x2c>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	20000230 	.word	0x20000230

08003a8c <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 8003a98:	2300      	movs	r3, #0
 8003a9a:	73fb      	strb	r3, [r7, #15]
 8003a9c:	e011      	b.n	8003ac2 <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d004      	beq.n	8003abc <systickUpdateTimerList+0x30>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	1e5a      	subs	r2, r3, #1
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	73fb      	strb	r3, [r7, #15]
 8003ac2:	7bfa      	ldrb	r2, [r7, #15]
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d3e9      	bcc.n	8003a9e <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 8003aca:	4b04      	ldr	r3, [pc, #16]	; (8003adc <systickUpdateTimerList+0x50>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	701a      	strb	r2, [r3, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	20000230 	.word	0x20000230

08003ae0 <systickDelay>:
 * of the while(1) loop, e.g. when initialization of a hardware component needs
 * time to perform one initialization step (e.g. if the datasheet of that component
 * demands a delay before doing the next initialization step).
 */
void systickDelay(uint32_t *timer, uint32_t delay)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
    systickSetMillis(timer, delay);
 8003aea:	6839      	ldr	r1, [r7, #0]
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff ff67 	bl	80039c0 <systickSetMillis>
    while (!isSystickExpired(*timer))
 8003af2:	e006      	b.n	8003b02 <systickDelay+0x22>
    {
        if (timerTrigger == true)
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <systickDelay+0x44>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <systickDelay+0x22>
        {
            systickUpdateTimer(timer);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff ffad 	bl	8003a5c <systickUpdateTimer>
    while (!isSystickExpired(*timer))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff ff8a 	bl	8003a20 <isSystickExpired>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f083 0301 	eor.w	r3, r3, #1
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1ed      	bne.n	8003af4 <systickDelay+0x14>
        }
    }
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20000230 	.word	0x20000230

08003b28 <__errno>:
 8003b28:	4b01      	ldr	r3, [pc, #4]	; (8003b30 <__errno+0x8>)
 8003b2a:	6818      	ldr	r0, [r3, #0]
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	20000020 	.word	0x20000020

08003b34 <__libc_init_array>:
 8003b34:	b570      	push	{r4, r5, r6, lr}
 8003b36:	4d0d      	ldr	r5, [pc, #52]	; (8003b6c <__libc_init_array+0x38>)
 8003b38:	4c0d      	ldr	r4, [pc, #52]	; (8003b70 <__libc_init_array+0x3c>)
 8003b3a:	1b64      	subs	r4, r4, r5
 8003b3c:	10a4      	asrs	r4, r4, #2
 8003b3e:	2600      	movs	r6, #0
 8003b40:	42a6      	cmp	r6, r4
 8003b42:	d109      	bne.n	8003b58 <__libc_init_array+0x24>
 8003b44:	4d0b      	ldr	r5, [pc, #44]	; (8003b74 <__libc_init_array+0x40>)
 8003b46:	4c0c      	ldr	r4, [pc, #48]	; (8003b78 <__libc_init_array+0x44>)
 8003b48:	f003 ffa0 	bl	8007a8c <_init>
 8003b4c:	1b64      	subs	r4, r4, r5
 8003b4e:	10a4      	asrs	r4, r4, #2
 8003b50:	2600      	movs	r6, #0
 8003b52:	42a6      	cmp	r6, r4
 8003b54:	d105      	bne.n	8003b62 <__libc_init_array+0x2e>
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
 8003b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5c:	4798      	blx	r3
 8003b5e:	3601      	adds	r6, #1
 8003b60:	e7ee      	b.n	8003b40 <__libc_init_array+0xc>
 8003b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b66:	4798      	blx	r3
 8003b68:	3601      	adds	r6, #1
 8003b6a:	e7f2      	b.n	8003b52 <__libc_init_array+0x1e>
 8003b6c:	08008620 	.word	0x08008620
 8003b70:	08008620 	.word	0x08008620
 8003b74:	08008620 	.word	0x08008620
 8003b78:	08008624 	.word	0x08008624

08003b7c <malloc>:
 8003b7c:	4b02      	ldr	r3, [pc, #8]	; (8003b88 <malloc+0xc>)
 8003b7e:	4601      	mov	r1, r0
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	f000 b877 	b.w	8003c74 <_malloc_r>
 8003b86:	bf00      	nop
 8003b88:	20000020 	.word	0x20000020

08003b8c <memset>:
 8003b8c:	4402      	add	r2, r0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d100      	bne.n	8003b96 <memset+0xa>
 8003b94:	4770      	bx	lr
 8003b96:	f803 1b01 	strb.w	r1, [r3], #1
 8003b9a:	e7f9      	b.n	8003b90 <memset+0x4>

08003b9c <_free_r>:
 8003b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b9e:	2900      	cmp	r1, #0
 8003ba0:	d044      	beq.n	8003c2c <_free_r+0x90>
 8003ba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ba6:	9001      	str	r0, [sp, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f1a1 0404 	sub.w	r4, r1, #4
 8003bae:	bfb8      	it	lt
 8003bb0:	18e4      	addlt	r4, r4, r3
 8003bb2:	f001 fbf9 	bl	80053a8 <__malloc_lock>
 8003bb6:	4a1e      	ldr	r2, [pc, #120]	; (8003c30 <_free_r+0x94>)
 8003bb8:	9801      	ldr	r0, [sp, #4]
 8003bba:	6813      	ldr	r3, [r2, #0]
 8003bbc:	b933      	cbnz	r3, 8003bcc <_free_r+0x30>
 8003bbe:	6063      	str	r3, [r4, #4]
 8003bc0:	6014      	str	r4, [r2, #0]
 8003bc2:	b003      	add	sp, #12
 8003bc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bc8:	f001 bbf4 	b.w	80053b4 <__malloc_unlock>
 8003bcc:	42a3      	cmp	r3, r4
 8003bce:	d908      	bls.n	8003be2 <_free_r+0x46>
 8003bd0:	6825      	ldr	r5, [r4, #0]
 8003bd2:	1961      	adds	r1, r4, r5
 8003bd4:	428b      	cmp	r3, r1
 8003bd6:	bf01      	itttt	eq
 8003bd8:	6819      	ldreq	r1, [r3, #0]
 8003bda:	685b      	ldreq	r3, [r3, #4]
 8003bdc:	1949      	addeq	r1, r1, r5
 8003bde:	6021      	streq	r1, [r4, #0]
 8003be0:	e7ed      	b.n	8003bbe <_free_r+0x22>
 8003be2:	461a      	mov	r2, r3
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	b10b      	cbz	r3, 8003bec <_free_r+0x50>
 8003be8:	42a3      	cmp	r3, r4
 8003bea:	d9fa      	bls.n	8003be2 <_free_r+0x46>
 8003bec:	6811      	ldr	r1, [r2, #0]
 8003bee:	1855      	adds	r5, r2, r1
 8003bf0:	42a5      	cmp	r5, r4
 8003bf2:	d10b      	bne.n	8003c0c <_free_r+0x70>
 8003bf4:	6824      	ldr	r4, [r4, #0]
 8003bf6:	4421      	add	r1, r4
 8003bf8:	1854      	adds	r4, r2, r1
 8003bfa:	42a3      	cmp	r3, r4
 8003bfc:	6011      	str	r1, [r2, #0]
 8003bfe:	d1e0      	bne.n	8003bc2 <_free_r+0x26>
 8003c00:	681c      	ldr	r4, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	6053      	str	r3, [r2, #4]
 8003c06:	4421      	add	r1, r4
 8003c08:	6011      	str	r1, [r2, #0]
 8003c0a:	e7da      	b.n	8003bc2 <_free_r+0x26>
 8003c0c:	d902      	bls.n	8003c14 <_free_r+0x78>
 8003c0e:	230c      	movs	r3, #12
 8003c10:	6003      	str	r3, [r0, #0]
 8003c12:	e7d6      	b.n	8003bc2 <_free_r+0x26>
 8003c14:	6825      	ldr	r5, [r4, #0]
 8003c16:	1961      	adds	r1, r4, r5
 8003c18:	428b      	cmp	r3, r1
 8003c1a:	bf04      	itt	eq
 8003c1c:	6819      	ldreq	r1, [r3, #0]
 8003c1e:	685b      	ldreq	r3, [r3, #4]
 8003c20:	6063      	str	r3, [r4, #4]
 8003c22:	bf04      	itt	eq
 8003c24:	1949      	addeq	r1, r1, r5
 8003c26:	6021      	streq	r1, [r4, #0]
 8003c28:	6054      	str	r4, [r2, #4]
 8003c2a:	e7ca      	b.n	8003bc2 <_free_r+0x26>
 8003c2c:	b003      	add	sp, #12
 8003c2e:	bd30      	pop	{r4, r5, pc}
 8003c30:	2000024c 	.word	0x2000024c

08003c34 <sbrk_aligned>:
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	4e0e      	ldr	r6, [pc, #56]	; (8003c70 <sbrk_aligned+0x3c>)
 8003c38:	460c      	mov	r4, r1
 8003c3a:	6831      	ldr	r1, [r6, #0]
 8003c3c:	4605      	mov	r5, r0
 8003c3e:	b911      	cbnz	r1, 8003c46 <sbrk_aligned+0x12>
 8003c40:	f000 fcf6 	bl	8004630 <_sbrk_r>
 8003c44:	6030      	str	r0, [r6, #0]
 8003c46:	4621      	mov	r1, r4
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f000 fcf1 	bl	8004630 <_sbrk_r>
 8003c4e:	1c43      	adds	r3, r0, #1
 8003c50:	d00a      	beq.n	8003c68 <sbrk_aligned+0x34>
 8003c52:	1cc4      	adds	r4, r0, #3
 8003c54:	f024 0403 	bic.w	r4, r4, #3
 8003c58:	42a0      	cmp	r0, r4
 8003c5a:	d007      	beq.n	8003c6c <sbrk_aligned+0x38>
 8003c5c:	1a21      	subs	r1, r4, r0
 8003c5e:	4628      	mov	r0, r5
 8003c60:	f000 fce6 	bl	8004630 <_sbrk_r>
 8003c64:	3001      	adds	r0, #1
 8003c66:	d101      	bne.n	8003c6c <sbrk_aligned+0x38>
 8003c68:	f04f 34ff 	mov.w	r4, #4294967295
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	bd70      	pop	{r4, r5, r6, pc}
 8003c70:	20000250 	.word	0x20000250

08003c74 <_malloc_r>:
 8003c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c78:	1ccd      	adds	r5, r1, #3
 8003c7a:	f025 0503 	bic.w	r5, r5, #3
 8003c7e:	3508      	adds	r5, #8
 8003c80:	2d0c      	cmp	r5, #12
 8003c82:	bf38      	it	cc
 8003c84:	250c      	movcc	r5, #12
 8003c86:	2d00      	cmp	r5, #0
 8003c88:	4607      	mov	r7, r0
 8003c8a:	db01      	blt.n	8003c90 <_malloc_r+0x1c>
 8003c8c:	42a9      	cmp	r1, r5
 8003c8e:	d905      	bls.n	8003c9c <_malloc_r+0x28>
 8003c90:	230c      	movs	r3, #12
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	2600      	movs	r6, #0
 8003c96:	4630      	mov	r0, r6
 8003c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c9c:	4e2e      	ldr	r6, [pc, #184]	; (8003d58 <_malloc_r+0xe4>)
 8003c9e:	f001 fb83 	bl	80053a8 <__malloc_lock>
 8003ca2:	6833      	ldr	r3, [r6, #0]
 8003ca4:	461c      	mov	r4, r3
 8003ca6:	bb34      	cbnz	r4, 8003cf6 <_malloc_r+0x82>
 8003ca8:	4629      	mov	r1, r5
 8003caa:	4638      	mov	r0, r7
 8003cac:	f7ff ffc2 	bl	8003c34 <sbrk_aligned>
 8003cb0:	1c43      	adds	r3, r0, #1
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	d14d      	bne.n	8003d52 <_malloc_r+0xde>
 8003cb6:	6834      	ldr	r4, [r6, #0]
 8003cb8:	4626      	mov	r6, r4
 8003cba:	2e00      	cmp	r6, #0
 8003cbc:	d140      	bne.n	8003d40 <_malloc_r+0xcc>
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	4631      	mov	r1, r6
 8003cc2:	4638      	mov	r0, r7
 8003cc4:	eb04 0803 	add.w	r8, r4, r3
 8003cc8:	f000 fcb2 	bl	8004630 <_sbrk_r>
 8003ccc:	4580      	cmp	r8, r0
 8003cce:	d13a      	bne.n	8003d46 <_malloc_r+0xd2>
 8003cd0:	6821      	ldr	r1, [r4, #0]
 8003cd2:	3503      	adds	r5, #3
 8003cd4:	1a6d      	subs	r5, r5, r1
 8003cd6:	f025 0503 	bic.w	r5, r5, #3
 8003cda:	3508      	adds	r5, #8
 8003cdc:	2d0c      	cmp	r5, #12
 8003cde:	bf38      	it	cc
 8003ce0:	250c      	movcc	r5, #12
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	4638      	mov	r0, r7
 8003ce6:	f7ff ffa5 	bl	8003c34 <sbrk_aligned>
 8003cea:	3001      	adds	r0, #1
 8003cec:	d02b      	beq.n	8003d46 <_malloc_r+0xd2>
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	442b      	add	r3, r5
 8003cf2:	6023      	str	r3, [r4, #0]
 8003cf4:	e00e      	b.n	8003d14 <_malloc_r+0xa0>
 8003cf6:	6822      	ldr	r2, [r4, #0]
 8003cf8:	1b52      	subs	r2, r2, r5
 8003cfa:	d41e      	bmi.n	8003d3a <_malloc_r+0xc6>
 8003cfc:	2a0b      	cmp	r2, #11
 8003cfe:	d916      	bls.n	8003d2e <_malloc_r+0xba>
 8003d00:	1961      	adds	r1, r4, r5
 8003d02:	42a3      	cmp	r3, r4
 8003d04:	6025      	str	r5, [r4, #0]
 8003d06:	bf18      	it	ne
 8003d08:	6059      	strne	r1, [r3, #4]
 8003d0a:	6863      	ldr	r3, [r4, #4]
 8003d0c:	bf08      	it	eq
 8003d0e:	6031      	streq	r1, [r6, #0]
 8003d10:	5162      	str	r2, [r4, r5]
 8003d12:	604b      	str	r3, [r1, #4]
 8003d14:	4638      	mov	r0, r7
 8003d16:	f104 060b 	add.w	r6, r4, #11
 8003d1a:	f001 fb4b 	bl	80053b4 <__malloc_unlock>
 8003d1e:	f026 0607 	bic.w	r6, r6, #7
 8003d22:	1d23      	adds	r3, r4, #4
 8003d24:	1af2      	subs	r2, r6, r3
 8003d26:	d0b6      	beq.n	8003c96 <_malloc_r+0x22>
 8003d28:	1b9b      	subs	r3, r3, r6
 8003d2a:	50a3      	str	r3, [r4, r2]
 8003d2c:	e7b3      	b.n	8003c96 <_malloc_r+0x22>
 8003d2e:	6862      	ldr	r2, [r4, #4]
 8003d30:	42a3      	cmp	r3, r4
 8003d32:	bf0c      	ite	eq
 8003d34:	6032      	streq	r2, [r6, #0]
 8003d36:	605a      	strne	r2, [r3, #4]
 8003d38:	e7ec      	b.n	8003d14 <_malloc_r+0xa0>
 8003d3a:	4623      	mov	r3, r4
 8003d3c:	6864      	ldr	r4, [r4, #4]
 8003d3e:	e7b2      	b.n	8003ca6 <_malloc_r+0x32>
 8003d40:	4634      	mov	r4, r6
 8003d42:	6876      	ldr	r6, [r6, #4]
 8003d44:	e7b9      	b.n	8003cba <_malloc_r+0x46>
 8003d46:	230c      	movs	r3, #12
 8003d48:	603b      	str	r3, [r7, #0]
 8003d4a:	4638      	mov	r0, r7
 8003d4c:	f001 fb32 	bl	80053b4 <__malloc_unlock>
 8003d50:	e7a1      	b.n	8003c96 <_malloc_r+0x22>
 8003d52:	6025      	str	r5, [r4, #0]
 8003d54:	e7de      	b.n	8003d14 <_malloc_r+0xa0>
 8003d56:	bf00      	nop
 8003d58:	2000024c 	.word	0x2000024c

08003d5c <__cvt>:
 8003d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d60:	ec55 4b10 	vmov	r4, r5, d0
 8003d64:	2d00      	cmp	r5, #0
 8003d66:	460e      	mov	r6, r1
 8003d68:	4619      	mov	r1, r3
 8003d6a:	462b      	mov	r3, r5
 8003d6c:	bfbb      	ittet	lt
 8003d6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003d72:	461d      	movlt	r5, r3
 8003d74:	2300      	movge	r3, #0
 8003d76:	232d      	movlt	r3, #45	; 0x2d
 8003d78:	700b      	strb	r3, [r1, #0]
 8003d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003d80:	4691      	mov	r9, r2
 8003d82:	f023 0820 	bic.w	r8, r3, #32
 8003d86:	bfbc      	itt	lt
 8003d88:	4622      	movlt	r2, r4
 8003d8a:	4614      	movlt	r4, r2
 8003d8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d90:	d005      	beq.n	8003d9e <__cvt+0x42>
 8003d92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003d96:	d100      	bne.n	8003d9a <__cvt+0x3e>
 8003d98:	3601      	adds	r6, #1
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	e000      	b.n	8003da0 <__cvt+0x44>
 8003d9e:	2103      	movs	r1, #3
 8003da0:	ab03      	add	r3, sp, #12
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	ab02      	add	r3, sp, #8
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	ec45 4b10 	vmov	d0, r4, r5
 8003dac:	4653      	mov	r3, sl
 8003dae:	4632      	mov	r2, r6
 8003db0:	f000 fcfa 	bl	80047a8 <_dtoa_r>
 8003db4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003db8:	4607      	mov	r7, r0
 8003dba:	d102      	bne.n	8003dc2 <__cvt+0x66>
 8003dbc:	f019 0f01 	tst.w	r9, #1
 8003dc0:	d022      	beq.n	8003e08 <__cvt+0xac>
 8003dc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003dc6:	eb07 0906 	add.w	r9, r7, r6
 8003dca:	d110      	bne.n	8003dee <__cvt+0x92>
 8003dcc:	783b      	ldrb	r3, [r7, #0]
 8003dce:	2b30      	cmp	r3, #48	; 0x30
 8003dd0:	d10a      	bne.n	8003de8 <__cvt+0x8c>
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	4629      	mov	r1, r5
 8003dda:	f7fc fe7d 	bl	8000ad8 <__aeabi_dcmpeq>
 8003dde:	b918      	cbnz	r0, 8003de8 <__cvt+0x8c>
 8003de0:	f1c6 0601 	rsb	r6, r6, #1
 8003de4:	f8ca 6000 	str.w	r6, [sl]
 8003de8:	f8da 3000 	ldr.w	r3, [sl]
 8003dec:	4499      	add	r9, r3
 8003dee:	2200      	movs	r2, #0
 8003df0:	2300      	movs	r3, #0
 8003df2:	4620      	mov	r0, r4
 8003df4:	4629      	mov	r1, r5
 8003df6:	f7fc fe6f 	bl	8000ad8 <__aeabi_dcmpeq>
 8003dfa:	b108      	cbz	r0, 8003e00 <__cvt+0xa4>
 8003dfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e00:	2230      	movs	r2, #48	; 0x30
 8003e02:	9b03      	ldr	r3, [sp, #12]
 8003e04:	454b      	cmp	r3, r9
 8003e06:	d307      	bcc.n	8003e18 <__cvt+0xbc>
 8003e08:	9b03      	ldr	r3, [sp, #12]
 8003e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e0c:	1bdb      	subs	r3, r3, r7
 8003e0e:	4638      	mov	r0, r7
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	b004      	add	sp, #16
 8003e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e18:	1c59      	adds	r1, r3, #1
 8003e1a:	9103      	str	r1, [sp, #12]
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	e7f0      	b.n	8003e02 <__cvt+0xa6>

08003e20 <__exponent>:
 8003e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e22:	4603      	mov	r3, r0
 8003e24:	2900      	cmp	r1, #0
 8003e26:	bfb8      	it	lt
 8003e28:	4249      	neglt	r1, r1
 8003e2a:	f803 2b02 	strb.w	r2, [r3], #2
 8003e2e:	bfb4      	ite	lt
 8003e30:	222d      	movlt	r2, #45	; 0x2d
 8003e32:	222b      	movge	r2, #43	; 0x2b
 8003e34:	2909      	cmp	r1, #9
 8003e36:	7042      	strb	r2, [r0, #1]
 8003e38:	dd2a      	ble.n	8003e90 <__exponent+0x70>
 8003e3a:	f10d 0407 	add.w	r4, sp, #7
 8003e3e:	46a4      	mov	ip, r4
 8003e40:	270a      	movs	r7, #10
 8003e42:	46a6      	mov	lr, r4
 8003e44:	460a      	mov	r2, r1
 8003e46:	fb91 f6f7 	sdiv	r6, r1, r7
 8003e4a:	fb07 1516 	mls	r5, r7, r6, r1
 8003e4e:	3530      	adds	r5, #48	; 0x30
 8003e50:	2a63      	cmp	r2, #99	; 0x63
 8003e52:	f104 34ff 	add.w	r4, r4, #4294967295
 8003e56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003e5a:	4631      	mov	r1, r6
 8003e5c:	dcf1      	bgt.n	8003e42 <__exponent+0x22>
 8003e5e:	3130      	adds	r1, #48	; 0x30
 8003e60:	f1ae 0502 	sub.w	r5, lr, #2
 8003e64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003e68:	1c44      	adds	r4, r0, #1
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	4561      	cmp	r1, ip
 8003e6e:	d30a      	bcc.n	8003e86 <__exponent+0x66>
 8003e70:	f10d 0209 	add.w	r2, sp, #9
 8003e74:	eba2 020e 	sub.w	r2, r2, lr
 8003e78:	4565      	cmp	r5, ip
 8003e7a:	bf88      	it	hi
 8003e7c:	2200      	movhi	r2, #0
 8003e7e:	4413      	add	r3, r2
 8003e80:	1a18      	subs	r0, r3, r0
 8003e82:	b003      	add	sp, #12
 8003e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003e8e:	e7ed      	b.n	8003e6c <__exponent+0x4c>
 8003e90:	2330      	movs	r3, #48	; 0x30
 8003e92:	3130      	adds	r1, #48	; 0x30
 8003e94:	7083      	strb	r3, [r0, #2]
 8003e96:	70c1      	strb	r1, [r0, #3]
 8003e98:	1d03      	adds	r3, r0, #4
 8003e9a:	e7f1      	b.n	8003e80 <__exponent+0x60>

08003e9c <_printf_float>:
 8003e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea0:	ed2d 8b02 	vpush	{d8}
 8003ea4:	b08d      	sub	sp, #52	; 0x34
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003eac:	4616      	mov	r6, r2
 8003eae:	461f      	mov	r7, r3
 8003eb0:	4605      	mov	r5, r0
 8003eb2:	f001 fa67 	bl	8005384 <_localeconv_r>
 8003eb6:	f8d0 a000 	ldr.w	sl, [r0]
 8003eba:	4650      	mov	r0, sl
 8003ebc:	f7fc f990 	bl	80001e0 <strlen>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	9305      	str	r3, [sp, #20]
 8003ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8003ecc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003ed0:	3307      	adds	r3, #7
 8003ed2:	f023 0307 	bic.w	r3, r3, #7
 8003ed6:	f103 0208 	add.w	r2, r3, #8
 8003eda:	f8c8 2000 	str.w	r2, [r8]
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ee6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003eea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003eee:	9307      	str	r3, [sp, #28]
 8003ef0:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ef4:	ee08 0a10 	vmov	s16, r0
 8003ef8:	4b9f      	ldr	r3, [pc, #636]	; (8004178 <_printf_float+0x2dc>)
 8003efa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003efe:	f04f 32ff 	mov.w	r2, #4294967295
 8003f02:	f7fc fe1b 	bl	8000b3c <__aeabi_dcmpun>
 8003f06:	bb88      	cbnz	r0, 8003f6c <_printf_float+0xd0>
 8003f08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f0c:	4b9a      	ldr	r3, [pc, #616]	; (8004178 <_printf_float+0x2dc>)
 8003f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f12:	f7fc fdf5 	bl	8000b00 <__aeabi_dcmple>
 8003f16:	bb48      	cbnz	r0, 8003f6c <_printf_float+0xd0>
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	4640      	mov	r0, r8
 8003f1e:	4649      	mov	r1, r9
 8003f20:	f7fc fde4 	bl	8000aec <__aeabi_dcmplt>
 8003f24:	b110      	cbz	r0, 8003f2c <_printf_float+0x90>
 8003f26:	232d      	movs	r3, #45	; 0x2d
 8003f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f2c:	4b93      	ldr	r3, [pc, #588]	; (800417c <_printf_float+0x2e0>)
 8003f2e:	4894      	ldr	r0, [pc, #592]	; (8004180 <_printf_float+0x2e4>)
 8003f30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003f34:	bf94      	ite	ls
 8003f36:	4698      	movls	r8, r3
 8003f38:	4680      	movhi	r8, r0
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	6123      	str	r3, [r4, #16]
 8003f3e:	9b05      	ldr	r3, [sp, #20]
 8003f40:	f023 0204 	bic.w	r2, r3, #4
 8003f44:	6022      	str	r2, [r4, #0]
 8003f46:	f04f 0900 	mov.w	r9, #0
 8003f4a:	9700      	str	r7, [sp, #0]
 8003f4c:	4633      	mov	r3, r6
 8003f4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003f50:	4621      	mov	r1, r4
 8003f52:	4628      	mov	r0, r5
 8003f54:	f000 f9d8 	bl	8004308 <_printf_common>
 8003f58:	3001      	adds	r0, #1
 8003f5a:	f040 8090 	bne.w	800407e <_printf_float+0x1e2>
 8003f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f62:	b00d      	add	sp, #52	; 0x34
 8003f64:	ecbd 8b02 	vpop	{d8}
 8003f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6c:	4642      	mov	r2, r8
 8003f6e:	464b      	mov	r3, r9
 8003f70:	4640      	mov	r0, r8
 8003f72:	4649      	mov	r1, r9
 8003f74:	f7fc fde2 	bl	8000b3c <__aeabi_dcmpun>
 8003f78:	b140      	cbz	r0, 8003f8c <_printf_float+0xf0>
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bfbc      	itt	lt
 8003f80:	232d      	movlt	r3, #45	; 0x2d
 8003f82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003f86:	487f      	ldr	r0, [pc, #508]	; (8004184 <_printf_float+0x2e8>)
 8003f88:	4b7f      	ldr	r3, [pc, #508]	; (8004188 <_printf_float+0x2ec>)
 8003f8a:	e7d1      	b.n	8003f30 <_printf_float+0x94>
 8003f8c:	6863      	ldr	r3, [r4, #4]
 8003f8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003f92:	9206      	str	r2, [sp, #24]
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	d13f      	bne.n	8004018 <_printf_float+0x17c>
 8003f98:	2306      	movs	r3, #6
 8003f9a:	6063      	str	r3, [r4, #4]
 8003f9c:	9b05      	ldr	r3, [sp, #20]
 8003f9e:	6861      	ldr	r1, [r4, #4]
 8003fa0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9303      	str	r3, [sp, #12]
 8003fa8:	ab0a      	add	r3, sp, #40	; 0x28
 8003faa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003fae:	ab09      	add	r3, sp, #36	; 0x24
 8003fb0:	ec49 8b10 	vmov	d0, r8, r9
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	6022      	str	r2, [r4, #0]
 8003fb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	f7ff fecd 	bl	8003d5c <__cvt>
 8003fc2:	9b06      	ldr	r3, [sp, #24]
 8003fc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fc6:	2b47      	cmp	r3, #71	; 0x47
 8003fc8:	4680      	mov	r8, r0
 8003fca:	d108      	bne.n	8003fde <_printf_float+0x142>
 8003fcc:	1cc8      	adds	r0, r1, #3
 8003fce:	db02      	blt.n	8003fd6 <_printf_float+0x13a>
 8003fd0:	6863      	ldr	r3, [r4, #4]
 8003fd2:	4299      	cmp	r1, r3
 8003fd4:	dd41      	ble.n	800405a <_printf_float+0x1be>
 8003fd6:	f1ab 0b02 	sub.w	fp, fp, #2
 8003fda:	fa5f fb8b 	uxtb.w	fp, fp
 8003fde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003fe2:	d820      	bhi.n	8004026 <_printf_float+0x18a>
 8003fe4:	3901      	subs	r1, #1
 8003fe6:	465a      	mov	r2, fp
 8003fe8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003fec:	9109      	str	r1, [sp, #36]	; 0x24
 8003fee:	f7ff ff17 	bl	8003e20 <__exponent>
 8003ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ff4:	1813      	adds	r3, r2, r0
 8003ff6:	2a01      	cmp	r2, #1
 8003ff8:	4681      	mov	r9, r0
 8003ffa:	6123      	str	r3, [r4, #16]
 8003ffc:	dc02      	bgt.n	8004004 <_printf_float+0x168>
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	07d2      	lsls	r2, r2, #31
 8004002:	d501      	bpl.n	8004008 <_printf_float+0x16c>
 8004004:	3301      	adds	r3, #1
 8004006:	6123      	str	r3, [r4, #16]
 8004008:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800400c:	2b00      	cmp	r3, #0
 800400e:	d09c      	beq.n	8003f4a <_printf_float+0xae>
 8004010:	232d      	movs	r3, #45	; 0x2d
 8004012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004016:	e798      	b.n	8003f4a <_printf_float+0xae>
 8004018:	9a06      	ldr	r2, [sp, #24]
 800401a:	2a47      	cmp	r2, #71	; 0x47
 800401c:	d1be      	bne.n	8003f9c <_printf_float+0x100>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1bc      	bne.n	8003f9c <_printf_float+0x100>
 8004022:	2301      	movs	r3, #1
 8004024:	e7b9      	b.n	8003f9a <_printf_float+0xfe>
 8004026:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800402a:	d118      	bne.n	800405e <_printf_float+0x1c2>
 800402c:	2900      	cmp	r1, #0
 800402e:	6863      	ldr	r3, [r4, #4]
 8004030:	dd0b      	ble.n	800404a <_printf_float+0x1ae>
 8004032:	6121      	str	r1, [r4, #16]
 8004034:	b913      	cbnz	r3, 800403c <_printf_float+0x1a0>
 8004036:	6822      	ldr	r2, [r4, #0]
 8004038:	07d0      	lsls	r0, r2, #31
 800403a:	d502      	bpl.n	8004042 <_printf_float+0x1a6>
 800403c:	3301      	adds	r3, #1
 800403e:	440b      	add	r3, r1
 8004040:	6123      	str	r3, [r4, #16]
 8004042:	65a1      	str	r1, [r4, #88]	; 0x58
 8004044:	f04f 0900 	mov.w	r9, #0
 8004048:	e7de      	b.n	8004008 <_printf_float+0x16c>
 800404a:	b913      	cbnz	r3, 8004052 <_printf_float+0x1b6>
 800404c:	6822      	ldr	r2, [r4, #0]
 800404e:	07d2      	lsls	r2, r2, #31
 8004050:	d501      	bpl.n	8004056 <_printf_float+0x1ba>
 8004052:	3302      	adds	r3, #2
 8004054:	e7f4      	b.n	8004040 <_printf_float+0x1a4>
 8004056:	2301      	movs	r3, #1
 8004058:	e7f2      	b.n	8004040 <_printf_float+0x1a4>
 800405a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800405e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004060:	4299      	cmp	r1, r3
 8004062:	db05      	blt.n	8004070 <_printf_float+0x1d4>
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	6121      	str	r1, [r4, #16]
 8004068:	07d8      	lsls	r0, r3, #31
 800406a:	d5ea      	bpl.n	8004042 <_printf_float+0x1a6>
 800406c:	1c4b      	adds	r3, r1, #1
 800406e:	e7e7      	b.n	8004040 <_printf_float+0x1a4>
 8004070:	2900      	cmp	r1, #0
 8004072:	bfd4      	ite	le
 8004074:	f1c1 0202 	rsble	r2, r1, #2
 8004078:	2201      	movgt	r2, #1
 800407a:	4413      	add	r3, r2
 800407c:	e7e0      	b.n	8004040 <_printf_float+0x1a4>
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	055a      	lsls	r2, r3, #21
 8004082:	d407      	bmi.n	8004094 <_printf_float+0x1f8>
 8004084:	6923      	ldr	r3, [r4, #16]
 8004086:	4642      	mov	r2, r8
 8004088:	4631      	mov	r1, r6
 800408a:	4628      	mov	r0, r5
 800408c:	47b8      	blx	r7
 800408e:	3001      	adds	r0, #1
 8004090:	d12c      	bne.n	80040ec <_printf_float+0x250>
 8004092:	e764      	b.n	8003f5e <_printf_float+0xc2>
 8004094:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004098:	f240 80e0 	bls.w	800425c <_printf_float+0x3c0>
 800409c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040a0:	2200      	movs	r2, #0
 80040a2:	2300      	movs	r3, #0
 80040a4:	f7fc fd18 	bl	8000ad8 <__aeabi_dcmpeq>
 80040a8:	2800      	cmp	r0, #0
 80040aa:	d034      	beq.n	8004116 <_printf_float+0x27a>
 80040ac:	4a37      	ldr	r2, [pc, #220]	; (800418c <_printf_float+0x2f0>)
 80040ae:	2301      	movs	r3, #1
 80040b0:	4631      	mov	r1, r6
 80040b2:	4628      	mov	r0, r5
 80040b4:	47b8      	blx	r7
 80040b6:	3001      	adds	r0, #1
 80040b8:	f43f af51 	beq.w	8003f5e <_printf_float+0xc2>
 80040bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040c0:	429a      	cmp	r2, r3
 80040c2:	db02      	blt.n	80040ca <_printf_float+0x22e>
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	07d8      	lsls	r0, r3, #31
 80040c8:	d510      	bpl.n	80040ec <_printf_float+0x250>
 80040ca:	ee18 3a10 	vmov	r3, s16
 80040ce:	4652      	mov	r2, sl
 80040d0:	4631      	mov	r1, r6
 80040d2:	4628      	mov	r0, r5
 80040d4:	47b8      	blx	r7
 80040d6:	3001      	adds	r0, #1
 80040d8:	f43f af41 	beq.w	8003f5e <_printf_float+0xc2>
 80040dc:	f04f 0800 	mov.w	r8, #0
 80040e0:	f104 091a 	add.w	r9, r4, #26
 80040e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040e6:	3b01      	subs	r3, #1
 80040e8:	4543      	cmp	r3, r8
 80040ea:	dc09      	bgt.n	8004100 <_printf_float+0x264>
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	079b      	lsls	r3, r3, #30
 80040f0:	f100 8105 	bmi.w	80042fe <_printf_float+0x462>
 80040f4:	68e0      	ldr	r0, [r4, #12]
 80040f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040f8:	4298      	cmp	r0, r3
 80040fa:	bfb8      	it	lt
 80040fc:	4618      	movlt	r0, r3
 80040fe:	e730      	b.n	8003f62 <_printf_float+0xc6>
 8004100:	2301      	movs	r3, #1
 8004102:	464a      	mov	r2, r9
 8004104:	4631      	mov	r1, r6
 8004106:	4628      	mov	r0, r5
 8004108:	47b8      	blx	r7
 800410a:	3001      	adds	r0, #1
 800410c:	f43f af27 	beq.w	8003f5e <_printf_float+0xc2>
 8004110:	f108 0801 	add.w	r8, r8, #1
 8004114:	e7e6      	b.n	80040e4 <_printf_float+0x248>
 8004116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004118:	2b00      	cmp	r3, #0
 800411a:	dc39      	bgt.n	8004190 <_printf_float+0x2f4>
 800411c:	4a1b      	ldr	r2, [pc, #108]	; (800418c <_printf_float+0x2f0>)
 800411e:	2301      	movs	r3, #1
 8004120:	4631      	mov	r1, r6
 8004122:	4628      	mov	r0, r5
 8004124:	47b8      	blx	r7
 8004126:	3001      	adds	r0, #1
 8004128:	f43f af19 	beq.w	8003f5e <_printf_float+0xc2>
 800412c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004130:	4313      	orrs	r3, r2
 8004132:	d102      	bne.n	800413a <_printf_float+0x29e>
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	07d9      	lsls	r1, r3, #31
 8004138:	d5d8      	bpl.n	80040ec <_printf_float+0x250>
 800413a:	ee18 3a10 	vmov	r3, s16
 800413e:	4652      	mov	r2, sl
 8004140:	4631      	mov	r1, r6
 8004142:	4628      	mov	r0, r5
 8004144:	47b8      	blx	r7
 8004146:	3001      	adds	r0, #1
 8004148:	f43f af09 	beq.w	8003f5e <_printf_float+0xc2>
 800414c:	f04f 0900 	mov.w	r9, #0
 8004150:	f104 0a1a 	add.w	sl, r4, #26
 8004154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004156:	425b      	negs	r3, r3
 8004158:	454b      	cmp	r3, r9
 800415a:	dc01      	bgt.n	8004160 <_printf_float+0x2c4>
 800415c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800415e:	e792      	b.n	8004086 <_printf_float+0x1ea>
 8004160:	2301      	movs	r3, #1
 8004162:	4652      	mov	r2, sl
 8004164:	4631      	mov	r1, r6
 8004166:	4628      	mov	r0, r5
 8004168:	47b8      	blx	r7
 800416a:	3001      	adds	r0, #1
 800416c:	f43f aef7 	beq.w	8003f5e <_printf_float+0xc2>
 8004170:	f109 0901 	add.w	r9, r9, #1
 8004174:	e7ee      	b.n	8004154 <_printf_float+0x2b8>
 8004176:	bf00      	nop
 8004178:	7fefffff 	.word	0x7fefffff
 800417c:	08008068 	.word	0x08008068
 8004180:	0800806c 	.word	0x0800806c
 8004184:	08008074 	.word	0x08008074
 8004188:	08008070 	.word	0x08008070
 800418c:	08008078 	.word	0x08008078
 8004190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004194:	429a      	cmp	r2, r3
 8004196:	bfa8      	it	ge
 8004198:	461a      	movge	r2, r3
 800419a:	2a00      	cmp	r2, #0
 800419c:	4691      	mov	r9, r2
 800419e:	dc37      	bgt.n	8004210 <_printf_float+0x374>
 80041a0:	f04f 0b00 	mov.w	fp, #0
 80041a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041a8:	f104 021a 	add.w	r2, r4, #26
 80041ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041ae:	9305      	str	r3, [sp, #20]
 80041b0:	eba3 0309 	sub.w	r3, r3, r9
 80041b4:	455b      	cmp	r3, fp
 80041b6:	dc33      	bgt.n	8004220 <_printf_float+0x384>
 80041b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041bc:	429a      	cmp	r2, r3
 80041be:	db3b      	blt.n	8004238 <_printf_float+0x39c>
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	07da      	lsls	r2, r3, #31
 80041c4:	d438      	bmi.n	8004238 <_printf_float+0x39c>
 80041c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041c8:	9a05      	ldr	r2, [sp, #20]
 80041ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041cc:	1a9a      	subs	r2, r3, r2
 80041ce:	eba3 0901 	sub.w	r9, r3, r1
 80041d2:	4591      	cmp	r9, r2
 80041d4:	bfa8      	it	ge
 80041d6:	4691      	movge	r9, r2
 80041d8:	f1b9 0f00 	cmp.w	r9, #0
 80041dc:	dc35      	bgt.n	800424a <_printf_float+0x3ae>
 80041de:	f04f 0800 	mov.w	r8, #0
 80041e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041e6:	f104 0a1a 	add.w	sl, r4, #26
 80041ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	eba3 0309 	sub.w	r3, r3, r9
 80041f4:	4543      	cmp	r3, r8
 80041f6:	f77f af79 	ble.w	80040ec <_printf_float+0x250>
 80041fa:	2301      	movs	r3, #1
 80041fc:	4652      	mov	r2, sl
 80041fe:	4631      	mov	r1, r6
 8004200:	4628      	mov	r0, r5
 8004202:	47b8      	blx	r7
 8004204:	3001      	adds	r0, #1
 8004206:	f43f aeaa 	beq.w	8003f5e <_printf_float+0xc2>
 800420a:	f108 0801 	add.w	r8, r8, #1
 800420e:	e7ec      	b.n	80041ea <_printf_float+0x34e>
 8004210:	4613      	mov	r3, r2
 8004212:	4631      	mov	r1, r6
 8004214:	4642      	mov	r2, r8
 8004216:	4628      	mov	r0, r5
 8004218:	47b8      	blx	r7
 800421a:	3001      	adds	r0, #1
 800421c:	d1c0      	bne.n	80041a0 <_printf_float+0x304>
 800421e:	e69e      	b.n	8003f5e <_printf_float+0xc2>
 8004220:	2301      	movs	r3, #1
 8004222:	4631      	mov	r1, r6
 8004224:	4628      	mov	r0, r5
 8004226:	9205      	str	r2, [sp, #20]
 8004228:	47b8      	blx	r7
 800422a:	3001      	adds	r0, #1
 800422c:	f43f ae97 	beq.w	8003f5e <_printf_float+0xc2>
 8004230:	9a05      	ldr	r2, [sp, #20]
 8004232:	f10b 0b01 	add.w	fp, fp, #1
 8004236:	e7b9      	b.n	80041ac <_printf_float+0x310>
 8004238:	ee18 3a10 	vmov	r3, s16
 800423c:	4652      	mov	r2, sl
 800423e:	4631      	mov	r1, r6
 8004240:	4628      	mov	r0, r5
 8004242:	47b8      	blx	r7
 8004244:	3001      	adds	r0, #1
 8004246:	d1be      	bne.n	80041c6 <_printf_float+0x32a>
 8004248:	e689      	b.n	8003f5e <_printf_float+0xc2>
 800424a:	9a05      	ldr	r2, [sp, #20]
 800424c:	464b      	mov	r3, r9
 800424e:	4442      	add	r2, r8
 8004250:	4631      	mov	r1, r6
 8004252:	4628      	mov	r0, r5
 8004254:	47b8      	blx	r7
 8004256:	3001      	adds	r0, #1
 8004258:	d1c1      	bne.n	80041de <_printf_float+0x342>
 800425a:	e680      	b.n	8003f5e <_printf_float+0xc2>
 800425c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800425e:	2a01      	cmp	r2, #1
 8004260:	dc01      	bgt.n	8004266 <_printf_float+0x3ca>
 8004262:	07db      	lsls	r3, r3, #31
 8004264:	d538      	bpl.n	80042d8 <_printf_float+0x43c>
 8004266:	2301      	movs	r3, #1
 8004268:	4642      	mov	r2, r8
 800426a:	4631      	mov	r1, r6
 800426c:	4628      	mov	r0, r5
 800426e:	47b8      	blx	r7
 8004270:	3001      	adds	r0, #1
 8004272:	f43f ae74 	beq.w	8003f5e <_printf_float+0xc2>
 8004276:	ee18 3a10 	vmov	r3, s16
 800427a:	4652      	mov	r2, sl
 800427c:	4631      	mov	r1, r6
 800427e:	4628      	mov	r0, r5
 8004280:	47b8      	blx	r7
 8004282:	3001      	adds	r0, #1
 8004284:	f43f ae6b 	beq.w	8003f5e <_printf_float+0xc2>
 8004288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800428c:	2200      	movs	r2, #0
 800428e:	2300      	movs	r3, #0
 8004290:	f7fc fc22 	bl	8000ad8 <__aeabi_dcmpeq>
 8004294:	b9d8      	cbnz	r0, 80042ce <_printf_float+0x432>
 8004296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004298:	f108 0201 	add.w	r2, r8, #1
 800429c:	3b01      	subs	r3, #1
 800429e:	4631      	mov	r1, r6
 80042a0:	4628      	mov	r0, r5
 80042a2:	47b8      	blx	r7
 80042a4:	3001      	adds	r0, #1
 80042a6:	d10e      	bne.n	80042c6 <_printf_float+0x42a>
 80042a8:	e659      	b.n	8003f5e <_printf_float+0xc2>
 80042aa:	2301      	movs	r3, #1
 80042ac:	4652      	mov	r2, sl
 80042ae:	4631      	mov	r1, r6
 80042b0:	4628      	mov	r0, r5
 80042b2:	47b8      	blx	r7
 80042b4:	3001      	adds	r0, #1
 80042b6:	f43f ae52 	beq.w	8003f5e <_printf_float+0xc2>
 80042ba:	f108 0801 	add.w	r8, r8, #1
 80042be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042c0:	3b01      	subs	r3, #1
 80042c2:	4543      	cmp	r3, r8
 80042c4:	dcf1      	bgt.n	80042aa <_printf_float+0x40e>
 80042c6:	464b      	mov	r3, r9
 80042c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80042cc:	e6dc      	b.n	8004088 <_printf_float+0x1ec>
 80042ce:	f04f 0800 	mov.w	r8, #0
 80042d2:	f104 0a1a 	add.w	sl, r4, #26
 80042d6:	e7f2      	b.n	80042be <_printf_float+0x422>
 80042d8:	2301      	movs	r3, #1
 80042da:	4642      	mov	r2, r8
 80042dc:	e7df      	b.n	800429e <_printf_float+0x402>
 80042de:	2301      	movs	r3, #1
 80042e0:	464a      	mov	r2, r9
 80042e2:	4631      	mov	r1, r6
 80042e4:	4628      	mov	r0, r5
 80042e6:	47b8      	blx	r7
 80042e8:	3001      	adds	r0, #1
 80042ea:	f43f ae38 	beq.w	8003f5e <_printf_float+0xc2>
 80042ee:	f108 0801 	add.w	r8, r8, #1
 80042f2:	68e3      	ldr	r3, [r4, #12]
 80042f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042f6:	1a5b      	subs	r3, r3, r1
 80042f8:	4543      	cmp	r3, r8
 80042fa:	dcf0      	bgt.n	80042de <_printf_float+0x442>
 80042fc:	e6fa      	b.n	80040f4 <_printf_float+0x258>
 80042fe:	f04f 0800 	mov.w	r8, #0
 8004302:	f104 0919 	add.w	r9, r4, #25
 8004306:	e7f4      	b.n	80042f2 <_printf_float+0x456>

08004308 <_printf_common>:
 8004308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800430c:	4616      	mov	r6, r2
 800430e:	4699      	mov	r9, r3
 8004310:	688a      	ldr	r2, [r1, #8]
 8004312:	690b      	ldr	r3, [r1, #16]
 8004314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004318:	4293      	cmp	r3, r2
 800431a:	bfb8      	it	lt
 800431c:	4613      	movlt	r3, r2
 800431e:	6033      	str	r3, [r6, #0]
 8004320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004324:	4607      	mov	r7, r0
 8004326:	460c      	mov	r4, r1
 8004328:	b10a      	cbz	r2, 800432e <_printf_common+0x26>
 800432a:	3301      	adds	r3, #1
 800432c:	6033      	str	r3, [r6, #0]
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	0699      	lsls	r1, r3, #26
 8004332:	bf42      	ittt	mi
 8004334:	6833      	ldrmi	r3, [r6, #0]
 8004336:	3302      	addmi	r3, #2
 8004338:	6033      	strmi	r3, [r6, #0]
 800433a:	6825      	ldr	r5, [r4, #0]
 800433c:	f015 0506 	ands.w	r5, r5, #6
 8004340:	d106      	bne.n	8004350 <_printf_common+0x48>
 8004342:	f104 0a19 	add.w	sl, r4, #25
 8004346:	68e3      	ldr	r3, [r4, #12]
 8004348:	6832      	ldr	r2, [r6, #0]
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	42ab      	cmp	r3, r5
 800434e:	dc26      	bgt.n	800439e <_printf_common+0x96>
 8004350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004354:	1e13      	subs	r3, r2, #0
 8004356:	6822      	ldr	r2, [r4, #0]
 8004358:	bf18      	it	ne
 800435a:	2301      	movne	r3, #1
 800435c:	0692      	lsls	r2, r2, #26
 800435e:	d42b      	bmi.n	80043b8 <_printf_common+0xb0>
 8004360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004364:	4649      	mov	r1, r9
 8004366:	4638      	mov	r0, r7
 8004368:	47c0      	blx	r8
 800436a:	3001      	adds	r0, #1
 800436c:	d01e      	beq.n	80043ac <_printf_common+0xa4>
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	68e5      	ldr	r5, [r4, #12]
 8004372:	6832      	ldr	r2, [r6, #0]
 8004374:	f003 0306 	and.w	r3, r3, #6
 8004378:	2b04      	cmp	r3, #4
 800437a:	bf08      	it	eq
 800437c:	1aad      	subeq	r5, r5, r2
 800437e:	68a3      	ldr	r3, [r4, #8]
 8004380:	6922      	ldr	r2, [r4, #16]
 8004382:	bf0c      	ite	eq
 8004384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004388:	2500      	movne	r5, #0
 800438a:	4293      	cmp	r3, r2
 800438c:	bfc4      	itt	gt
 800438e:	1a9b      	subgt	r3, r3, r2
 8004390:	18ed      	addgt	r5, r5, r3
 8004392:	2600      	movs	r6, #0
 8004394:	341a      	adds	r4, #26
 8004396:	42b5      	cmp	r5, r6
 8004398:	d11a      	bne.n	80043d0 <_printf_common+0xc8>
 800439a:	2000      	movs	r0, #0
 800439c:	e008      	b.n	80043b0 <_printf_common+0xa8>
 800439e:	2301      	movs	r3, #1
 80043a0:	4652      	mov	r2, sl
 80043a2:	4649      	mov	r1, r9
 80043a4:	4638      	mov	r0, r7
 80043a6:	47c0      	blx	r8
 80043a8:	3001      	adds	r0, #1
 80043aa:	d103      	bne.n	80043b4 <_printf_common+0xac>
 80043ac:	f04f 30ff 	mov.w	r0, #4294967295
 80043b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b4:	3501      	adds	r5, #1
 80043b6:	e7c6      	b.n	8004346 <_printf_common+0x3e>
 80043b8:	18e1      	adds	r1, r4, r3
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	2030      	movs	r0, #48	; 0x30
 80043be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043c2:	4422      	add	r2, r4
 80043c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043cc:	3302      	adds	r3, #2
 80043ce:	e7c7      	b.n	8004360 <_printf_common+0x58>
 80043d0:	2301      	movs	r3, #1
 80043d2:	4622      	mov	r2, r4
 80043d4:	4649      	mov	r1, r9
 80043d6:	4638      	mov	r0, r7
 80043d8:	47c0      	blx	r8
 80043da:	3001      	adds	r0, #1
 80043dc:	d0e6      	beq.n	80043ac <_printf_common+0xa4>
 80043de:	3601      	adds	r6, #1
 80043e0:	e7d9      	b.n	8004396 <_printf_common+0x8e>
	...

080043e4 <_printf_i>:
 80043e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043e8:	7e0f      	ldrb	r7, [r1, #24]
 80043ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043ec:	2f78      	cmp	r7, #120	; 0x78
 80043ee:	4691      	mov	r9, r2
 80043f0:	4680      	mov	r8, r0
 80043f2:	460c      	mov	r4, r1
 80043f4:	469a      	mov	sl, r3
 80043f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043fa:	d807      	bhi.n	800440c <_printf_i+0x28>
 80043fc:	2f62      	cmp	r7, #98	; 0x62
 80043fe:	d80a      	bhi.n	8004416 <_printf_i+0x32>
 8004400:	2f00      	cmp	r7, #0
 8004402:	f000 80d8 	beq.w	80045b6 <_printf_i+0x1d2>
 8004406:	2f58      	cmp	r7, #88	; 0x58
 8004408:	f000 80a3 	beq.w	8004552 <_printf_i+0x16e>
 800440c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004414:	e03a      	b.n	800448c <_printf_i+0xa8>
 8004416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800441a:	2b15      	cmp	r3, #21
 800441c:	d8f6      	bhi.n	800440c <_printf_i+0x28>
 800441e:	a101      	add	r1, pc, #4	; (adr r1, 8004424 <_printf_i+0x40>)
 8004420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004424:	0800447d 	.word	0x0800447d
 8004428:	08004491 	.word	0x08004491
 800442c:	0800440d 	.word	0x0800440d
 8004430:	0800440d 	.word	0x0800440d
 8004434:	0800440d 	.word	0x0800440d
 8004438:	0800440d 	.word	0x0800440d
 800443c:	08004491 	.word	0x08004491
 8004440:	0800440d 	.word	0x0800440d
 8004444:	0800440d 	.word	0x0800440d
 8004448:	0800440d 	.word	0x0800440d
 800444c:	0800440d 	.word	0x0800440d
 8004450:	0800459d 	.word	0x0800459d
 8004454:	080044c1 	.word	0x080044c1
 8004458:	0800457f 	.word	0x0800457f
 800445c:	0800440d 	.word	0x0800440d
 8004460:	0800440d 	.word	0x0800440d
 8004464:	080045bf 	.word	0x080045bf
 8004468:	0800440d 	.word	0x0800440d
 800446c:	080044c1 	.word	0x080044c1
 8004470:	0800440d 	.word	0x0800440d
 8004474:	0800440d 	.word	0x0800440d
 8004478:	08004587 	.word	0x08004587
 800447c:	682b      	ldr	r3, [r5, #0]
 800447e:	1d1a      	adds	r2, r3, #4
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	602a      	str	r2, [r5, #0]
 8004484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800448c:	2301      	movs	r3, #1
 800448e:	e0a3      	b.n	80045d8 <_printf_i+0x1f4>
 8004490:	6820      	ldr	r0, [r4, #0]
 8004492:	6829      	ldr	r1, [r5, #0]
 8004494:	0606      	lsls	r6, r0, #24
 8004496:	f101 0304 	add.w	r3, r1, #4
 800449a:	d50a      	bpl.n	80044b2 <_printf_i+0xce>
 800449c:	680e      	ldr	r6, [r1, #0]
 800449e:	602b      	str	r3, [r5, #0]
 80044a0:	2e00      	cmp	r6, #0
 80044a2:	da03      	bge.n	80044ac <_printf_i+0xc8>
 80044a4:	232d      	movs	r3, #45	; 0x2d
 80044a6:	4276      	negs	r6, r6
 80044a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ac:	485e      	ldr	r0, [pc, #376]	; (8004628 <_printf_i+0x244>)
 80044ae:	230a      	movs	r3, #10
 80044b0:	e019      	b.n	80044e6 <_printf_i+0x102>
 80044b2:	680e      	ldr	r6, [r1, #0]
 80044b4:	602b      	str	r3, [r5, #0]
 80044b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044ba:	bf18      	it	ne
 80044bc:	b236      	sxthne	r6, r6
 80044be:	e7ef      	b.n	80044a0 <_printf_i+0xbc>
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	6820      	ldr	r0, [r4, #0]
 80044c4:	1d19      	adds	r1, r3, #4
 80044c6:	6029      	str	r1, [r5, #0]
 80044c8:	0601      	lsls	r1, r0, #24
 80044ca:	d501      	bpl.n	80044d0 <_printf_i+0xec>
 80044cc:	681e      	ldr	r6, [r3, #0]
 80044ce:	e002      	b.n	80044d6 <_printf_i+0xf2>
 80044d0:	0646      	lsls	r6, r0, #25
 80044d2:	d5fb      	bpl.n	80044cc <_printf_i+0xe8>
 80044d4:	881e      	ldrh	r6, [r3, #0]
 80044d6:	4854      	ldr	r0, [pc, #336]	; (8004628 <_printf_i+0x244>)
 80044d8:	2f6f      	cmp	r7, #111	; 0x6f
 80044da:	bf0c      	ite	eq
 80044dc:	2308      	moveq	r3, #8
 80044de:	230a      	movne	r3, #10
 80044e0:	2100      	movs	r1, #0
 80044e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044e6:	6865      	ldr	r5, [r4, #4]
 80044e8:	60a5      	str	r5, [r4, #8]
 80044ea:	2d00      	cmp	r5, #0
 80044ec:	bfa2      	ittt	ge
 80044ee:	6821      	ldrge	r1, [r4, #0]
 80044f0:	f021 0104 	bicge.w	r1, r1, #4
 80044f4:	6021      	strge	r1, [r4, #0]
 80044f6:	b90e      	cbnz	r6, 80044fc <_printf_i+0x118>
 80044f8:	2d00      	cmp	r5, #0
 80044fa:	d04d      	beq.n	8004598 <_printf_i+0x1b4>
 80044fc:	4615      	mov	r5, r2
 80044fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004502:	fb03 6711 	mls	r7, r3, r1, r6
 8004506:	5dc7      	ldrb	r7, [r0, r7]
 8004508:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800450c:	4637      	mov	r7, r6
 800450e:	42bb      	cmp	r3, r7
 8004510:	460e      	mov	r6, r1
 8004512:	d9f4      	bls.n	80044fe <_printf_i+0x11a>
 8004514:	2b08      	cmp	r3, #8
 8004516:	d10b      	bne.n	8004530 <_printf_i+0x14c>
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	07de      	lsls	r6, r3, #31
 800451c:	d508      	bpl.n	8004530 <_printf_i+0x14c>
 800451e:	6923      	ldr	r3, [r4, #16]
 8004520:	6861      	ldr	r1, [r4, #4]
 8004522:	4299      	cmp	r1, r3
 8004524:	bfde      	ittt	le
 8004526:	2330      	movle	r3, #48	; 0x30
 8004528:	f805 3c01 	strble.w	r3, [r5, #-1]
 800452c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004530:	1b52      	subs	r2, r2, r5
 8004532:	6122      	str	r2, [r4, #16]
 8004534:	f8cd a000 	str.w	sl, [sp]
 8004538:	464b      	mov	r3, r9
 800453a:	aa03      	add	r2, sp, #12
 800453c:	4621      	mov	r1, r4
 800453e:	4640      	mov	r0, r8
 8004540:	f7ff fee2 	bl	8004308 <_printf_common>
 8004544:	3001      	adds	r0, #1
 8004546:	d14c      	bne.n	80045e2 <_printf_i+0x1fe>
 8004548:	f04f 30ff 	mov.w	r0, #4294967295
 800454c:	b004      	add	sp, #16
 800454e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004552:	4835      	ldr	r0, [pc, #212]	; (8004628 <_printf_i+0x244>)
 8004554:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004558:	6829      	ldr	r1, [r5, #0]
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004560:	6029      	str	r1, [r5, #0]
 8004562:	061d      	lsls	r5, r3, #24
 8004564:	d514      	bpl.n	8004590 <_printf_i+0x1ac>
 8004566:	07df      	lsls	r7, r3, #31
 8004568:	bf44      	itt	mi
 800456a:	f043 0320 	orrmi.w	r3, r3, #32
 800456e:	6023      	strmi	r3, [r4, #0]
 8004570:	b91e      	cbnz	r6, 800457a <_printf_i+0x196>
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	f023 0320 	bic.w	r3, r3, #32
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	2310      	movs	r3, #16
 800457c:	e7b0      	b.n	80044e0 <_printf_i+0xfc>
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	f043 0320 	orr.w	r3, r3, #32
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	2378      	movs	r3, #120	; 0x78
 8004588:	4828      	ldr	r0, [pc, #160]	; (800462c <_printf_i+0x248>)
 800458a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800458e:	e7e3      	b.n	8004558 <_printf_i+0x174>
 8004590:	0659      	lsls	r1, r3, #25
 8004592:	bf48      	it	mi
 8004594:	b2b6      	uxthmi	r6, r6
 8004596:	e7e6      	b.n	8004566 <_printf_i+0x182>
 8004598:	4615      	mov	r5, r2
 800459a:	e7bb      	b.n	8004514 <_printf_i+0x130>
 800459c:	682b      	ldr	r3, [r5, #0]
 800459e:	6826      	ldr	r6, [r4, #0]
 80045a0:	6961      	ldr	r1, [r4, #20]
 80045a2:	1d18      	adds	r0, r3, #4
 80045a4:	6028      	str	r0, [r5, #0]
 80045a6:	0635      	lsls	r5, r6, #24
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	d501      	bpl.n	80045b0 <_printf_i+0x1cc>
 80045ac:	6019      	str	r1, [r3, #0]
 80045ae:	e002      	b.n	80045b6 <_printf_i+0x1d2>
 80045b0:	0670      	lsls	r0, r6, #25
 80045b2:	d5fb      	bpl.n	80045ac <_printf_i+0x1c8>
 80045b4:	8019      	strh	r1, [r3, #0]
 80045b6:	2300      	movs	r3, #0
 80045b8:	6123      	str	r3, [r4, #16]
 80045ba:	4615      	mov	r5, r2
 80045bc:	e7ba      	b.n	8004534 <_printf_i+0x150>
 80045be:	682b      	ldr	r3, [r5, #0]
 80045c0:	1d1a      	adds	r2, r3, #4
 80045c2:	602a      	str	r2, [r5, #0]
 80045c4:	681d      	ldr	r5, [r3, #0]
 80045c6:	6862      	ldr	r2, [r4, #4]
 80045c8:	2100      	movs	r1, #0
 80045ca:	4628      	mov	r0, r5
 80045cc:	f7fb fe10 	bl	80001f0 <memchr>
 80045d0:	b108      	cbz	r0, 80045d6 <_printf_i+0x1f2>
 80045d2:	1b40      	subs	r0, r0, r5
 80045d4:	6060      	str	r0, [r4, #4]
 80045d6:	6863      	ldr	r3, [r4, #4]
 80045d8:	6123      	str	r3, [r4, #16]
 80045da:	2300      	movs	r3, #0
 80045dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045e0:	e7a8      	b.n	8004534 <_printf_i+0x150>
 80045e2:	6923      	ldr	r3, [r4, #16]
 80045e4:	462a      	mov	r2, r5
 80045e6:	4649      	mov	r1, r9
 80045e8:	4640      	mov	r0, r8
 80045ea:	47d0      	blx	sl
 80045ec:	3001      	adds	r0, #1
 80045ee:	d0ab      	beq.n	8004548 <_printf_i+0x164>
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	079b      	lsls	r3, r3, #30
 80045f4:	d413      	bmi.n	800461e <_printf_i+0x23a>
 80045f6:	68e0      	ldr	r0, [r4, #12]
 80045f8:	9b03      	ldr	r3, [sp, #12]
 80045fa:	4298      	cmp	r0, r3
 80045fc:	bfb8      	it	lt
 80045fe:	4618      	movlt	r0, r3
 8004600:	e7a4      	b.n	800454c <_printf_i+0x168>
 8004602:	2301      	movs	r3, #1
 8004604:	4632      	mov	r2, r6
 8004606:	4649      	mov	r1, r9
 8004608:	4640      	mov	r0, r8
 800460a:	47d0      	blx	sl
 800460c:	3001      	adds	r0, #1
 800460e:	d09b      	beq.n	8004548 <_printf_i+0x164>
 8004610:	3501      	adds	r5, #1
 8004612:	68e3      	ldr	r3, [r4, #12]
 8004614:	9903      	ldr	r1, [sp, #12]
 8004616:	1a5b      	subs	r3, r3, r1
 8004618:	42ab      	cmp	r3, r5
 800461a:	dcf2      	bgt.n	8004602 <_printf_i+0x21e>
 800461c:	e7eb      	b.n	80045f6 <_printf_i+0x212>
 800461e:	2500      	movs	r5, #0
 8004620:	f104 0619 	add.w	r6, r4, #25
 8004624:	e7f5      	b.n	8004612 <_printf_i+0x22e>
 8004626:	bf00      	nop
 8004628:	0800807a 	.word	0x0800807a
 800462c:	0800808b 	.word	0x0800808b

08004630 <_sbrk_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4d06      	ldr	r5, [pc, #24]	; (800464c <_sbrk_r+0x1c>)
 8004634:	2300      	movs	r3, #0
 8004636:	4604      	mov	r4, r0
 8004638:	4608      	mov	r0, r1
 800463a:	602b      	str	r3, [r5, #0]
 800463c:	f7fd fdf6 	bl	800222c <_sbrk>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	d102      	bne.n	800464a <_sbrk_r+0x1a>
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	b103      	cbz	r3, 800464a <_sbrk_r+0x1a>
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	bd38      	pop	{r3, r4, r5, pc}
 800464c:	20000254 	.word	0x20000254

08004650 <siprintf>:
 8004650:	b40e      	push	{r1, r2, r3}
 8004652:	b500      	push	{lr}
 8004654:	b09c      	sub	sp, #112	; 0x70
 8004656:	ab1d      	add	r3, sp, #116	; 0x74
 8004658:	9002      	str	r0, [sp, #8]
 800465a:	9006      	str	r0, [sp, #24]
 800465c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004660:	4809      	ldr	r0, [pc, #36]	; (8004688 <siprintf+0x38>)
 8004662:	9107      	str	r1, [sp, #28]
 8004664:	9104      	str	r1, [sp, #16]
 8004666:	4909      	ldr	r1, [pc, #36]	; (800468c <siprintf+0x3c>)
 8004668:	f853 2b04 	ldr.w	r2, [r3], #4
 800466c:	9105      	str	r1, [sp, #20]
 800466e:	6800      	ldr	r0, [r0, #0]
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	a902      	add	r1, sp, #8
 8004674:	f001 fa9a 	bl	8005bac <_svfiprintf_r>
 8004678:	9b02      	ldr	r3, [sp, #8]
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	b01c      	add	sp, #112	; 0x70
 8004680:	f85d eb04 	ldr.w	lr, [sp], #4
 8004684:	b003      	add	sp, #12
 8004686:	4770      	bx	lr
 8004688:	20000020 	.word	0x20000020
 800468c:	ffff0208 	.word	0xffff0208

08004690 <quorem>:
 8004690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004694:	6903      	ldr	r3, [r0, #16]
 8004696:	690c      	ldr	r4, [r1, #16]
 8004698:	42a3      	cmp	r3, r4
 800469a:	4607      	mov	r7, r0
 800469c:	f2c0 8081 	blt.w	80047a2 <quorem+0x112>
 80046a0:	3c01      	subs	r4, #1
 80046a2:	f101 0814 	add.w	r8, r1, #20
 80046a6:	f100 0514 	add.w	r5, r0, #20
 80046aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046ae:	9301      	str	r3, [sp, #4]
 80046b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80046b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046b8:	3301      	adds	r3, #1
 80046ba:	429a      	cmp	r2, r3
 80046bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80046c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80046c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80046c8:	d331      	bcc.n	800472e <quorem+0x9e>
 80046ca:	f04f 0e00 	mov.w	lr, #0
 80046ce:	4640      	mov	r0, r8
 80046d0:	46ac      	mov	ip, r5
 80046d2:	46f2      	mov	sl, lr
 80046d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80046d8:	b293      	uxth	r3, r2
 80046da:	fb06 e303 	mla	r3, r6, r3, lr
 80046de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	ebaa 0303 	sub.w	r3, sl, r3
 80046e8:	f8dc a000 	ldr.w	sl, [ip]
 80046ec:	0c12      	lsrs	r2, r2, #16
 80046ee:	fa13 f38a 	uxtah	r3, r3, sl
 80046f2:	fb06 e202 	mla	r2, r6, r2, lr
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	9b00      	ldr	r3, [sp, #0]
 80046fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80046fe:	b292      	uxth	r2, r2
 8004700:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004704:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004708:	f8bd 3000 	ldrh.w	r3, [sp]
 800470c:	4581      	cmp	r9, r0
 800470e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004712:	f84c 3b04 	str.w	r3, [ip], #4
 8004716:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800471a:	d2db      	bcs.n	80046d4 <quorem+0x44>
 800471c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004720:	b92b      	cbnz	r3, 800472e <quorem+0x9e>
 8004722:	9b01      	ldr	r3, [sp, #4]
 8004724:	3b04      	subs	r3, #4
 8004726:	429d      	cmp	r5, r3
 8004728:	461a      	mov	r2, r3
 800472a:	d32e      	bcc.n	800478a <quorem+0xfa>
 800472c:	613c      	str	r4, [r7, #16]
 800472e:	4638      	mov	r0, r7
 8004730:	f001 f8c8 	bl	80058c4 <__mcmp>
 8004734:	2800      	cmp	r0, #0
 8004736:	db24      	blt.n	8004782 <quorem+0xf2>
 8004738:	3601      	adds	r6, #1
 800473a:	4628      	mov	r0, r5
 800473c:	f04f 0c00 	mov.w	ip, #0
 8004740:	f858 2b04 	ldr.w	r2, [r8], #4
 8004744:	f8d0 e000 	ldr.w	lr, [r0]
 8004748:	b293      	uxth	r3, r2
 800474a:	ebac 0303 	sub.w	r3, ip, r3
 800474e:	0c12      	lsrs	r2, r2, #16
 8004750:	fa13 f38e 	uxtah	r3, r3, lr
 8004754:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004758:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800475c:	b29b      	uxth	r3, r3
 800475e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004762:	45c1      	cmp	r9, r8
 8004764:	f840 3b04 	str.w	r3, [r0], #4
 8004768:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800476c:	d2e8      	bcs.n	8004740 <quorem+0xb0>
 800476e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004772:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004776:	b922      	cbnz	r2, 8004782 <quorem+0xf2>
 8004778:	3b04      	subs	r3, #4
 800477a:	429d      	cmp	r5, r3
 800477c:	461a      	mov	r2, r3
 800477e:	d30a      	bcc.n	8004796 <quorem+0x106>
 8004780:	613c      	str	r4, [r7, #16]
 8004782:	4630      	mov	r0, r6
 8004784:	b003      	add	sp, #12
 8004786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	3b04      	subs	r3, #4
 800478e:	2a00      	cmp	r2, #0
 8004790:	d1cc      	bne.n	800472c <quorem+0x9c>
 8004792:	3c01      	subs	r4, #1
 8004794:	e7c7      	b.n	8004726 <quorem+0x96>
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	3b04      	subs	r3, #4
 800479a:	2a00      	cmp	r2, #0
 800479c:	d1f0      	bne.n	8004780 <quorem+0xf0>
 800479e:	3c01      	subs	r4, #1
 80047a0:	e7eb      	b.n	800477a <quorem+0xea>
 80047a2:	2000      	movs	r0, #0
 80047a4:	e7ee      	b.n	8004784 <quorem+0xf4>
	...

080047a8 <_dtoa_r>:
 80047a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ac:	ed2d 8b04 	vpush	{d8-d9}
 80047b0:	ec57 6b10 	vmov	r6, r7, d0
 80047b4:	b093      	sub	sp, #76	; 0x4c
 80047b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80047b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80047bc:	9106      	str	r1, [sp, #24]
 80047be:	ee10 aa10 	vmov	sl, s0
 80047c2:	4604      	mov	r4, r0
 80047c4:	9209      	str	r2, [sp, #36]	; 0x24
 80047c6:	930c      	str	r3, [sp, #48]	; 0x30
 80047c8:	46bb      	mov	fp, r7
 80047ca:	b975      	cbnz	r5, 80047ea <_dtoa_r+0x42>
 80047cc:	2010      	movs	r0, #16
 80047ce:	f7ff f9d5 	bl	8003b7c <malloc>
 80047d2:	4602      	mov	r2, r0
 80047d4:	6260      	str	r0, [r4, #36]	; 0x24
 80047d6:	b920      	cbnz	r0, 80047e2 <_dtoa_r+0x3a>
 80047d8:	4ba7      	ldr	r3, [pc, #668]	; (8004a78 <_dtoa_r+0x2d0>)
 80047da:	21ea      	movs	r1, #234	; 0xea
 80047dc:	48a7      	ldr	r0, [pc, #668]	; (8004a7c <_dtoa_r+0x2d4>)
 80047de:	f001 fae5 	bl	8005dac <__assert_func>
 80047e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80047e6:	6005      	str	r5, [r0, #0]
 80047e8:	60c5      	str	r5, [r0, #12]
 80047ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047ec:	6819      	ldr	r1, [r3, #0]
 80047ee:	b151      	cbz	r1, 8004806 <_dtoa_r+0x5e>
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	604a      	str	r2, [r1, #4]
 80047f4:	2301      	movs	r3, #1
 80047f6:	4093      	lsls	r3, r2
 80047f8:	608b      	str	r3, [r1, #8]
 80047fa:	4620      	mov	r0, r4
 80047fc:	f000 fe20 	bl	8005440 <_Bfree>
 8004800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	1e3b      	subs	r3, r7, #0
 8004808:	bfaa      	itet	ge
 800480a:	2300      	movge	r3, #0
 800480c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004810:	f8c8 3000 	strge.w	r3, [r8]
 8004814:	4b9a      	ldr	r3, [pc, #616]	; (8004a80 <_dtoa_r+0x2d8>)
 8004816:	bfbc      	itt	lt
 8004818:	2201      	movlt	r2, #1
 800481a:	f8c8 2000 	strlt.w	r2, [r8]
 800481e:	ea33 030b 	bics.w	r3, r3, fp
 8004822:	d11b      	bne.n	800485c <_dtoa_r+0xb4>
 8004824:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004826:	f242 730f 	movw	r3, #9999	; 0x270f
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004830:	4333      	orrs	r3, r6
 8004832:	f000 8592 	beq.w	800535a <_dtoa_r+0xbb2>
 8004836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004838:	b963      	cbnz	r3, 8004854 <_dtoa_r+0xac>
 800483a:	4b92      	ldr	r3, [pc, #584]	; (8004a84 <_dtoa_r+0x2dc>)
 800483c:	e022      	b.n	8004884 <_dtoa_r+0xdc>
 800483e:	4b92      	ldr	r3, [pc, #584]	; (8004a88 <_dtoa_r+0x2e0>)
 8004840:	9301      	str	r3, [sp, #4]
 8004842:	3308      	adds	r3, #8
 8004844:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	9801      	ldr	r0, [sp, #4]
 800484a:	b013      	add	sp, #76	; 0x4c
 800484c:	ecbd 8b04 	vpop	{d8-d9}
 8004850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004854:	4b8b      	ldr	r3, [pc, #556]	; (8004a84 <_dtoa_r+0x2dc>)
 8004856:	9301      	str	r3, [sp, #4]
 8004858:	3303      	adds	r3, #3
 800485a:	e7f3      	b.n	8004844 <_dtoa_r+0x9c>
 800485c:	2200      	movs	r2, #0
 800485e:	2300      	movs	r3, #0
 8004860:	4650      	mov	r0, sl
 8004862:	4659      	mov	r1, fp
 8004864:	f7fc f938 	bl	8000ad8 <__aeabi_dcmpeq>
 8004868:	ec4b ab19 	vmov	d9, sl, fp
 800486c:	4680      	mov	r8, r0
 800486e:	b158      	cbz	r0, 8004888 <_dtoa_r+0xe0>
 8004870:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004872:	2301      	movs	r3, #1
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 856b 	beq.w	8005354 <_dtoa_r+0xbac>
 800487e:	4883      	ldr	r0, [pc, #524]	; (8004a8c <_dtoa_r+0x2e4>)
 8004880:	6018      	str	r0, [r3, #0]
 8004882:	1e43      	subs	r3, r0, #1
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	e7df      	b.n	8004848 <_dtoa_r+0xa0>
 8004888:	ec4b ab10 	vmov	d0, sl, fp
 800488c:	aa10      	add	r2, sp, #64	; 0x40
 800488e:	a911      	add	r1, sp, #68	; 0x44
 8004890:	4620      	mov	r0, r4
 8004892:	f001 f8bd 	bl	8005a10 <__d2b>
 8004896:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800489a:	ee08 0a10 	vmov	s16, r0
 800489e:	2d00      	cmp	r5, #0
 80048a0:	f000 8084 	beq.w	80049ac <_dtoa_r+0x204>
 80048a4:	ee19 3a90 	vmov	r3, s19
 80048a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80048b0:	4656      	mov	r6, sl
 80048b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80048b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80048ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80048be:	4b74      	ldr	r3, [pc, #464]	; (8004a90 <_dtoa_r+0x2e8>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	4630      	mov	r0, r6
 80048c4:	4639      	mov	r1, r7
 80048c6:	f7fb fce7 	bl	8000298 <__aeabi_dsub>
 80048ca:	a365      	add	r3, pc, #404	; (adr r3, 8004a60 <_dtoa_r+0x2b8>)
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	f7fb fe9a 	bl	8000608 <__aeabi_dmul>
 80048d4:	a364      	add	r3, pc, #400	; (adr r3, 8004a68 <_dtoa_r+0x2c0>)
 80048d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048da:	f7fb fcdf 	bl	800029c <__adddf3>
 80048de:	4606      	mov	r6, r0
 80048e0:	4628      	mov	r0, r5
 80048e2:	460f      	mov	r7, r1
 80048e4:	f7fb fe26 	bl	8000534 <__aeabi_i2d>
 80048e8:	a361      	add	r3, pc, #388	; (adr r3, 8004a70 <_dtoa_r+0x2c8>)
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	f7fb fe8b 	bl	8000608 <__aeabi_dmul>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4630      	mov	r0, r6
 80048f8:	4639      	mov	r1, r7
 80048fa:	f7fb fccf 	bl	800029c <__adddf3>
 80048fe:	4606      	mov	r6, r0
 8004900:	460f      	mov	r7, r1
 8004902:	f7fc f931 	bl	8000b68 <__aeabi_d2iz>
 8004906:	2200      	movs	r2, #0
 8004908:	9000      	str	r0, [sp, #0]
 800490a:	2300      	movs	r3, #0
 800490c:	4630      	mov	r0, r6
 800490e:	4639      	mov	r1, r7
 8004910:	f7fc f8ec 	bl	8000aec <__aeabi_dcmplt>
 8004914:	b150      	cbz	r0, 800492c <_dtoa_r+0x184>
 8004916:	9800      	ldr	r0, [sp, #0]
 8004918:	f7fb fe0c 	bl	8000534 <__aeabi_i2d>
 800491c:	4632      	mov	r2, r6
 800491e:	463b      	mov	r3, r7
 8004920:	f7fc f8da 	bl	8000ad8 <__aeabi_dcmpeq>
 8004924:	b910      	cbnz	r0, 800492c <_dtoa_r+0x184>
 8004926:	9b00      	ldr	r3, [sp, #0]
 8004928:	3b01      	subs	r3, #1
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	9b00      	ldr	r3, [sp, #0]
 800492e:	2b16      	cmp	r3, #22
 8004930:	d85a      	bhi.n	80049e8 <_dtoa_r+0x240>
 8004932:	9a00      	ldr	r2, [sp, #0]
 8004934:	4b57      	ldr	r3, [pc, #348]	; (8004a94 <_dtoa_r+0x2ec>)
 8004936:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	ec51 0b19 	vmov	r0, r1, d9
 8004942:	f7fc f8d3 	bl	8000aec <__aeabi_dcmplt>
 8004946:	2800      	cmp	r0, #0
 8004948:	d050      	beq.n	80049ec <_dtoa_r+0x244>
 800494a:	9b00      	ldr	r3, [sp, #0]
 800494c:	3b01      	subs	r3, #1
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	2300      	movs	r3, #0
 8004952:	930b      	str	r3, [sp, #44]	; 0x2c
 8004954:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004956:	1b5d      	subs	r5, r3, r5
 8004958:	1e6b      	subs	r3, r5, #1
 800495a:	9305      	str	r3, [sp, #20]
 800495c:	bf45      	ittet	mi
 800495e:	f1c5 0301 	rsbmi	r3, r5, #1
 8004962:	9304      	strmi	r3, [sp, #16]
 8004964:	2300      	movpl	r3, #0
 8004966:	2300      	movmi	r3, #0
 8004968:	bf4c      	ite	mi
 800496a:	9305      	strmi	r3, [sp, #20]
 800496c:	9304      	strpl	r3, [sp, #16]
 800496e:	9b00      	ldr	r3, [sp, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	db3d      	blt.n	80049f0 <_dtoa_r+0x248>
 8004974:	9b05      	ldr	r3, [sp, #20]
 8004976:	9a00      	ldr	r2, [sp, #0]
 8004978:	920a      	str	r2, [sp, #40]	; 0x28
 800497a:	4413      	add	r3, r2
 800497c:	9305      	str	r3, [sp, #20]
 800497e:	2300      	movs	r3, #0
 8004980:	9307      	str	r3, [sp, #28]
 8004982:	9b06      	ldr	r3, [sp, #24]
 8004984:	2b09      	cmp	r3, #9
 8004986:	f200 8089 	bhi.w	8004a9c <_dtoa_r+0x2f4>
 800498a:	2b05      	cmp	r3, #5
 800498c:	bfc4      	itt	gt
 800498e:	3b04      	subgt	r3, #4
 8004990:	9306      	strgt	r3, [sp, #24]
 8004992:	9b06      	ldr	r3, [sp, #24]
 8004994:	f1a3 0302 	sub.w	r3, r3, #2
 8004998:	bfcc      	ite	gt
 800499a:	2500      	movgt	r5, #0
 800499c:	2501      	movle	r5, #1
 800499e:	2b03      	cmp	r3, #3
 80049a0:	f200 8087 	bhi.w	8004ab2 <_dtoa_r+0x30a>
 80049a4:	e8df f003 	tbb	[pc, r3]
 80049a8:	59383a2d 	.word	0x59383a2d
 80049ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80049b0:	441d      	add	r5, r3
 80049b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80049b6:	2b20      	cmp	r3, #32
 80049b8:	bfc1      	itttt	gt
 80049ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80049be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80049c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80049c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80049ca:	bfda      	itte	le
 80049cc:	f1c3 0320 	rsble	r3, r3, #32
 80049d0:	fa06 f003 	lslle.w	r0, r6, r3
 80049d4:	4318      	orrgt	r0, r3
 80049d6:	f7fb fd9d 	bl	8000514 <__aeabi_ui2d>
 80049da:	2301      	movs	r3, #1
 80049dc:	4606      	mov	r6, r0
 80049de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80049e2:	3d01      	subs	r5, #1
 80049e4:	930e      	str	r3, [sp, #56]	; 0x38
 80049e6:	e76a      	b.n	80048be <_dtoa_r+0x116>
 80049e8:	2301      	movs	r3, #1
 80049ea:	e7b2      	b.n	8004952 <_dtoa_r+0x1aa>
 80049ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80049ee:	e7b1      	b.n	8004954 <_dtoa_r+0x1ac>
 80049f0:	9b04      	ldr	r3, [sp, #16]
 80049f2:	9a00      	ldr	r2, [sp, #0]
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	9304      	str	r3, [sp, #16]
 80049f8:	4253      	negs	r3, r2
 80049fa:	9307      	str	r3, [sp, #28]
 80049fc:	2300      	movs	r3, #0
 80049fe:	930a      	str	r3, [sp, #40]	; 0x28
 8004a00:	e7bf      	b.n	8004982 <_dtoa_r+0x1da>
 8004a02:	2300      	movs	r3, #0
 8004a04:	9308      	str	r3, [sp, #32]
 8004a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	dc55      	bgt.n	8004ab8 <_dtoa_r+0x310>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004a12:	461a      	mov	r2, r3
 8004a14:	9209      	str	r2, [sp, #36]	; 0x24
 8004a16:	e00c      	b.n	8004a32 <_dtoa_r+0x28a>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e7f3      	b.n	8004a04 <_dtoa_r+0x25c>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a20:	9308      	str	r3, [sp, #32]
 8004a22:	9b00      	ldr	r3, [sp, #0]
 8004a24:	4413      	add	r3, r2
 8004a26:	9302      	str	r3, [sp, #8]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	9303      	str	r3, [sp, #12]
 8004a2e:	bfb8      	it	lt
 8004a30:	2301      	movlt	r3, #1
 8004a32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004a34:	2200      	movs	r2, #0
 8004a36:	6042      	str	r2, [r0, #4]
 8004a38:	2204      	movs	r2, #4
 8004a3a:	f102 0614 	add.w	r6, r2, #20
 8004a3e:	429e      	cmp	r6, r3
 8004a40:	6841      	ldr	r1, [r0, #4]
 8004a42:	d93d      	bls.n	8004ac0 <_dtoa_r+0x318>
 8004a44:	4620      	mov	r0, r4
 8004a46:	f000 fcbb 	bl	80053c0 <_Balloc>
 8004a4a:	9001      	str	r0, [sp, #4]
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d13b      	bne.n	8004ac8 <_dtoa_r+0x320>
 8004a50:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <_dtoa_r+0x2f0>)
 8004a52:	4602      	mov	r2, r0
 8004a54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004a58:	e6c0      	b.n	80047dc <_dtoa_r+0x34>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e7df      	b.n	8004a1e <_dtoa_r+0x276>
 8004a5e:	bf00      	nop
 8004a60:	636f4361 	.word	0x636f4361
 8004a64:	3fd287a7 	.word	0x3fd287a7
 8004a68:	8b60c8b3 	.word	0x8b60c8b3
 8004a6c:	3fc68a28 	.word	0x3fc68a28
 8004a70:	509f79fb 	.word	0x509f79fb
 8004a74:	3fd34413 	.word	0x3fd34413
 8004a78:	080080a9 	.word	0x080080a9
 8004a7c:	080080c0 	.word	0x080080c0
 8004a80:	7ff00000 	.word	0x7ff00000
 8004a84:	080080a5 	.word	0x080080a5
 8004a88:	0800809c 	.word	0x0800809c
 8004a8c:	08008079 	.word	0x08008079
 8004a90:	3ff80000 	.word	0x3ff80000
 8004a94:	080081b0 	.word	0x080081b0
 8004a98:	0800811b 	.word	0x0800811b
 8004a9c:	2501      	movs	r5, #1
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	9306      	str	r3, [sp, #24]
 8004aa2:	9508      	str	r5, [sp, #32]
 8004aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004aac:	2200      	movs	r2, #0
 8004aae:	2312      	movs	r3, #18
 8004ab0:	e7b0      	b.n	8004a14 <_dtoa_r+0x26c>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	9308      	str	r3, [sp, #32]
 8004ab6:	e7f5      	b.n	8004aa4 <_dtoa_r+0x2fc>
 8004ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004abe:	e7b8      	b.n	8004a32 <_dtoa_r+0x28a>
 8004ac0:	3101      	adds	r1, #1
 8004ac2:	6041      	str	r1, [r0, #4]
 8004ac4:	0052      	lsls	r2, r2, #1
 8004ac6:	e7b8      	b.n	8004a3a <_dtoa_r+0x292>
 8004ac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aca:	9a01      	ldr	r2, [sp, #4]
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	9b03      	ldr	r3, [sp, #12]
 8004ad0:	2b0e      	cmp	r3, #14
 8004ad2:	f200 809d 	bhi.w	8004c10 <_dtoa_r+0x468>
 8004ad6:	2d00      	cmp	r5, #0
 8004ad8:	f000 809a 	beq.w	8004c10 <_dtoa_r+0x468>
 8004adc:	9b00      	ldr	r3, [sp, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	dd32      	ble.n	8004b48 <_dtoa_r+0x3a0>
 8004ae2:	4ab7      	ldr	r2, [pc, #732]	; (8004dc0 <_dtoa_r+0x618>)
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004aec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004af0:	9b00      	ldr	r3, [sp, #0]
 8004af2:	05d8      	lsls	r0, r3, #23
 8004af4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004af8:	d516      	bpl.n	8004b28 <_dtoa_r+0x380>
 8004afa:	4bb2      	ldr	r3, [pc, #712]	; (8004dc4 <_dtoa_r+0x61c>)
 8004afc:	ec51 0b19 	vmov	r0, r1, d9
 8004b00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b04:	f7fb feaa 	bl	800085c <__aeabi_ddiv>
 8004b08:	f007 070f 	and.w	r7, r7, #15
 8004b0c:	4682      	mov	sl, r0
 8004b0e:	468b      	mov	fp, r1
 8004b10:	2503      	movs	r5, #3
 8004b12:	4eac      	ldr	r6, [pc, #688]	; (8004dc4 <_dtoa_r+0x61c>)
 8004b14:	b957      	cbnz	r7, 8004b2c <_dtoa_r+0x384>
 8004b16:	4642      	mov	r2, r8
 8004b18:	464b      	mov	r3, r9
 8004b1a:	4650      	mov	r0, sl
 8004b1c:	4659      	mov	r1, fp
 8004b1e:	f7fb fe9d 	bl	800085c <__aeabi_ddiv>
 8004b22:	4682      	mov	sl, r0
 8004b24:	468b      	mov	fp, r1
 8004b26:	e028      	b.n	8004b7a <_dtoa_r+0x3d2>
 8004b28:	2502      	movs	r5, #2
 8004b2a:	e7f2      	b.n	8004b12 <_dtoa_r+0x36a>
 8004b2c:	07f9      	lsls	r1, r7, #31
 8004b2e:	d508      	bpl.n	8004b42 <_dtoa_r+0x39a>
 8004b30:	4640      	mov	r0, r8
 8004b32:	4649      	mov	r1, r9
 8004b34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b38:	f7fb fd66 	bl	8000608 <__aeabi_dmul>
 8004b3c:	3501      	adds	r5, #1
 8004b3e:	4680      	mov	r8, r0
 8004b40:	4689      	mov	r9, r1
 8004b42:	107f      	asrs	r7, r7, #1
 8004b44:	3608      	adds	r6, #8
 8004b46:	e7e5      	b.n	8004b14 <_dtoa_r+0x36c>
 8004b48:	f000 809b 	beq.w	8004c82 <_dtoa_r+0x4da>
 8004b4c:	9b00      	ldr	r3, [sp, #0]
 8004b4e:	4f9d      	ldr	r7, [pc, #628]	; (8004dc4 <_dtoa_r+0x61c>)
 8004b50:	425e      	negs	r6, r3
 8004b52:	4b9b      	ldr	r3, [pc, #620]	; (8004dc0 <_dtoa_r+0x618>)
 8004b54:	f006 020f 	and.w	r2, r6, #15
 8004b58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	ec51 0b19 	vmov	r0, r1, d9
 8004b64:	f7fb fd50 	bl	8000608 <__aeabi_dmul>
 8004b68:	1136      	asrs	r6, r6, #4
 8004b6a:	4682      	mov	sl, r0
 8004b6c:	468b      	mov	fp, r1
 8004b6e:	2300      	movs	r3, #0
 8004b70:	2502      	movs	r5, #2
 8004b72:	2e00      	cmp	r6, #0
 8004b74:	d17a      	bne.n	8004c6c <_dtoa_r+0x4c4>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1d3      	bne.n	8004b22 <_dtoa_r+0x37a>
 8004b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 8082 	beq.w	8004c86 <_dtoa_r+0x4de>
 8004b82:	4b91      	ldr	r3, [pc, #580]	; (8004dc8 <_dtoa_r+0x620>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	4650      	mov	r0, sl
 8004b88:	4659      	mov	r1, fp
 8004b8a:	f7fb ffaf 	bl	8000aec <__aeabi_dcmplt>
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	d079      	beq.n	8004c86 <_dtoa_r+0x4de>
 8004b92:	9b03      	ldr	r3, [sp, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d076      	beq.n	8004c86 <_dtoa_r+0x4de>
 8004b98:	9b02      	ldr	r3, [sp, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	dd36      	ble.n	8004c0c <_dtoa_r+0x464>
 8004b9e:	9b00      	ldr	r3, [sp, #0]
 8004ba0:	4650      	mov	r0, sl
 8004ba2:	4659      	mov	r1, fp
 8004ba4:	1e5f      	subs	r7, r3, #1
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	4b88      	ldr	r3, [pc, #544]	; (8004dcc <_dtoa_r+0x624>)
 8004baa:	f7fb fd2d 	bl	8000608 <__aeabi_dmul>
 8004bae:	9e02      	ldr	r6, [sp, #8]
 8004bb0:	4682      	mov	sl, r0
 8004bb2:	468b      	mov	fp, r1
 8004bb4:	3501      	adds	r5, #1
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f7fb fcbc 	bl	8000534 <__aeabi_i2d>
 8004bbc:	4652      	mov	r2, sl
 8004bbe:	465b      	mov	r3, fp
 8004bc0:	f7fb fd22 	bl	8000608 <__aeabi_dmul>
 8004bc4:	4b82      	ldr	r3, [pc, #520]	; (8004dd0 <_dtoa_r+0x628>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f7fb fb68 	bl	800029c <__adddf3>
 8004bcc:	46d0      	mov	r8, sl
 8004bce:	46d9      	mov	r9, fp
 8004bd0:	4682      	mov	sl, r0
 8004bd2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004bd6:	2e00      	cmp	r6, #0
 8004bd8:	d158      	bne.n	8004c8c <_dtoa_r+0x4e4>
 8004bda:	4b7e      	ldr	r3, [pc, #504]	; (8004dd4 <_dtoa_r+0x62c>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4640      	mov	r0, r8
 8004be0:	4649      	mov	r1, r9
 8004be2:	f7fb fb59 	bl	8000298 <__aeabi_dsub>
 8004be6:	4652      	mov	r2, sl
 8004be8:	465b      	mov	r3, fp
 8004bea:	4680      	mov	r8, r0
 8004bec:	4689      	mov	r9, r1
 8004bee:	f7fb ff9b 	bl	8000b28 <__aeabi_dcmpgt>
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	f040 8295 	bne.w	8005122 <_dtoa_r+0x97a>
 8004bf8:	4652      	mov	r2, sl
 8004bfa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004bfe:	4640      	mov	r0, r8
 8004c00:	4649      	mov	r1, r9
 8004c02:	f7fb ff73 	bl	8000aec <__aeabi_dcmplt>
 8004c06:	2800      	cmp	r0, #0
 8004c08:	f040 8289 	bne.w	800511e <_dtoa_r+0x976>
 8004c0c:	ec5b ab19 	vmov	sl, fp, d9
 8004c10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f2c0 8148 	blt.w	8004ea8 <_dtoa_r+0x700>
 8004c18:	9a00      	ldr	r2, [sp, #0]
 8004c1a:	2a0e      	cmp	r2, #14
 8004c1c:	f300 8144 	bgt.w	8004ea8 <_dtoa_r+0x700>
 8004c20:	4b67      	ldr	r3, [pc, #412]	; (8004dc0 <_dtoa_r+0x618>)
 8004c22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f280 80d5 	bge.w	8004ddc <_dtoa_r+0x634>
 8004c32:	9b03      	ldr	r3, [sp, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f300 80d1 	bgt.w	8004ddc <_dtoa_r+0x634>
 8004c3a:	f040 826f 	bne.w	800511c <_dtoa_r+0x974>
 8004c3e:	4b65      	ldr	r3, [pc, #404]	; (8004dd4 <_dtoa_r+0x62c>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	4640      	mov	r0, r8
 8004c44:	4649      	mov	r1, r9
 8004c46:	f7fb fcdf 	bl	8000608 <__aeabi_dmul>
 8004c4a:	4652      	mov	r2, sl
 8004c4c:	465b      	mov	r3, fp
 8004c4e:	f7fb ff61 	bl	8000b14 <__aeabi_dcmpge>
 8004c52:	9e03      	ldr	r6, [sp, #12]
 8004c54:	4637      	mov	r7, r6
 8004c56:	2800      	cmp	r0, #0
 8004c58:	f040 8245 	bne.w	80050e6 <_dtoa_r+0x93e>
 8004c5c:	9d01      	ldr	r5, [sp, #4]
 8004c5e:	2331      	movs	r3, #49	; 0x31
 8004c60:	f805 3b01 	strb.w	r3, [r5], #1
 8004c64:	9b00      	ldr	r3, [sp, #0]
 8004c66:	3301      	adds	r3, #1
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	e240      	b.n	80050ee <_dtoa_r+0x946>
 8004c6c:	07f2      	lsls	r2, r6, #31
 8004c6e:	d505      	bpl.n	8004c7c <_dtoa_r+0x4d4>
 8004c70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c74:	f7fb fcc8 	bl	8000608 <__aeabi_dmul>
 8004c78:	3501      	adds	r5, #1
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	1076      	asrs	r6, r6, #1
 8004c7e:	3708      	adds	r7, #8
 8004c80:	e777      	b.n	8004b72 <_dtoa_r+0x3ca>
 8004c82:	2502      	movs	r5, #2
 8004c84:	e779      	b.n	8004b7a <_dtoa_r+0x3d2>
 8004c86:	9f00      	ldr	r7, [sp, #0]
 8004c88:	9e03      	ldr	r6, [sp, #12]
 8004c8a:	e794      	b.n	8004bb6 <_dtoa_r+0x40e>
 8004c8c:	9901      	ldr	r1, [sp, #4]
 8004c8e:	4b4c      	ldr	r3, [pc, #304]	; (8004dc0 <_dtoa_r+0x618>)
 8004c90:	4431      	add	r1, r6
 8004c92:	910d      	str	r1, [sp, #52]	; 0x34
 8004c94:	9908      	ldr	r1, [sp, #32]
 8004c96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004c9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c9e:	2900      	cmp	r1, #0
 8004ca0:	d043      	beq.n	8004d2a <_dtoa_r+0x582>
 8004ca2:	494d      	ldr	r1, [pc, #308]	; (8004dd8 <_dtoa_r+0x630>)
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	f7fb fdd9 	bl	800085c <__aeabi_ddiv>
 8004caa:	4652      	mov	r2, sl
 8004cac:	465b      	mov	r3, fp
 8004cae:	f7fb faf3 	bl	8000298 <__aeabi_dsub>
 8004cb2:	9d01      	ldr	r5, [sp, #4]
 8004cb4:	4682      	mov	sl, r0
 8004cb6:	468b      	mov	fp, r1
 8004cb8:	4649      	mov	r1, r9
 8004cba:	4640      	mov	r0, r8
 8004cbc:	f7fb ff54 	bl	8000b68 <__aeabi_d2iz>
 8004cc0:	4606      	mov	r6, r0
 8004cc2:	f7fb fc37 	bl	8000534 <__aeabi_i2d>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4640      	mov	r0, r8
 8004ccc:	4649      	mov	r1, r9
 8004cce:	f7fb fae3 	bl	8000298 <__aeabi_dsub>
 8004cd2:	3630      	adds	r6, #48	; 0x30
 8004cd4:	f805 6b01 	strb.w	r6, [r5], #1
 8004cd8:	4652      	mov	r2, sl
 8004cda:	465b      	mov	r3, fp
 8004cdc:	4680      	mov	r8, r0
 8004cde:	4689      	mov	r9, r1
 8004ce0:	f7fb ff04 	bl	8000aec <__aeabi_dcmplt>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	d163      	bne.n	8004db0 <_dtoa_r+0x608>
 8004ce8:	4642      	mov	r2, r8
 8004cea:	464b      	mov	r3, r9
 8004cec:	4936      	ldr	r1, [pc, #216]	; (8004dc8 <_dtoa_r+0x620>)
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f7fb fad2 	bl	8000298 <__aeabi_dsub>
 8004cf4:	4652      	mov	r2, sl
 8004cf6:	465b      	mov	r3, fp
 8004cf8:	f7fb fef8 	bl	8000aec <__aeabi_dcmplt>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	f040 80b5 	bne.w	8004e6c <_dtoa_r+0x6c4>
 8004d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d04:	429d      	cmp	r5, r3
 8004d06:	d081      	beq.n	8004c0c <_dtoa_r+0x464>
 8004d08:	4b30      	ldr	r3, [pc, #192]	; (8004dcc <_dtoa_r+0x624>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	4650      	mov	r0, sl
 8004d0e:	4659      	mov	r1, fp
 8004d10:	f7fb fc7a 	bl	8000608 <__aeabi_dmul>
 8004d14:	4b2d      	ldr	r3, [pc, #180]	; (8004dcc <_dtoa_r+0x624>)
 8004d16:	4682      	mov	sl, r0
 8004d18:	468b      	mov	fp, r1
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f7fb fc72 	bl	8000608 <__aeabi_dmul>
 8004d24:	4680      	mov	r8, r0
 8004d26:	4689      	mov	r9, r1
 8004d28:	e7c6      	b.n	8004cb8 <_dtoa_r+0x510>
 8004d2a:	4650      	mov	r0, sl
 8004d2c:	4659      	mov	r1, fp
 8004d2e:	f7fb fc6b 	bl	8000608 <__aeabi_dmul>
 8004d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d34:	9d01      	ldr	r5, [sp, #4]
 8004d36:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d38:	4682      	mov	sl, r0
 8004d3a:	468b      	mov	fp, r1
 8004d3c:	4649      	mov	r1, r9
 8004d3e:	4640      	mov	r0, r8
 8004d40:	f7fb ff12 	bl	8000b68 <__aeabi_d2iz>
 8004d44:	4606      	mov	r6, r0
 8004d46:	f7fb fbf5 	bl	8000534 <__aeabi_i2d>
 8004d4a:	3630      	adds	r6, #48	; 0x30
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4640      	mov	r0, r8
 8004d52:	4649      	mov	r1, r9
 8004d54:	f7fb faa0 	bl	8000298 <__aeabi_dsub>
 8004d58:	f805 6b01 	strb.w	r6, [r5], #1
 8004d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d5e:	429d      	cmp	r5, r3
 8004d60:	4680      	mov	r8, r0
 8004d62:	4689      	mov	r9, r1
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	d124      	bne.n	8004db4 <_dtoa_r+0x60c>
 8004d6a:	4b1b      	ldr	r3, [pc, #108]	; (8004dd8 <_dtoa_r+0x630>)
 8004d6c:	4650      	mov	r0, sl
 8004d6e:	4659      	mov	r1, fp
 8004d70:	f7fb fa94 	bl	800029c <__adddf3>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4640      	mov	r0, r8
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	f7fb fed4 	bl	8000b28 <__aeabi_dcmpgt>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d173      	bne.n	8004e6c <_dtoa_r+0x6c4>
 8004d84:	4652      	mov	r2, sl
 8004d86:	465b      	mov	r3, fp
 8004d88:	4913      	ldr	r1, [pc, #76]	; (8004dd8 <_dtoa_r+0x630>)
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	f7fb fa84 	bl	8000298 <__aeabi_dsub>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4640      	mov	r0, r8
 8004d96:	4649      	mov	r1, r9
 8004d98:	f7fb fea8 	bl	8000aec <__aeabi_dcmplt>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	f43f af35 	beq.w	8004c0c <_dtoa_r+0x464>
 8004da2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004da4:	1e6b      	subs	r3, r5, #1
 8004da6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004da8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004dac:	2b30      	cmp	r3, #48	; 0x30
 8004dae:	d0f8      	beq.n	8004da2 <_dtoa_r+0x5fa>
 8004db0:	9700      	str	r7, [sp, #0]
 8004db2:	e049      	b.n	8004e48 <_dtoa_r+0x6a0>
 8004db4:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <_dtoa_r+0x624>)
 8004db6:	f7fb fc27 	bl	8000608 <__aeabi_dmul>
 8004dba:	4680      	mov	r8, r0
 8004dbc:	4689      	mov	r9, r1
 8004dbe:	e7bd      	b.n	8004d3c <_dtoa_r+0x594>
 8004dc0:	080081b0 	.word	0x080081b0
 8004dc4:	08008188 	.word	0x08008188
 8004dc8:	3ff00000 	.word	0x3ff00000
 8004dcc:	40240000 	.word	0x40240000
 8004dd0:	401c0000 	.word	0x401c0000
 8004dd4:	40140000 	.word	0x40140000
 8004dd8:	3fe00000 	.word	0x3fe00000
 8004ddc:	9d01      	ldr	r5, [sp, #4]
 8004dde:	4656      	mov	r6, sl
 8004de0:	465f      	mov	r7, fp
 8004de2:	4642      	mov	r2, r8
 8004de4:	464b      	mov	r3, r9
 8004de6:	4630      	mov	r0, r6
 8004de8:	4639      	mov	r1, r7
 8004dea:	f7fb fd37 	bl	800085c <__aeabi_ddiv>
 8004dee:	f7fb febb 	bl	8000b68 <__aeabi_d2iz>
 8004df2:	4682      	mov	sl, r0
 8004df4:	f7fb fb9e 	bl	8000534 <__aeabi_i2d>
 8004df8:	4642      	mov	r2, r8
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	f7fb fc04 	bl	8000608 <__aeabi_dmul>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4630      	mov	r0, r6
 8004e06:	4639      	mov	r1, r7
 8004e08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004e0c:	f7fb fa44 	bl	8000298 <__aeabi_dsub>
 8004e10:	f805 6b01 	strb.w	r6, [r5], #1
 8004e14:	9e01      	ldr	r6, [sp, #4]
 8004e16:	9f03      	ldr	r7, [sp, #12]
 8004e18:	1bae      	subs	r6, r5, r6
 8004e1a:	42b7      	cmp	r7, r6
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	d135      	bne.n	8004e8e <_dtoa_r+0x6e6>
 8004e22:	f7fb fa3b 	bl	800029c <__adddf3>
 8004e26:	4642      	mov	r2, r8
 8004e28:	464b      	mov	r3, r9
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	460f      	mov	r7, r1
 8004e2e:	f7fb fe7b 	bl	8000b28 <__aeabi_dcmpgt>
 8004e32:	b9d0      	cbnz	r0, 8004e6a <_dtoa_r+0x6c2>
 8004e34:	4642      	mov	r2, r8
 8004e36:	464b      	mov	r3, r9
 8004e38:	4630      	mov	r0, r6
 8004e3a:	4639      	mov	r1, r7
 8004e3c:	f7fb fe4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e40:	b110      	cbz	r0, 8004e48 <_dtoa_r+0x6a0>
 8004e42:	f01a 0f01 	tst.w	sl, #1
 8004e46:	d110      	bne.n	8004e6a <_dtoa_r+0x6c2>
 8004e48:	4620      	mov	r0, r4
 8004e4a:	ee18 1a10 	vmov	r1, s16
 8004e4e:	f000 faf7 	bl	8005440 <_Bfree>
 8004e52:	2300      	movs	r3, #0
 8004e54:	9800      	ldr	r0, [sp, #0]
 8004e56:	702b      	strb	r3, [r5, #0]
 8004e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	6018      	str	r0, [r3, #0]
 8004e5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f43f acf1 	beq.w	8004848 <_dtoa_r+0xa0>
 8004e66:	601d      	str	r5, [r3, #0]
 8004e68:	e4ee      	b.n	8004848 <_dtoa_r+0xa0>
 8004e6a:	9f00      	ldr	r7, [sp, #0]
 8004e6c:	462b      	mov	r3, r5
 8004e6e:	461d      	mov	r5, r3
 8004e70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e74:	2a39      	cmp	r2, #57	; 0x39
 8004e76:	d106      	bne.n	8004e86 <_dtoa_r+0x6de>
 8004e78:	9a01      	ldr	r2, [sp, #4]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d1f7      	bne.n	8004e6e <_dtoa_r+0x6c6>
 8004e7e:	9901      	ldr	r1, [sp, #4]
 8004e80:	2230      	movs	r2, #48	; 0x30
 8004e82:	3701      	adds	r7, #1
 8004e84:	700a      	strb	r2, [r1, #0]
 8004e86:	781a      	ldrb	r2, [r3, #0]
 8004e88:	3201      	adds	r2, #1
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	e790      	b.n	8004db0 <_dtoa_r+0x608>
 8004e8e:	4ba6      	ldr	r3, [pc, #664]	; (8005128 <_dtoa_r+0x980>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	f7fb fbb9 	bl	8000608 <__aeabi_dmul>
 8004e96:	2200      	movs	r2, #0
 8004e98:	2300      	movs	r3, #0
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	460f      	mov	r7, r1
 8004e9e:	f7fb fe1b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d09d      	beq.n	8004de2 <_dtoa_r+0x63a>
 8004ea6:	e7cf      	b.n	8004e48 <_dtoa_r+0x6a0>
 8004ea8:	9a08      	ldr	r2, [sp, #32]
 8004eaa:	2a00      	cmp	r2, #0
 8004eac:	f000 80d7 	beq.w	800505e <_dtoa_r+0x8b6>
 8004eb0:	9a06      	ldr	r2, [sp, #24]
 8004eb2:	2a01      	cmp	r2, #1
 8004eb4:	f300 80ba 	bgt.w	800502c <_dtoa_r+0x884>
 8004eb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004eba:	2a00      	cmp	r2, #0
 8004ebc:	f000 80b2 	beq.w	8005024 <_dtoa_r+0x87c>
 8004ec0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004ec4:	9e07      	ldr	r6, [sp, #28]
 8004ec6:	9d04      	ldr	r5, [sp, #16]
 8004ec8:	9a04      	ldr	r2, [sp, #16]
 8004eca:	441a      	add	r2, r3
 8004ecc:	9204      	str	r2, [sp, #16]
 8004ece:	9a05      	ldr	r2, [sp, #20]
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	441a      	add	r2, r3
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	9205      	str	r2, [sp, #20]
 8004ed8:	f000 fb6a 	bl	80055b0 <__i2b>
 8004edc:	4607      	mov	r7, r0
 8004ede:	2d00      	cmp	r5, #0
 8004ee0:	dd0c      	ble.n	8004efc <_dtoa_r+0x754>
 8004ee2:	9b05      	ldr	r3, [sp, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	dd09      	ble.n	8004efc <_dtoa_r+0x754>
 8004ee8:	42ab      	cmp	r3, r5
 8004eea:	9a04      	ldr	r2, [sp, #16]
 8004eec:	bfa8      	it	ge
 8004eee:	462b      	movge	r3, r5
 8004ef0:	1ad2      	subs	r2, r2, r3
 8004ef2:	9204      	str	r2, [sp, #16]
 8004ef4:	9a05      	ldr	r2, [sp, #20]
 8004ef6:	1aed      	subs	r5, r5, r3
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	9305      	str	r3, [sp, #20]
 8004efc:	9b07      	ldr	r3, [sp, #28]
 8004efe:	b31b      	cbz	r3, 8004f48 <_dtoa_r+0x7a0>
 8004f00:	9b08      	ldr	r3, [sp, #32]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 80af 	beq.w	8005066 <_dtoa_r+0x8be>
 8004f08:	2e00      	cmp	r6, #0
 8004f0a:	dd13      	ble.n	8004f34 <_dtoa_r+0x78c>
 8004f0c:	4639      	mov	r1, r7
 8004f0e:	4632      	mov	r2, r6
 8004f10:	4620      	mov	r0, r4
 8004f12:	f000 fc0d 	bl	8005730 <__pow5mult>
 8004f16:	ee18 2a10 	vmov	r2, s16
 8004f1a:	4601      	mov	r1, r0
 8004f1c:	4607      	mov	r7, r0
 8004f1e:	4620      	mov	r0, r4
 8004f20:	f000 fb5c 	bl	80055dc <__multiply>
 8004f24:	ee18 1a10 	vmov	r1, s16
 8004f28:	4680      	mov	r8, r0
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f000 fa88 	bl	8005440 <_Bfree>
 8004f30:	ee08 8a10 	vmov	s16, r8
 8004f34:	9b07      	ldr	r3, [sp, #28]
 8004f36:	1b9a      	subs	r2, r3, r6
 8004f38:	d006      	beq.n	8004f48 <_dtoa_r+0x7a0>
 8004f3a:	ee18 1a10 	vmov	r1, s16
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f000 fbf6 	bl	8005730 <__pow5mult>
 8004f44:	ee08 0a10 	vmov	s16, r0
 8004f48:	2101      	movs	r1, #1
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f000 fb30 	bl	80055b0 <__i2b>
 8004f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	4606      	mov	r6, r0
 8004f56:	f340 8088 	ble.w	800506a <_dtoa_r+0x8c2>
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	4601      	mov	r1, r0
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f000 fbe6 	bl	8005730 <__pow5mult>
 8004f64:	9b06      	ldr	r3, [sp, #24]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	4606      	mov	r6, r0
 8004f6a:	f340 8081 	ble.w	8005070 <_dtoa_r+0x8c8>
 8004f6e:	f04f 0800 	mov.w	r8, #0
 8004f72:	6933      	ldr	r3, [r6, #16]
 8004f74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004f78:	6918      	ldr	r0, [r3, #16]
 8004f7a:	f000 fac9 	bl	8005510 <__hi0bits>
 8004f7e:	f1c0 0020 	rsb	r0, r0, #32
 8004f82:	9b05      	ldr	r3, [sp, #20]
 8004f84:	4418      	add	r0, r3
 8004f86:	f010 001f 	ands.w	r0, r0, #31
 8004f8a:	f000 8092 	beq.w	80050b2 <_dtoa_r+0x90a>
 8004f8e:	f1c0 0320 	rsb	r3, r0, #32
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	f340 808a 	ble.w	80050ac <_dtoa_r+0x904>
 8004f98:	f1c0 001c 	rsb	r0, r0, #28
 8004f9c:	9b04      	ldr	r3, [sp, #16]
 8004f9e:	4403      	add	r3, r0
 8004fa0:	9304      	str	r3, [sp, #16]
 8004fa2:	9b05      	ldr	r3, [sp, #20]
 8004fa4:	4403      	add	r3, r0
 8004fa6:	4405      	add	r5, r0
 8004fa8:	9305      	str	r3, [sp, #20]
 8004faa:	9b04      	ldr	r3, [sp, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	dd07      	ble.n	8004fc0 <_dtoa_r+0x818>
 8004fb0:	ee18 1a10 	vmov	r1, s16
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f000 fc14 	bl	80057e4 <__lshift>
 8004fbc:	ee08 0a10 	vmov	s16, r0
 8004fc0:	9b05      	ldr	r3, [sp, #20]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	dd05      	ble.n	8004fd2 <_dtoa_r+0x82a>
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f000 fc0a 	bl	80057e4 <__lshift>
 8004fd0:	4606      	mov	r6, r0
 8004fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d06e      	beq.n	80050b6 <_dtoa_r+0x90e>
 8004fd8:	ee18 0a10 	vmov	r0, s16
 8004fdc:	4631      	mov	r1, r6
 8004fde:	f000 fc71 	bl	80058c4 <__mcmp>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	da67      	bge.n	80050b6 <_dtoa_r+0x90e>
 8004fe6:	9b00      	ldr	r3, [sp, #0]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	ee18 1a10 	vmov	r1, s16
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	220a      	movs	r2, #10
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f000 fa45 	bl	8005484 <__multadd>
 8004ffa:	9b08      	ldr	r3, [sp, #32]
 8004ffc:	ee08 0a10 	vmov	s16, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 81b1 	beq.w	8005368 <_dtoa_r+0xbc0>
 8005006:	2300      	movs	r3, #0
 8005008:	4639      	mov	r1, r7
 800500a:	220a      	movs	r2, #10
 800500c:	4620      	mov	r0, r4
 800500e:	f000 fa39 	bl	8005484 <__multadd>
 8005012:	9b02      	ldr	r3, [sp, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	4607      	mov	r7, r0
 8005018:	f300 808e 	bgt.w	8005138 <_dtoa_r+0x990>
 800501c:	9b06      	ldr	r3, [sp, #24]
 800501e:	2b02      	cmp	r3, #2
 8005020:	dc51      	bgt.n	80050c6 <_dtoa_r+0x91e>
 8005022:	e089      	b.n	8005138 <_dtoa_r+0x990>
 8005024:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005026:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800502a:	e74b      	b.n	8004ec4 <_dtoa_r+0x71c>
 800502c:	9b03      	ldr	r3, [sp, #12]
 800502e:	1e5e      	subs	r6, r3, #1
 8005030:	9b07      	ldr	r3, [sp, #28]
 8005032:	42b3      	cmp	r3, r6
 8005034:	bfbf      	itttt	lt
 8005036:	9b07      	ldrlt	r3, [sp, #28]
 8005038:	9607      	strlt	r6, [sp, #28]
 800503a:	1af2      	sublt	r2, r6, r3
 800503c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800503e:	bfb6      	itet	lt
 8005040:	189b      	addlt	r3, r3, r2
 8005042:	1b9e      	subge	r6, r3, r6
 8005044:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005046:	9b03      	ldr	r3, [sp, #12]
 8005048:	bfb8      	it	lt
 800504a:	2600      	movlt	r6, #0
 800504c:	2b00      	cmp	r3, #0
 800504e:	bfb7      	itett	lt
 8005050:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005054:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005058:	1a9d      	sublt	r5, r3, r2
 800505a:	2300      	movlt	r3, #0
 800505c:	e734      	b.n	8004ec8 <_dtoa_r+0x720>
 800505e:	9e07      	ldr	r6, [sp, #28]
 8005060:	9d04      	ldr	r5, [sp, #16]
 8005062:	9f08      	ldr	r7, [sp, #32]
 8005064:	e73b      	b.n	8004ede <_dtoa_r+0x736>
 8005066:	9a07      	ldr	r2, [sp, #28]
 8005068:	e767      	b.n	8004f3a <_dtoa_r+0x792>
 800506a:	9b06      	ldr	r3, [sp, #24]
 800506c:	2b01      	cmp	r3, #1
 800506e:	dc18      	bgt.n	80050a2 <_dtoa_r+0x8fa>
 8005070:	f1ba 0f00 	cmp.w	sl, #0
 8005074:	d115      	bne.n	80050a2 <_dtoa_r+0x8fa>
 8005076:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800507a:	b993      	cbnz	r3, 80050a2 <_dtoa_r+0x8fa>
 800507c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005080:	0d1b      	lsrs	r3, r3, #20
 8005082:	051b      	lsls	r3, r3, #20
 8005084:	b183      	cbz	r3, 80050a8 <_dtoa_r+0x900>
 8005086:	9b04      	ldr	r3, [sp, #16]
 8005088:	3301      	adds	r3, #1
 800508a:	9304      	str	r3, [sp, #16]
 800508c:	9b05      	ldr	r3, [sp, #20]
 800508e:	3301      	adds	r3, #1
 8005090:	9305      	str	r3, [sp, #20]
 8005092:	f04f 0801 	mov.w	r8, #1
 8005096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005098:	2b00      	cmp	r3, #0
 800509a:	f47f af6a 	bne.w	8004f72 <_dtoa_r+0x7ca>
 800509e:	2001      	movs	r0, #1
 80050a0:	e76f      	b.n	8004f82 <_dtoa_r+0x7da>
 80050a2:	f04f 0800 	mov.w	r8, #0
 80050a6:	e7f6      	b.n	8005096 <_dtoa_r+0x8ee>
 80050a8:	4698      	mov	r8, r3
 80050aa:	e7f4      	b.n	8005096 <_dtoa_r+0x8ee>
 80050ac:	f43f af7d 	beq.w	8004faa <_dtoa_r+0x802>
 80050b0:	4618      	mov	r0, r3
 80050b2:	301c      	adds	r0, #28
 80050b4:	e772      	b.n	8004f9c <_dtoa_r+0x7f4>
 80050b6:	9b03      	ldr	r3, [sp, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	dc37      	bgt.n	800512c <_dtoa_r+0x984>
 80050bc:	9b06      	ldr	r3, [sp, #24]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	dd34      	ble.n	800512c <_dtoa_r+0x984>
 80050c2:	9b03      	ldr	r3, [sp, #12]
 80050c4:	9302      	str	r3, [sp, #8]
 80050c6:	9b02      	ldr	r3, [sp, #8]
 80050c8:	b96b      	cbnz	r3, 80050e6 <_dtoa_r+0x93e>
 80050ca:	4631      	mov	r1, r6
 80050cc:	2205      	movs	r2, #5
 80050ce:	4620      	mov	r0, r4
 80050d0:	f000 f9d8 	bl	8005484 <__multadd>
 80050d4:	4601      	mov	r1, r0
 80050d6:	4606      	mov	r6, r0
 80050d8:	ee18 0a10 	vmov	r0, s16
 80050dc:	f000 fbf2 	bl	80058c4 <__mcmp>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	f73f adbb 	bgt.w	8004c5c <_dtoa_r+0x4b4>
 80050e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050e8:	9d01      	ldr	r5, [sp, #4]
 80050ea:	43db      	mvns	r3, r3
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	f04f 0800 	mov.w	r8, #0
 80050f2:	4631      	mov	r1, r6
 80050f4:	4620      	mov	r0, r4
 80050f6:	f000 f9a3 	bl	8005440 <_Bfree>
 80050fa:	2f00      	cmp	r7, #0
 80050fc:	f43f aea4 	beq.w	8004e48 <_dtoa_r+0x6a0>
 8005100:	f1b8 0f00 	cmp.w	r8, #0
 8005104:	d005      	beq.n	8005112 <_dtoa_r+0x96a>
 8005106:	45b8      	cmp	r8, r7
 8005108:	d003      	beq.n	8005112 <_dtoa_r+0x96a>
 800510a:	4641      	mov	r1, r8
 800510c:	4620      	mov	r0, r4
 800510e:	f000 f997 	bl	8005440 <_Bfree>
 8005112:	4639      	mov	r1, r7
 8005114:	4620      	mov	r0, r4
 8005116:	f000 f993 	bl	8005440 <_Bfree>
 800511a:	e695      	b.n	8004e48 <_dtoa_r+0x6a0>
 800511c:	2600      	movs	r6, #0
 800511e:	4637      	mov	r7, r6
 8005120:	e7e1      	b.n	80050e6 <_dtoa_r+0x93e>
 8005122:	9700      	str	r7, [sp, #0]
 8005124:	4637      	mov	r7, r6
 8005126:	e599      	b.n	8004c5c <_dtoa_r+0x4b4>
 8005128:	40240000 	.word	0x40240000
 800512c:	9b08      	ldr	r3, [sp, #32]
 800512e:	2b00      	cmp	r3, #0
 8005130:	f000 80ca 	beq.w	80052c8 <_dtoa_r+0xb20>
 8005134:	9b03      	ldr	r3, [sp, #12]
 8005136:	9302      	str	r3, [sp, #8]
 8005138:	2d00      	cmp	r5, #0
 800513a:	dd05      	ble.n	8005148 <_dtoa_r+0x9a0>
 800513c:	4639      	mov	r1, r7
 800513e:	462a      	mov	r2, r5
 8005140:	4620      	mov	r0, r4
 8005142:	f000 fb4f 	bl	80057e4 <__lshift>
 8005146:	4607      	mov	r7, r0
 8005148:	f1b8 0f00 	cmp.w	r8, #0
 800514c:	d05b      	beq.n	8005206 <_dtoa_r+0xa5e>
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4620      	mov	r0, r4
 8005152:	f000 f935 	bl	80053c0 <_Balloc>
 8005156:	4605      	mov	r5, r0
 8005158:	b928      	cbnz	r0, 8005166 <_dtoa_r+0x9be>
 800515a:	4b87      	ldr	r3, [pc, #540]	; (8005378 <_dtoa_r+0xbd0>)
 800515c:	4602      	mov	r2, r0
 800515e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005162:	f7ff bb3b 	b.w	80047dc <_dtoa_r+0x34>
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	3202      	adds	r2, #2
 800516a:	0092      	lsls	r2, r2, #2
 800516c:	f107 010c 	add.w	r1, r7, #12
 8005170:	300c      	adds	r0, #12
 8005172:	f000 f90b 	bl	800538c <memcpy>
 8005176:	2201      	movs	r2, #1
 8005178:	4629      	mov	r1, r5
 800517a:	4620      	mov	r0, r4
 800517c:	f000 fb32 	bl	80057e4 <__lshift>
 8005180:	9b01      	ldr	r3, [sp, #4]
 8005182:	f103 0901 	add.w	r9, r3, #1
 8005186:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800518a:	4413      	add	r3, r2
 800518c:	9305      	str	r3, [sp, #20]
 800518e:	f00a 0301 	and.w	r3, sl, #1
 8005192:	46b8      	mov	r8, r7
 8005194:	9304      	str	r3, [sp, #16]
 8005196:	4607      	mov	r7, r0
 8005198:	4631      	mov	r1, r6
 800519a:	ee18 0a10 	vmov	r0, s16
 800519e:	f7ff fa77 	bl	8004690 <quorem>
 80051a2:	4641      	mov	r1, r8
 80051a4:	9002      	str	r0, [sp, #8]
 80051a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80051aa:	ee18 0a10 	vmov	r0, s16
 80051ae:	f000 fb89 	bl	80058c4 <__mcmp>
 80051b2:	463a      	mov	r2, r7
 80051b4:	9003      	str	r0, [sp, #12]
 80051b6:	4631      	mov	r1, r6
 80051b8:	4620      	mov	r0, r4
 80051ba:	f000 fb9f 	bl	80058fc <__mdiff>
 80051be:	68c2      	ldr	r2, [r0, #12]
 80051c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80051c4:	4605      	mov	r5, r0
 80051c6:	bb02      	cbnz	r2, 800520a <_dtoa_r+0xa62>
 80051c8:	4601      	mov	r1, r0
 80051ca:	ee18 0a10 	vmov	r0, s16
 80051ce:	f000 fb79 	bl	80058c4 <__mcmp>
 80051d2:	4602      	mov	r2, r0
 80051d4:	4629      	mov	r1, r5
 80051d6:	4620      	mov	r0, r4
 80051d8:	9207      	str	r2, [sp, #28]
 80051da:	f000 f931 	bl	8005440 <_Bfree>
 80051de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80051e2:	ea43 0102 	orr.w	r1, r3, r2
 80051e6:	9b04      	ldr	r3, [sp, #16]
 80051e8:	430b      	orrs	r3, r1
 80051ea:	464d      	mov	r5, r9
 80051ec:	d10f      	bne.n	800520e <_dtoa_r+0xa66>
 80051ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80051f2:	d02a      	beq.n	800524a <_dtoa_r+0xaa2>
 80051f4:	9b03      	ldr	r3, [sp, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	dd02      	ble.n	8005200 <_dtoa_r+0xa58>
 80051fa:	9b02      	ldr	r3, [sp, #8]
 80051fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005200:	f88b a000 	strb.w	sl, [fp]
 8005204:	e775      	b.n	80050f2 <_dtoa_r+0x94a>
 8005206:	4638      	mov	r0, r7
 8005208:	e7ba      	b.n	8005180 <_dtoa_r+0x9d8>
 800520a:	2201      	movs	r2, #1
 800520c:	e7e2      	b.n	80051d4 <_dtoa_r+0xa2c>
 800520e:	9b03      	ldr	r3, [sp, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	db04      	blt.n	800521e <_dtoa_r+0xa76>
 8005214:	9906      	ldr	r1, [sp, #24]
 8005216:	430b      	orrs	r3, r1
 8005218:	9904      	ldr	r1, [sp, #16]
 800521a:	430b      	orrs	r3, r1
 800521c:	d122      	bne.n	8005264 <_dtoa_r+0xabc>
 800521e:	2a00      	cmp	r2, #0
 8005220:	ddee      	ble.n	8005200 <_dtoa_r+0xa58>
 8005222:	ee18 1a10 	vmov	r1, s16
 8005226:	2201      	movs	r2, #1
 8005228:	4620      	mov	r0, r4
 800522a:	f000 fadb 	bl	80057e4 <__lshift>
 800522e:	4631      	mov	r1, r6
 8005230:	ee08 0a10 	vmov	s16, r0
 8005234:	f000 fb46 	bl	80058c4 <__mcmp>
 8005238:	2800      	cmp	r0, #0
 800523a:	dc03      	bgt.n	8005244 <_dtoa_r+0xa9c>
 800523c:	d1e0      	bne.n	8005200 <_dtoa_r+0xa58>
 800523e:	f01a 0f01 	tst.w	sl, #1
 8005242:	d0dd      	beq.n	8005200 <_dtoa_r+0xa58>
 8005244:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005248:	d1d7      	bne.n	80051fa <_dtoa_r+0xa52>
 800524a:	2339      	movs	r3, #57	; 0x39
 800524c:	f88b 3000 	strb.w	r3, [fp]
 8005250:	462b      	mov	r3, r5
 8005252:	461d      	mov	r5, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800525a:	2a39      	cmp	r2, #57	; 0x39
 800525c:	d071      	beq.n	8005342 <_dtoa_r+0xb9a>
 800525e:	3201      	adds	r2, #1
 8005260:	701a      	strb	r2, [r3, #0]
 8005262:	e746      	b.n	80050f2 <_dtoa_r+0x94a>
 8005264:	2a00      	cmp	r2, #0
 8005266:	dd07      	ble.n	8005278 <_dtoa_r+0xad0>
 8005268:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800526c:	d0ed      	beq.n	800524a <_dtoa_r+0xaa2>
 800526e:	f10a 0301 	add.w	r3, sl, #1
 8005272:	f88b 3000 	strb.w	r3, [fp]
 8005276:	e73c      	b.n	80050f2 <_dtoa_r+0x94a>
 8005278:	9b05      	ldr	r3, [sp, #20]
 800527a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800527e:	4599      	cmp	r9, r3
 8005280:	d047      	beq.n	8005312 <_dtoa_r+0xb6a>
 8005282:	ee18 1a10 	vmov	r1, s16
 8005286:	2300      	movs	r3, #0
 8005288:	220a      	movs	r2, #10
 800528a:	4620      	mov	r0, r4
 800528c:	f000 f8fa 	bl	8005484 <__multadd>
 8005290:	45b8      	cmp	r8, r7
 8005292:	ee08 0a10 	vmov	s16, r0
 8005296:	f04f 0300 	mov.w	r3, #0
 800529a:	f04f 020a 	mov.w	r2, #10
 800529e:	4641      	mov	r1, r8
 80052a0:	4620      	mov	r0, r4
 80052a2:	d106      	bne.n	80052b2 <_dtoa_r+0xb0a>
 80052a4:	f000 f8ee 	bl	8005484 <__multadd>
 80052a8:	4680      	mov	r8, r0
 80052aa:	4607      	mov	r7, r0
 80052ac:	f109 0901 	add.w	r9, r9, #1
 80052b0:	e772      	b.n	8005198 <_dtoa_r+0x9f0>
 80052b2:	f000 f8e7 	bl	8005484 <__multadd>
 80052b6:	4639      	mov	r1, r7
 80052b8:	4680      	mov	r8, r0
 80052ba:	2300      	movs	r3, #0
 80052bc:	220a      	movs	r2, #10
 80052be:	4620      	mov	r0, r4
 80052c0:	f000 f8e0 	bl	8005484 <__multadd>
 80052c4:	4607      	mov	r7, r0
 80052c6:	e7f1      	b.n	80052ac <_dtoa_r+0xb04>
 80052c8:	9b03      	ldr	r3, [sp, #12]
 80052ca:	9302      	str	r3, [sp, #8]
 80052cc:	9d01      	ldr	r5, [sp, #4]
 80052ce:	ee18 0a10 	vmov	r0, s16
 80052d2:	4631      	mov	r1, r6
 80052d4:	f7ff f9dc 	bl	8004690 <quorem>
 80052d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80052dc:	9b01      	ldr	r3, [sp, #4]
 80052de:	f805 ab01 	strb.w	sl, [r5], #1
 80052e2:	1aea      	subs	r2, r5, r3
 80052e4:	9b02      	ldr	r3, [sp, #8]
 80052e6:	4293      	cmp	r3, r2
 80052e8:	dd09      	ble.n	80052fe <_dtoa_r+0xb56>
 80052ea:	ee18 1a10 	vmov	r1, s16
 80052ee:	2300      	movs	r3, #0
 80052f0:	220a      	movs	r2, #10
 80052f2:	4620      	mov	r0, r4
 80052f4:	f000 f8c6 	bl	8005484 <__multadd>
 80052f8:	ee08 0a10 	vmov	s16, r0
 80052fc:	e7e7      	b.n	80052ce <_dtoa_r+0xb26>
 80052fe:	9b02      	ldr	r3, [sp, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	bfc8      	it	gt
 8005304:	461d      	movgt	r5, r3
 8005306:	9b01      	ldr	r3, [sp, #4]
 8005308:	bfd8      	it	le
 800530a:	2501      	movle	r5, #1
 800530c:	441d      	add	r5, r3
 800530e:	f04f 0800 	mov.w	r8, #0
 8005312:	ee18 1a10 	vmov	r1, s16
 8005316:	2201      	movs	r2, #1
 8005318:	4620      	mov	r0, r4
 800531a:	f000 fa63 	bl	80057e4 <__lshift>
 800531e:	4631      	mov	r1, r6
 8005320:	ee08 0a10 	vmov	s16, r0
 8005324:	f000 face 	bl	80058c4 <__mcmp>
 8005328:	2800      	cmp	r0, #0
 800532a:	dc91      	bgt.n	8005250 <_dtoa_r+0xaa8>
 800532c:	d102      	bne.n	8005334 <_dtoa_r+0xb8c>
 800532e:	f01a 0f01 	tst.w	sl, #1
 8005332:	d18d      	bne.n	8005250 <_dtoa_r+0xaa8>
 8005334:	462b      	mov	r3, r5
 8005336:	461d      	mov	r5, r3
 8005338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800533c:	2a30      	cmp	r2, #48	; 0x30
 800533e:	d0fa      	beq.n	8005336 <_dtoa_r+0xb8e>
 8005340:	e6d7      	b.n	80050f2 <_dtoa_r+0x94a>
 8005342:	9a01      	ldr	r2, [sp, #4]
 8005344:	429a      	cmp	r2, r3
 8005346:	d184      	bne.n	8005252 <_dtoa_r+0xaaa>
 8005348:	9b00      	ldr	r3, [sp, #0]
 800534a:	3301      	adds	r3, #1
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	2331      	movs	r3, #49	; 0x31
 8005350:	7013      	strb	r3, [r2, #0]
 8005352:	e6ce      	b.n	80050f2 <_dtoa_r+0x94a>
 8005354:	4b09      	ldr	r3, [pc, #36]	; (800537c <_dtoa_r+0xbd4>)
 8005356:	f7ff ba95 	b.w	8004884 <_dtoa_r+0xdc>
 800535a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800535c:	2b00      	cmp	r3, #0
 800535e:	f47f aa6e 	bne.w	800483e <_dtoa_r+0x96>
 8005362:	4b07      	ldr	r3, [pc, #28]	; (8005380 <_dtoa_r+0xbd8>)
 8005364:	f7ff ba8e 	b.w	8004884 <_dtoa_r+0xdc>
 8005368:	9b02      	ldr	r3, [sp, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	dcae      	bgt.n	80052cc <_dtoa_r+0xb24>
 800536e:	9b06      	ldr	r3, [sp, #24]
 8005370:	2b02      	cmp	r3, #2
 8005372:	f73f aea8 	bgt.w	80050c6 <_dtoa_r+0x91e>
 8005376:	e7a9      	b.n	80052cc <_dtoa_r+0xb24>
 8005378:	0800811b 	.word	0x0800811b
 800537c:	08008078 	.word	0x08008078
 8005380:	0800809c 	.word	0x0800809c

08005384 <_localeconv_r>:
 8005384:	4800      	ldr	r0, [pc, #0]	; (8005388 <_localeconv_r+0x4>)
 8005386:	4770      	bx	lr
 8005388:	20000174 	.word	0x20000174

0800538c <memcpy>:
 800538c:	440a      	add	r2, r1
 800538e:	4291      	cmp	r1, r2
 8005390:	f100 33ff 	add.w	r3, r0, #4294967295
 8005394:	d100      	bne.n	8005398 <memcpy+0xc>
 8005396:	4770      	bx	lr
 8005398:	b510      	push	{r4, lr}
 800539a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800539e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053a2:	4291      	cmp	r1, r2
 80053a4:	d1f9      	bne.n	800539a <memcpy+0xe>
 80053a6:	bd10      	pop	{r4, pc}

080053a8 <__malloc_lock>:
 80053a8:	4801      	ldr	r0, [pc, #4]	; (80053b0 <__malloc_lock+0x8>)
 80053aa:	f000 bd30 	b.w	8005e0e <__retarget_lock_acquire_recursive>
 80053ae:	bf00      	nop
 80053b0:	20000258 	.word	0x20000258

080053b4 <__malloc_unlock>:
 80053b4:	4801      	ldr	r0, [pc, #4]	; (80053bc <__malloc_unlock+0x8>)
 80053b6:	f000 bd2b 	b.w	8005e10 <__retarget_lock_release_recursive>
 80053ba:	bf00      	nop
 80053bc:	20000258 	.word	0x20000258

080053c0 <_Balloc>:
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80053c4:	4604      	mov	r4, r0
 80053c6:	460d      	mov	r5, r1
 80053c8:	b976      	cbnz	r6, 80053e8 <_Balloc+0x28>
 80053ca:	2010      	movs	r0, #16
 80053cc:	f7fe fbd6 	bl	8003b7c <malloc>
 80053d0:	4602      	mov	r2, r0
 80053d2:	6260      	str	r0, [r4, #36]	; 0x24
 80053d4:	b920      	cbnz	r0, 80053e0 <_Balloc+0x20>
 80053d6:	4b18      	ldr	r3, [pc, #96]	; (8005438 <_Balloc+0x78>)
 80053d8:	4818      	ldr	r0, [pc, #96]	; (800543c <_Balloc+0x7c>)
 80053da:	2166      	movs	r1, #102	; 0x66
 80053dc:	f000 fce6 	bl	8005dac <__assert_func>
 80053e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80053e4:	6006      	str	r6, [r0, #0]
 80053e6:	60c6      	str	r6, [r0, #12]
 80053e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80053ea:	68f3      	ldr	r3, [r6, #12]
 80053ec:	b183      	cbz	r3, 8005410 <_Balloc+0x50>
 80053ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80053f6:	b9b8      	cbnz	r0, 8005428 <_Balloc+0x68>
 80053f8:	2101      	movs	r1, #1
 80053fa:	fa01 f605 	lsl.w	r6, r1, r5
 80053fe:	1d72      	adds	r2, r6, #5
 8005400:	0092      	lsls	r2, r2, #2
 8005402:	4620      	mov	r0, r4
 8005404:	f000 fb60 	bl	8005ac8 <_calloc_r>
 8005408:	b160      	cbz	r0, 8005424 <_Balloc+0x64>
 800540a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800540e:	e00e      	b.n	800542e <_Balloc+0x6e>
 8005410:	2221      	movs	r2, #33	; 0x21
 8005412:	2104      	movs	r1, #4
 8005414:	4620      	mov	r0, r4
 8005416:	f000 fb57 	bl	8005ac8 <_calloc_r>
 800541a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800541c:	60f0      	str	r0, [r6, #12]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1e4      	bne.n	80053ee <_Balloc+0x2e>
 8005424:	2000      	movs	r0, #0
 8005426:	bd70      	pop	{r4, r5, r6, pc}
 8005428:	6802      	ldr	r2, [r0, #0]
 800542a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800542e:	2300      	movs	r3, #0
 8005430:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005434:	e7f7      	b.n	8005426 <_Balloc+0x66>
 8005436:	bf00      	nop
 8005438:	080080a9 	.word	0x080080a9
 800543c:	0800812c 	.word	0x0800812c

08005440 <_Bfree>:
 8005440:	b570      	push	{r4, r5, r6, lr}
 8005442:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005444:	4605      	mov	r5, r0
 8005446:	460c      	mov	r4, r1
 8005448:	b976      	cbnz	r6, 8005468 <_Bfree+0x28>
 800544a:	2010      	movs	r0, #16
 800544c:	f7fe fb96 	bl	8003b7c <malloc>
 8005450:	4602      	mov	r2, r0
 8005452:	6268      	str	r0, [r5, #36]	; 0x24
 8005454:	b920      	cbnz	r0, 8005460 <_Bfree+0x20>
 8005456:	4b09      	ldr	r3, [pc, #36]	; (800547c <_Bfree+0x3c>)
 8005458:	4809      	ldr	r0, [pc, #36]	; (8005480 <_Bfree+0x40>)
 800545a:	218a      	movs	r1, #138	; 0x8a
 800545c:	f000 fca6 	bl	8005dac <__assert_func>
 8005460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005464:	6006      	str	r6, [r0, #0]
 8005466:	60c6      	str	r6, [r0, #12]
 8005468:	b13c      	cbz	r4, 800547a <_Bfree+0x3a>
 800546a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800546c:	6862      	ldr	r2, [r4, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005474:	6021      	str	r1, [r4, #0]
 8005476:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	080080a9 	.word	0x080080a9
 8005480:	0800812c 	.word	0x0800812c

08005484 <__multadd>:
 8005484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005488:	690d      	ldr	r5, [r1, #16]
 800548a:	4607      	mov	r7, r0
 800548c:	460c      	mov	r4, r1
 800548e:	461e      	mov	r6, r3
 8005490:	f101 0c14 	add.w	ip, r1, #20
 8005494:	2000      	movs	r0, #0
 8005496:	f8dc 3000 	ldr.w	r3, [ip]
 800549a:	b299      	uxth	r1, r3
 800549c:	fb02 6101 	mla	r1, r2, r1, r6
 80054a0:	0c1e      	lsrs	r6, r3, #16
 80054a2:	0c0b      	lsrs	r3, r1, #16
 80054a4:	fb02 3306 	mla	r3, r2, r6, r3
 80054a8:	b289      	uxth	r1, r1
 80054aa:	3001      	adds	r0, #1
 80054ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80054b0:	4285      	cmp	r5, r0
 80054b2:	f84c 1b04 	str.w	r1, [ip], #4
 80054b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80054ba:	dcec      	bgt.n	8005496 <__multadd+0x12>
 80054bc:	b30e      	cbz	r6, 8005502 <__multadd+0x7e>
 80054be:	68a3      	ldr	r3, [r4, #8]
 80054c0:	42ab      	cmp	r3, r5
 80054c2:	dc19      	bgt.n	80054f8 <__multadd+0x74>
 80054c4:	6861      	ldr	r1, [r4, #4]
 80054c6:	4638      	mov	r0, r7
 80054c8:	3101      	adds	r1, #1
 80054ca:	f7ff ff79 	bl	80053c0 <_Balloc>
 80054ce:	4680      	mov	r8, r0
 80054d0:	b928      	cbnz	r0, 80054de <__multadd+0x5a>
 80054d2:	4602      	mov	r2, r0
 80054d4:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <__multadd+0x84>)
 80054d6:	480d      	ldr	r0, [pc, #52]	; (800550c <__multadd+0x88>)
 80054d8:	21b5      	movs	r1, #181	; 0xb5
 80054da:	f000 fc67 	bl	8005dac <__assert_func>
 80054de:	6922      	ldr	r2, [r4, #16]
 80054e0:	3202      	adds	r2, #2
 80054e2:	f104 010c 	add.w	r1, r4, #12
 80054e6:	0092      	lsls	r2, r2, #2
 80054e8:	300c      	adds	r0, #12
 80054ea:	f7ff ff4f 	bl	800538c <memcpy>
 80054ee:	4621      	mov	r1, r4
 80054f0:	4638      	mov	r0, r7
 80054f2:	f7ff ffa5 	bl	8005440 <_Bfree>
 80054f6:	4644      	mov	r4, r8
 80054f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80054fc:	3501      	adds	r5, #1
 80054fe:	615e      	str	r6, [r3, #20]
 8005500:	6125      	str	r5, [r4, #16]
 8005502:	4620      	mov	r0, r4
 8005504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005508:	0800811b 	.word	0x0800811b
 800550c:	0800812c 	.word	0x0800812c

08005510 <__hi0bits>:
 8005510:	0c03      	lsrs	r3, r0, #16
 8005512:	041b      	lsls	r3, r3, #16
 8005514:	b9d3      	cbnz	r3, 800554c <__hi0bits+0x3c>
 8005516:	0400      	lsls	r0, r0, #16
 8005518:	2310      	movs	r3, #16
 800551a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800551e:	bf04      	itt	eq
 8005520:	0200      	lsleq	r0, r0, #8
 8005522:	3308      	addeq	r3, #8
 8005524:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005528:	bf04      	itt	eq
 800552a:	0100      	lsleq	r0, r0, #4
 800552c:	3304      	addeq	r3, #4
 800552e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005532:	bf04      	itt	eq
 8005534:	0080      	lsleq	r0, r0, #2
 8005536:	3302      	addeq	r3, #2
 8005538:	2800      	cmp	r0, #0
 800553a:	db05      	blt.n	8005548 <__hi0bits+0x38>
 800553c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005540:	f103 0301 	add.w	r3, r3, #1
 8005544:	bf08      	it	eq
 8005546:	2320      	moveq	r3, #32
 8005548:	4618      	mov	r0, r3
 800554a:	4770      	bx	lr
 800554c:	2300      	movs	r3, #0
 800554e:	e7e4      	b.n	800551a <__hi0bits+0xa>

08005550 <__lo0bits>:
 8005550:	6803      	ldr	r3, [r0, #0]
 8005552:	f013 0207 	ands.w	r2, r3, #7
 8005556:	4601      	mov	r1, r0
 8005558:	d00b      	beq.n	8005572 <__lo0bits+0x22>
 800555a:	07da      	lsls	r2, r3, #31
 800555c:	d423      	bmi.n	80055a6 <__lo0bits+0x56>
 800555e:	0798      	lsls	r0, r3, #30
 8005560:	bf49      	itett	mi
 8005562:	085b      	lsrmi	r3, r3, #1
 8005564:	089b      	lsrpl	r3, r3, #2
 8005566:	2001      	movmi	r0, #1
 8005568:	600b      	strmi	r3, [r1, #0]
 800556a:	bf5c      	itt	pl
 800556c:	600b      	strpl	r3, [r1, #0]
 800556e:	2002      	movpl	r0, #2
 8005570:	4770      	bx	lr
 8005572:	b298      	uxth	r0, r3
 8005574:	b9a8      	cbnz	r0, 80055a2 <__lo0bits+0x52>
 8005576:	0c1b      	lsrs	r3, r3, #16
 8005578:	2010      	movs	r0, #16
 800557a:	b2da      	uxtb	r2, r3
 800557c:	b90a      	cbnz	r2, 8005582 <__lo0bits+0x32>
 800557e:	3008      	adds	r0, #8
 8005580:	0a1b      	lsrs	r3, r3, #8
 8005582:	071a      	lsls	r2, r3, #28
 8005584:	bf04      	itt	eq
 8005586:	091b      	lsreq	r3, r3, #4
 8005588:	3004      	addeq	r0, #4
 800558a:	079a      	lsls	r2, r3, #30
 800558c:	bf04      	itt	eq
 800558e:	089b      	lsreq	r3, r3, #2
 8005590:	3002      	addeq	r0, #2
 8005592:	07da      	lsls	r2, r3, #31
 8005594:	d403      	bmi.n	800559e <__lo0bits+0x4e>
 8005596:	085b      	lsrs	r3, r3, #1
 8005598:	f100 0001 	add.w	r0, r0, #1
 800559c:	d005      	beq.n	80055aa <__lo0bits+0x5a>
 800559e:	600b      	str	r3, [r1, #0]
 80055a0:	4770      	bx	lr
 80055a2:	4610      	mov	r0, r2
 80055a4:	e7e9      	b.n	800557a <__lo0bits+0x2a>
 80055a6:	2000      	movs	r0, #0
 80055a8:	4770      	bx	lr
 80055aa:	2020      	movs	r0, #32
 80055ac:	4770      	bx	lr
	...

080055b0 <__i2b>:
 80055b0:	b510      	push	{r4, lr}
 80055b2:	460c      	mov	r4, r1
 80055b4:	2101      	movs	r1, #1
 80055b6:	f7ff ff03 	bl	80053c0 <_Balloc>
 80055ba:	4602      	mov	r2, r0
 80055bc:	b928      	cbnz	r0, 80055ca <__i2b+0x1a>
 80055be:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <__i2b+0x24>)
 80055c0:	4805      	ldr	r0, [pc, #20]	; (80055d8 <__i2b+0x28>)
 80055c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80055c6:	f000 fbf1 	bl	8005dac <__assert_func>
 80055ca:	2301      	movs	r3, #1
 80055cc:	6144      	str	r4, [r0, #20]
 80055ce:	6103      	str	r3, [r0, #16]
 80055d0:	bd10      	pop	{r4, pc}
 80055d2:	bf00      	nop
 80055d4:	0800811b 	.word	0x0800811b
 80055d8:	0800812c 	.word	0x0800812c

080055dc <__multiply>:
 80055dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e0:	4691      	mov	r9, r2
 80055e2:	690a      	ldr	r2, [r1, #16]
 80055e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	bfb8      	it	lt
 80055ec:	460b      	movlt	r3, r1
 80055ee:	460c      	mov	r4, r1
 80055f0:	bfbc      	itt	lt
 80055f2:	464c      	movlt	r4, r9
 80055f4:	4699      	movlt	r9, r3
 80055f6:	6927      	ldr	r7, [r4, #16]
 80055f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80055fc:	68a3      	ldr	r3, [r4, #8]
 80055fe:	6861      	ldr	r1, [r4, #4]
 8005600:	eb07 060a 	add.w	r6, r7, sl
 8005604:	42b3      	cmp	r3, r6
 8005606:	b085      	sub	sp, #20
 8005608:	bfb8      	it	lt
 800560a:	3101      	addlt	r1, #1
 800560c:	f7ff fed8 	bl	80053c0 <_Balloc>
 8005610:	b930      	cbnz	r0, 8005620 <__multiply+0x44>
 8005612:	4602      	mov	r2, r0
 8005614:	4b44      	ldr	r3, [pc, #272]	; (8005728 <__multiply+0x14c>)
 8005616:	4845      	ldr	r0, [pc, #276]	; (800572c <__multiply+0x150>)
 8005618:	f240 115d 	movw	r1, #349	; 0x15d
 800561c:	f000 fbc6 	bl	8005dac <__assert_func>
 8005620:	f100 0514 	add.w	r5, r0, #20
 8005624:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005628:	462b      	mov	r3, r5
 800562a:	2200      	movs	r2, #0
 800562c:	4543      	cmp	r3, r8
 800562e:	d321      	bcc.n	8005674 <__multiply+0x98>
 8005630:	f104 0314 	add.w	r3, r4, #20
 8005634:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005638:	f109 0314 	add.w	r3, r9, #20
 800563c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005640:	9202      	str	r2, [sp, #8]
 8005642:	1b3a      	subs	r2, r7, r4
 8005644:	3a15      	subs	r2, #21
 8005646:	f022 0203 	bic.w	r2, r2, #3
 800564a:	3204      	adds	r2, #4
 800564c:	f104 0115 	add.w	r1, r4, #21
 8005650:	428f      	cmp	r7, r1
 8005652:	bf38      	it	cc
 8005654:	2204      	movcc	r2, #4
 8005656:	9201      	str	r2, [sp, #4]
 8005658:	9a02      	ldr	r2, [sp, #8]
 800565a:	9303      	str	r3, [sp, #12]
 800565c:	429a      	cmp	r2, r3
 800565e:	d80c      	bhi.n	800567a <__multiply+0x9e>
 8005660:	2e00      	cmp	r6, #0
 8005662:	dd03      	ble.n	800566c <__multiply+0x90>
 8005664:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005668:	2b00      	cmp	r3, #0
 800566a:	d05a      	beq.n	8005722 <__multiply+0x146>
 800566c:	6106      	str	r6, [r0, #16]
 800566e:	b005      	add	sp, #20
 8005670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005674:	f843 2b04 	str.w	r2, [r3], #4
 8005678:	e7d8      	b.n	800562c <__multiply+0x50>
 800567a:	f8b3 a000 	ldrh.w	sl, [r3]
 800567e:	f1ba 0f00 	cmp.w	sl, #0
 8005682:	d024      	beq.n	80056ce <__multiply+0xf2>
 8005684:	f104 0e14 	add.w	lr, r4, #20
 8005688:	46a9      	mov	r9, r5
 800568a:	f04f 0c00 	mov.w	ip, #0
 800568e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005692:	f8d9 1000 	ldr.w	r1, [r9]
 8005696:	fa1f fb82 	uxth.w	fp, r2
 800569a:	b289      	uxth	r1, r1
 800569c:	fb0a 110b 	mla	r1, sl, fp, r1
 80056a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80056a4:	f8d9 2000 	ldr.w	r2, [r9]
 80056a8:	4461      	add	r1, ip
 80056aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80056ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80056b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80056b6:	b289      	uxth	r1, r1
 80056b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80056bc:	4577      	cmp	r7, lr
 80056be:	f849 1b04 	str.w	r1, [r9], #4
 80056c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80056c6:	d8e2      	bhi.n	800568e <__multiply+0xb2>
 80056c8:	9a01      	ldr	r2, [sp, #4]
 80056ca:	f845 c002 	str.w	ip, [r5, r2]
 80056ce:	9a03      	ldr	r2, [sp, #12]
 80056d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80056d4:	3304      	adds	r3, #4
 80056d6:	f1b9 0f00 	cmp.w	r9, #0
 80056da:	d020      	beq.n	800571e <__multiply+0x142>
 80056dc:	6829      	ldr	r1, [r5, #0]
 80056de:	f104 0c14 	add.w	ip, r4, #20
 80056e2:	46ae      	mov	lr, r5
 80056e4:	f04f 0a00 	mov.w	sl, #0
 80056e8:	f8bc b000 	ldrh.w	fp, [ip]
 80056ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80056f0:	fb09 220b 	mla	r2, r9, fp, r2
 80056f4:	4492      	add	sl, r2
 80056f6:	b289      	uxth	r1, r1
 80056f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80056fc:	f84e 1b04 	str.w	r1, [lr], #4
 8005700:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005704:	f8be 1000 	ldrh.w	r1, [lr]
 8005708:	0c12      	lsrs	r2, r2, #16
 800570a:	fb09 1102 	mla	r1, r9, r2, r1
 800570e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005712:	4567      	cmp	r7, ip
 8005714:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005718:	d8e6      	bhi.n	80056e8 <__multiply+0x10c>
 800571a:	9a01      	ldr	r2, [sp, #4]
 800571c:	50a9      	str	r1, [r5, r2]
 800571e:	3504      	adds	r5, #4
 8005720:	e79a      	b.n	8005658 <__multiply+0x7c>
 8005722:	3e01      	subs	r6, #1
 8005724:	e79c      	b.n	8005660 <__multiply+0x84>
 8005726:	bf00      	nop
 8005728:	0800811b 	.word	0x0800811b
 800572c:	0800812c 	.word	0x0800812c

08005730 <__pow5mult>:
 8005730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005734:	4615      	mov	r5, r2
 8005736:	f012 0203 	ands.w	r2, r2, #3
 800573a:	4606      	mov	r6, r0
 800573c:	460f      	mov	r7, r1
 800573e:	d007      	beq.n	8005750 <__pow5mult+0x20>
 8005740:	4c25      	ldr	r4, [pc, #148]	; (80057d8 <__pow5mult+0xa8>)
 8005742:	3a01      	subs	r2, #1
 8005744:	2300      	movs	r3, #0
 8005746:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800574a:	f7ff fe9b 	bl	8005484 <__multadd>
 800574e:	4607      	mov	r7, r0
 8005750:	10ad      	asrs	r5, r5, #2
 8005752:	d03d      	beq.n	80057d0 <__pow5mult+0xa0>
 8005754:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005756:	b97c      	cbnz	r4, 8005778 <__pow5mult+0x48>
 8005758:	2010      	movs	r0, #16
 800575a:	f7fe fa0f 	bl	8003b7c <malloc>
 800575e:	4602      	mov	r2, r0
 8005760:	6270      	str	r0, [r6, #36]	; 0x24
 8005762:	b928      	cbnz	r0, 8005770 <__pow5mult+0x40>
 8005764:	4b1d      	ldr	r3, [pc, #116]	; (80057dc <__pow5mult+0xac>)
 8005766:	481e      	ldr	r0, [pc, #120]	; (80057e0 <__pow5mult+0xb0>)
 8005768:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800576c:	f000 fb1e 	bl	8005dac <__assert_func>
 8005770:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005774:	6004      	str	r4, [r0, #0]
 8005776:	60c4      	str	r4, [r0, #12]
 8005778:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800577c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005780:	b94c      	cbnz	r4, 8005796 <__pow5mult+0x66>
 8005782:	f240 2171 	movw	r1, #625	; 0x271
 8005786:	4630      	mov	r0, r6
 8005788:	f7ff ff12 	bl	80055b0 <__i2b>
 800578c:	2300      	movs	r3, #0
 800578e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005792:	4604      	mov	r4, r0
 8005794:	6003      	str	r3, [r0, #0]
 8005796:	f04f 0900 	mov.w	r9, #0
 800579a:	07eb      	lsls	r3, r5, #31
 800579c:	d50a      	bpl.n	80057b4 <__pow5mult+0x84>
 800579e:	4639      	mov	r1, r7
 80057a0:	4622      	mov	r2, r4
 80057a2:	4630      	mov	r0, r6
 80057a4:	f7ff ff1a 	bl	80055dc <__multiply>
 80057a8:	4639      	mov	r1, r7
 80057aa:	4680      	mov	r8, r0
 80057ac:	4630      	mov	r0, r6
 80057ae:	f7ff fe47 	bl	8005440 <_Bfree>
 80057b2:	4647      	mov	r7, r8
 80057b4:	106d      	asrs	r5, r5, #1
 80057b6:	d00b      	beq.n	80057d0 <__pow5mult+0xa0>
 80057b8:	6820      	ldr	r0, [r4, #0]
 80057ba:	b938      	cbnz	r0, 80057cc <__pow5mult+0x9c>
 80057bc:	4622      	mov	r2, r4
 80057be:	4621      	mov	r1, r4
 80057c0:	4630      	mov	r0, r6
 80057c2:	f7ff ff0b 	bl	80055dc <__multiply>
 80057c6:	6020      	str	r0, [r4, #0]
 80057c8:	f8c0 9000 	str.w	r9, [r0]
 80057cc:	4604      	mov	r4, r0
 80057ce:	e7e4      	b.n	800579a <__pow5mult+0x6a>
 80057d0:	4638      	mov	r0, r7
 80057d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057d6:	bf00      	nop
 80057d8:	08008278 	.word	0x08008278
 80057dc:	080080a9 	.word	0x080080a9
 80057e0:	0800812c 	.word	0x0800812c

080057e4 <__lshift>:
 80057e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e8:	460c      	mov	r4, r1
 80057ea:	6849      	ldr	r1, [r1, #4]
 80057ec:	6923      	ldr	r3, [r4, #16]
 80057ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80057f2:	68a3      	ldr	r3, [r4, #8]
 80057f4:	4607      	mov	r7, r0
 80057f6:	4691      	mov	r9, r2
 80057f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80057fc:	f108 0601 	add.w	r6, r8, #1
 8005800:	42b3      	cmp	r3, r6
 8005802:	db0b      	blt.n	800581c <__lshift+0x38>
 8005804:	4638      	mov	r0, r7
 8005806:	f7ff fddb 	bl	80053c0 <_Balloc>
 800580a:	4605      	mov	r5, r0
 800580c:	b948      	cbnz	r0, 8005822 <__lshift+0x3e>
 800580e:	4602      	mov	r2, r0
 8005810:	4b2a      	ldr	r3, [pc, #168]	; (80058bc <__lshift+0xd8>)
 8005812:	482b      	ldr	r0, [pc, #172]	; (80058c0 <__lshift+0xdc>)
 8005814:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005818:	f000 fac8 	bl	8005dac <__assert_func>
 800581c:	3101      	adds	r1, #1
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	e7ee      	b.n	8005800 <__lshift+0x1c>
 8005822:	2300      	movs	r3, #0
 8005824:	f100 0114 	add.w	r1, r0, #20
 8005828:	f100 0210 	add.w	r2, r0, #16
 800582c:	4618      	mov	r0, r3
 800582e:	4553      	cmp	r3, sl
 8005830:	db37      	blt.n	80058a2 <__lshift+0xbe>
 8005832:	6920      	ldr	r0, [r4, #16]
 8005834:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005838:	f104 0314 	add.w	r3, r4, #20
 800583c:	f019 091f 	ands.w	r9, r9, #31
 8005840:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005844:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005848:	d02f      	beq.n	80058aa <__lshift+0xc6>
 800584a:	f1c9 0e20 	rsb	lr, r9, #32
 800584e:	468a      	mov	sl, r1
 8005850:	f04f 0c00 	mov.w	ip, #0
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	fa02 f209 	lsl.w	r2, r2, r9
 800585a:	ea42 020c 	orr.w	r2, r2, ip
 800585e:	f84a 2b04 	str.w	r2, [sl], #4
 8005862:	f853 2b04 	ldr.w	r2, [r3], #4
 8005866:	4298      	cmp	r0, r3
 8005868:	fa22 fc0e 	lsr.w	ip, r2, lr
 800586c:	d8f2      	bhi.n	8005854 <__lshift+0x70>
 800586e:	1b03      	subs	r3, r0, r4
 8005870:	3b15      	subs	r3, #21
 8005872:	f023 0303 	bic.w	r3, r3, #3
 8005876:	3304      	adds	r3, #4
 8005878:	f104 0215 	add.w	r2, r4, #21
 800587c:	4290      	cmp	r0, r2
 800587e:	bf38      	it	cc
 8005880:	2304      	movcc	r3, #4
 8005882:	f841 c003 	str.w	ip, [r1, r3]
 8005886:	f1bc 0f00 	cmp.w	ip, #0
 800588a:	d001      	beq.n	8005890 <__lshift+0xac>
 800588c:	f108 0602 	add.w	r6, r8, #2
 8005890:	3e01      	subs	r6, #1
 8005892:	4638      	mov	r0, r7
 8005894:	612e      	str	r6, [r5, #16]
 8005896:	4621      	mov	r1, r4
 8005898:	f7ff fdd2 	bl	8005440 <_Bfree>
 800589c:	4628      	mov	r0, r5
 800589e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80058a6:	3301      	adds	r3, #1
 80058a8:	e7c1      	b.n	800582e <__lshift+0x4a>
 80058aa:	3904      	subs	r1, #4
 80058ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80058b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80058b4:	4298      	cmp	r0, r3
 80058b6:	d8f9      	bhi.n	80058ac <__lshift+0xc8>
 80058b8:	e7ea      	b.n	8005890 <__lshift+0xac>
 80058ba:	bf00      	nop
 80058bc:	0800811b 	.word	0x0800811b
 80058c0:	0800812c 	.word	0x0800812c

080058c4 <__mcmp>:
 80058c4:	b530      	push	{r4, r5, lr}
 80058c6:	6902      	ldr	r2, [r0, #16]
 80058c8:	690c      	ldr	r4, [r1, #16]
 80058ca:	1b12      	subs	r2, r2, r4
 80058cc:	d10e      	bne.n	80058ec <__mcmp+0x28>
 80058ce:	f100 0314 	add.w	r3, r0, #20
 80058d2:	3114      	adds	r1, #20
 80058d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80058d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80058dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80058e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80058e4:	42a5      	cmp	r5, r4
 80058e6:	d003      	beq.n	80058f0 <__mcmp+0x2c>
 80058e8:	d305      	bcc.n	80058f6 <__mcmp+0x32>
 80058ea:	2201      	movs	r2, #1
 80058ec:	4610      	mov	r0, r2
 80058ee:	bd30      	pop	{r4, r5, pc}
 80058f0:	4283      	cmp	r3, r0
 80058f2:	d3f3      	bcc.n	80058dc <__mcmp+0x18>
 80058f4:	e7fa      	b.n	80058ec <__mcmp+0x28>
 80058f6:	f04f 32ff 	mov.w	r2, #4294967295
 80058fa:	e7f7      	b.n	80058ec <__mcmp+0x28>

080058fc <__mdiff>:
 80058fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005900:	460c      	mov	r4, r1
 8005902:	4606      	mov	r6, r0
 8005904:	4611      	mov	r1, r2
 8005906:	4620      	mov	r0, r4
 8005908:	4690      	mov	r8, r2
 800590a:	f7ff ffdb 	bl	80058c4 <__mcmp>
 800590e:	1e05      	subs	r5, r0, #0
 8005910:	d110      	bne.n	8005934 <__mdiff+0x38>
 8005912:	4629      	mov	r1, r5
 8005914:	4630      	mov	r0, r6
 8005916:	f7ff fd53 	bl	80053c0 <_Balloc>
 800591a:	b930      	cbnz	r0, 800592a <__mdiff+0x2e>
 800591c:	4b3a      	ldr	r3, [pc, #232]	; (8005a08 <__mdiff+0x10c>)
 800591e:	4602      	mov	r2, r0
 8005920:	f240 2132 	movw	r1, #562	; 0x232
 8005924:	4839      	ldr	r0, [pc, #228]	; (8005a0c <__mdiff+0x110>)
 8005926:	f000 fa41 	bl	8005dac <__assert_func>
 800592a:	2301      	movs	r3, #1
 800592c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005934:	bfa4      	itt	ge
 8005936:	4643      	movge	r3, r8
 8005938:	46a0      	movge	r8, r4
 800593a:	4630      	mov	r0, r6
 800593c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005940:	bfa6      	itte	ge
 8005942:	461c      	movge	r4, r3
 8005944:	2500      	movge	r5, #0
 8005946:	2501      	movlt	r5, #1
 8005948:	f7ff fd3a 	bl	80053c0 <_Balloc>
 800594c:	b920      	cbnz	r0, 8005958 <__mdiff+0x5c>
 800594e:	4b2e      	ldr	r3, [pc, #184]	; (8005a08 <__mdiff+0x10c>)
 8005950:	4602      	mov	r2, r0
 8005952:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005956:	e7e5      	b.n	8005924 <__mdiff+0x28>
 8005958:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800595c:	6926      	ldr	r6, [r4, #16]
 800595e:	60c5      	str	r5, [r0, #12]
 8005960:	f104 0914 	add.w	r9, r4, #20
 8005964:	f108 0514 	add.w	r5, r8, #20
 8005968:	f100 0e14 	add.w	lr, r0, #20
 800596c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005970:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005974:	f108 0210 	add.w	r2, r8, #16
 8005978:	46f2      	mov	sl, lr
 800597a:	2100      	movs	r1, #0
 800597c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005980:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005984:	fa1f f883 	uxth.w	r8, r3
 8005988:	fa11 f18b 	uxtah	r1, r1, fp
 800598c:	0c1b      	lsrs	r3, r3, #16
 800598e:	eba1 0808 	sub.w	r8, r1, r8
 8005992:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005996:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800599a:	fa1f f888 	uxth.w	r8, r8
 800599e:	1419      	asrs	r1, r3, #16
 80059a0:	454e      	cmp	r6, r9
 80059a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80059a6:	f84a 3b04 	str.w	r3, [sl], #4
 80059aa:	d8e7      	bhi.n	800597c <__mdiff+0x80>
 80059ac:	1b33      	subs	r3, r6, r4
 80059ae:	3b15      	subs	r3, #21
 80059b0:	f023 0303 	bic.w	r3, r3, #3
 80059b4:	3304      	adds	r3, #4
 80059b6:	3415      	adds	r4, #21
 80059b8:	42a6      	cmp	r6, r4
 80059ba:	bf38      	it	cc
 80059bc:	2304      	movcc	r3, #4
 80059be:	441d      	add	r5, r3
 80059c0:	4473      	add	r3, lr
 80059c2:	469e      	mov	lr, r3
 80059c4:	462e      	mov	r6, r5
 80059c6:	4566      	cmp	r6, ip
 80059c8:	d30e      	bcc.n	80059e8 <__mdiff+0xec>
 80059ca:	f10c 0203 	add.w	r2, ip, #3
 80059ce:	1b52      	subs	r2, r2, r5
 80059d0:	f022 0203 	bic.w	r2, r2, #3
 80059d4:	3d03      	subs	r5, #3
 80059d6:	45ac      	cmp	ip, r5
 80059d8:	bf38      	it	cc
 80059da:	2200      	movcc	r2, #0
 80059dc:	441a      	add	r2, r3
 80059de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80059e2:	b17b      	cbz	r3, 8005a04 <__mdiff+0x108>
 80059e4:	6107      	str	r7, [r0, #16]
 80059e6:	e7a3      	b.n	8005930 <__mdiff+0x34>
 80059e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80059ec:	fa11 f288 	uxtah	r2, r1, r8
 80059f0:	1414      	asrs	r4, r2, #16
 80059f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80059f6:	b292      	uxth	r2, r2
 80059f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80059fc:	f84e 2b04 	str.w	r2, [lr], #4
 8005a00:	1421      	asrs	r1, r4, #16
 8005a02:	e7e0      	b.n	80059c6 <__mdiff+0xca>
 8005a04:	3f01      	subs	r7, #1
 8005a06:	e7ea      	b.n	80059de <__mdiff+0xe2>
 8005a08:	0800811b 	.word	0x0800811b
 8005a0c:	0800812c 	.word	0x0800812c

08005a10 <__d2b>:
 8005a10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a14:	4689      	mov	r9, r1
 8005a16:	2101      	movs	r1, #1
 8005a18:	ec57 6b10 	vmov	r6, r7, d0
 8005a1c:	4690      	mov	r8, r2
 8005a1e:	f7ff fccf 	bl	80053c0 <_Balloc>
 8005a22:	4604      	mov	r4, r0
 8005a24:	b930      	cbnz	r0, 8005a34 <__d2b+0x24>
 8005a26:	4602      	mov	r2, r0
 8005a28:	4b25      	ldr	r3, [pc, #148]	; (8005ac0 <__d2b+0xb0>)
 8005a2a:	4826      	ldr	r0, [pc, #152]	; (8005ac4 <__d2b+0xb4>)
 8005a2c:	f240 310a 	movw	r1, #778	; 0x30a
 8005a30:	f000 f9bc 	bl	8005dac <__assert_func>
 8005a34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005a38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005a3c:	bb35      	cbnz	r5, 8005a8c <__d2b+0x7c>
 8005a3e:	2e00      	cmp	r6, #0
 8005a40:	9301      	str	r3, [sp, #4]
 8005a42:	d028      	beq.n	8005a96 <__d2b+0x86>
 8005a44:	4668      	mov	r0, sp
 8005a46:	9600      	str	r6, [sp, #0]
 8005a48:	f7ff fd82 	bl	8005550 <__lo0bits>
 8005a4c:	9900      	ldr	r1, [sp, #0]
 8005a4e:	b300      	cbz	r0, 8005a92 <__d2b+0x82>
 8005a50:	9a01      	ldr	r2, [sp, #4]
 8005a52:	f1c0 0320 	rsb	r3, r0, #32
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	430b      	orrs	r3, r1
 8005a5c:	40c2      	lsrs	r2, r0
 8005a5e:	6163      	str	r3, [r4, #20]
 8005a60:	9201      	str	r2, [sp, #4]
 8005a62:	9b01      	ldr	r3, [sp, #4]
 8005a64:	61a3      	str	r3, [r4, #24]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	bf14      	ite	ne
 8005a6a:	2202      	movne	r2, #2
 8005a6c:	2201      	moveq	r2, #1
 8005a6e:	6122      	str	r2, [r4, #16]
 8005a70:	b1d5      	cbz	r5, 8005aa8 <__d2b+0x98>
 8005a72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005a76:	4405      	add	r5, r0
 8005a78:	f8c9 5000 	str.w	r5, [r9]
 8005a7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005a80:	f8c8 0000 	str.w	r0, [r8]
 8005a84:	4620      	mov	r0, r4
 8005a86:	b003      	add	sp, #12
 8005a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a90:	e7d5      	b.n	8005a3e <__d2b+0x2e>
 8005a92:	6161      	str	r1, [r4, #20]
 8005a94:	e7e5      	b.n	8005a62 <__d2b+0x52>
 8005a96:	a801      	add	r0, sp, #4
 8005a98:	f7ff fd5a 	bl	8005550 <__lo0bits>
 8005a9c:	9b01      	ldr	r3, [sp, #4]
 8005a9e:	6163      	str	r3, [r4, #20]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	6122      	str	r2, [r4, #16]
 8005aa4:	3020      	adds	r0, #32
 8005aa6:	e7e3      	b.n	8005a70 <__d2b+0x60>
 8005aa8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005aac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005ab0:	f8c9 0000 	str.w	r0, [r9]
 8005ab4:	6918      	ldr	r0, [r3, #16]
 8005ab6:	f7ff fd2b 	bl	8005510 <__hi0bits>
 8005aba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005abe:	e7df      	b.n	8005a80 <__d2b+0x70>
 8005ac0:	0800811b 	.word	0x0800811b
 8005ac4:	0800812c 	.word	0x0800812c

08005ac8 <_calloc_r>:
 8005ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005aca:	fba1 2402 	umull	r2, r4, r1, r2
 8005ace:	b94c      	cbnz	r4, 8005ae4 <_calloc_r+0x1c>
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	9201      	str	r2, [sp, #4]
 8005ad4:	f7fe f8ce 	bl	8003c74 <_malloc_r>
 8005ad8:	9a01      	ldr	r2, [sp, #4]
 8005ada:	4605      	mov	r5, r0
 8005adc:	b930      	cbnz	r0, 8005aec <_calloc_r+0x24>
 8005ade:	4628      	mov	r0, r5
 8005ae0:	b003      	add	sp, #12
 8005ae2:	bd30      	pop	{r4, r5, pc}
 8005ae4:	220c      	movs	r2, #12
 8005ae6:	6002      	str	r2, [r0, #0]
 8005ae8:	2500      	movs	r5, #0
 8005aea:	e7f8      	b.n	8005ade <_calloc_r+0x16>
 8005aec:	4621      	mov	r1, r4
 8005aee:	f7fe f84d 	bl	8003b8c <memset>
 8005af2:	e7f4      	b.n	8005ade <_calloc_r+0x16>

08005af4 <__ssputs_r>:
 8005af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af8:	688e      	ldr	r6, [r1, #8]
 8005afa:	429e      	cmp	r6, r3
 8005afc:	4682      	mov	sl, r0
 8005afe:	460c      	mov	r4, r1
 8005b00:	4690      	mov	r8, r2
 8005b02:	461f      	mov	r7, r3
 8005b04:	d838      	bhi.n	8005b78 <__ssputs_r+0x84>
 8005b06:	898a      	ldrh	r2, [r1, #12]
 8005b08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b0c:	d032      	beq.n	8005b74 <__ssputs_r+0x80>
 8005b0e:	6825      	ldr	r5, [r4, #0]
 8005b10:	6909      	ldr	r1, [r1, #16]
 8005b12:	eba5 0901 	sub.w	r9, r5, r1
 8005b16:	6965      	ldr	r5, [r4, #20]
 8005b18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b20:	3301      	adds	r3, #1
 8005b22:	444b      	add	r3, r9
 8005b24:	106d      	asrs	r5, r5, #1
 8005b26:	429d      	cmp	r5, r3
 8005b28:	bf38      	it	cc
 8005b2a:	461d      	movcc	r5, r3
 8005b2c:	0553      	lsls	r3, r2, #21
 8005b2e:	d531      	bpl.n	8005b94 <__ssputs_r+0xa0>
 8005b30:	4629      	mov	r1, r5
 8005b32:	f7fe f89f 	bl	8003c74 <_malloc_r>
 8005b36:	4606      	mov	r6, r0
 8005b38:	b950      	cbnz	r0, 8005b50 <__ssputs_r+0x5c>
 8005b3a:	230c      	movs	r3, #12
 8005b3c:	f8ca 3000 	str.w	r3, [sl]
 8005b40:	89a3      	ldrh	r3, [r4, #12]
 8005b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b46:	81a3      	strh	r3, [r4, #12]
 8005b48:	f04f 30ff 	mov.w	r0, #4294967295
 8005b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b50:	6921      	ldr	r1, [r4, #16]
 8005b52:	464a      	mov	r2, r9
 8005b54:	f7ff fc1a 	bl	800538c <memcpy>
 8005b58:	89a3      	ldrh	r3, [r4, #12]
 8005b5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b62:	81a3      	strh	r3, [r4, #12]
 8005b64:	6126      	str	r6, [r4, #16]
 8005b66:	6165      	str	r5, [r4, #20]
 8005b68:	444e      	add	r6, r9
 8005b6a:	eba5 0509 	sub.w	r5, r5, r9
 8005b6e:	6026      	str	r6, [r4, #0]
 8005b70:	60a5      	str	r5, [r4, #8]
 8005b72:	463e      	mov	r6, r7
 8005b74:	42be      	cmp	r6, r7
 8005b76:	d900      	bls.n	8005b7a <__ssputs_r+0x86>
 8005b78:	463e      	mov	r6, r7
 8005b7a:	6820      	ldr	r0, [r4, #0]
 8005b7c:	4632      	mov	r2, r6
 8005b7e:	4641      	mov	r1, r8
 8005b80:	f000 f959 	bl	8005e36 <memmove>
 8005b84:	68a3      	ldr	r3, [r4, #8]
 8005b86:	1b9b      	subs	r3, r3, r6
 8005b88:	60a3      	str	r3, [r4, #8]
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	4433      	add	r3, r6
 8005b8e:	6023      	str	r3, [r4, #0]
 8005b90:	2000      	movs	r0, #0
 8005b92:	e7db      	b.n	8005b4c <__ssputs_r+0x58>
 8005b94:	462a      	mov	r2, r5
 8005b96:	f000 f968 	bl	8005e6a <_realloc_r>
 8005b9a:	4606      	mov	r6, r0
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d1e1      	bne.n	8005b64 <__ssputs_r+0x70>
 8005ba0:	6921      	ldr	r1, [r4, #16]
 8005ba2:	4650      	mov	r0, sl
 8005ba4:	f7fd fffa 	bl	8003b9c <_free_r>
 8005ba8:	e7c7      	b.n	8005b3a <__ssputs_r+0x46>
	...

08005bac <_svfiprintf_r>:
 8005bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb0:	4698      	mov	r8, r3
 8005bb2:	898b      	ldrh	r3, [r1, #12]
 8005bb4:	061b      	lsls	r3, r3, #24
 8005bb6:	b09d      	sub	sp, #116	; 0x74
 8005bb8:	4607      	mov	r7, r0
 8005bba:	460d      	mov	r5, r1
 8005bbc:	4614      	mov	r4, r2
 8005bbe:	d50e      	bpl.n	8005bde <_svfiprintf_r+0x32>
 8005bc0:	690b      	ldr	r3, [r1, #16]
 8005bc2:	b963      	cbnz	r3, 8005bde <_svfiprintf_r+0x32>
 8005bc4:	2140      	movs	r1, #64	; 0x40
 8005bc6:	f7fe f855 	bl	8003c74 <_malloc_r>
 8005bca:	6028      	str	r0, [r5, #0]
 8005bcc:	6128      	str	r0, [r5, #16]
 8005bce:	b920      	cbnz	r0, 8005bda <_svfiprintf_r+0x2e>
 8005bd0:	230c      	movs	r3, #12
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd8:	e0d1      	b.n	8005d7e <_svfiprintf_r+0x1d2>
 8005bda:	2340      	movs	r3, #64	; 0x40
 8005bdc:	616b      	str	r3, [r5, #20]
 8005bde:	2300      	movs	r3, #0
 8005be0:	9309      	str	r3, [sp, #36]	; 0x24
 8005be2:	2320      	movs	r3, #32
 8005be4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005be8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bec:	2330      	movs	r3, #48	; 0x30
 8005bee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d98 <_svfiprintf_r+0x1ec>
 8005bf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bf6:	f04f 0901 	mov.w	r9, #1
 8005bfa:	4623      	mov	r3, r4
 8005bfc:	469a      	mov	sl, r3
 8005bfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c02:	b10a      	cbz	r2, 8005c08 <_svfiprintf_r+0x5c>
 8005c04:	2a25      	cmp	r2, #37	; 0x25
 8005c06:	d1f9      	bne.n	8005bfc <_svfiprintf_r+0x50>
 8005c08:	ebba 0b04 	subs.w	fp, sl, r4
 8005c0c:	d00b      	beq.n	8005c26 <_svfiprintf_r+0x7a>
 8005c0e:	465b      	mov	r3, fp
 8005c10:	4622      	mov	r2, r4
 8005c12:	4629      	mov	r1, r5
 8005c14:	4638      	mov	r0, r7
 8005c16:	f7ff ff6d 	bl	8005af4 <__ssputs_r>
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	f000 80aa 	beq.w	8005d74 <_svfiprintf_r+0x1c8>
 8005c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c22:	445a      	add	r2, fp
 8005c24:	9209      	str	r2, [sp, #36]	; 0x24
 8005c26:	f89a 3000 	ldrb.w	r3, [sl]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 80a2 	beq.w	8005d74 <_svfiprintf_r+0x1c8>
 8005c30:	2300      	movs	r3, #0
 8005c32:	f04f 32ff 	mov.w	r2, #4294967295
 8005c36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c3a:	f10a 0a01 	add.w	sl, sl, #1
 8005c3e:	9304      	str	r3, [sp, #16]
 8005c40:	9307      	str	r3, [sp, #28]
 8005c42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c46:	931a      	str	r3, [sp, #104]	; 0x68
 8005c48:	4654      	mov	r4, sl
 8005c4a:	2205      	movs	r2, #5
 8005c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c50:	4851      	ldr	r0, [pc, #324]	; (8005d98 <_svfiprintf_r+0x1ec>)
 8005c52:	f7fa facd 	bl	80001f0 <memchr>
 8005c56:	9a04      	ldr	r2, [sp, #16]
 8005c58:	b9d8      	cbnz	r0, 8005c92 <_svfiprintf_r+0xe6>
 8005c5a:	06d0      	lsls	r0, r2, #27
 8005c5c:	bf44      	itt	mi
 8005c5e:	2320      	movmi	r3, #32
 8005c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c64:	0711      	lsls	r1, r2, #28
 8005c66:	bf44      	itt	mi
 8005c68:	232b      	movmi	r3, #43	; 0x2b
 8005c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c72:	2b2a      	cmp	r3, #42	; 0x2a
 8005c74:	d015      	beq.n	8005ca2 <_svfiprintf_r+0xf6>
 8005c76:	9a07      	ldr	r2, [sp, #28]
 8005c78:	4654      	mov	r4, sl
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	f04f 0c0a 	mov.w	ip, #10
 8005c80:	4621      	mov	r1, r4
 8005c82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c86:	3b30      	subs	r3, #48	; 0x30
 8005c88:	2b09      	cmp	r3, #9
 8005c8a:	d94e      	bls.n	8005d2a <_svfiprintf_r+0x17e>
 8005c8c:	b1b0      	cbz	r0, 8005cbc <_svfiprintf_r+0x110>
 8005c8e:	9207      	str	r2, [sp, #28]
 8005c90:	e014      	b.n	8005cbc <_svfiprintf_r+0x110>
 8005c92:	eba0 0308 	sub.w	r3, r0, r8
 8005c96:	fa09 f303 	lsl.w	r3, r9, r3
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	9304      	str	r3, [sp, #16]
 8005c9e:	46a2      	mov	sl, r4
 8005ca0:	e7d2      	b.n	8005c48 <_svfiprintf_r+0x9c>
 8005ca2:	9b03      	ldr	r3, [sp, #12]
 8005ca4:	1d19      	adds	r1, r3, #4
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	9103      	str	r1, [sp, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	bfbb      	ittet	lt
 8005cae:	425b      	neglt	r3, r3
 8005cb0:	f042 0202 	orrlt.w	r2, r2, #2
 8005cb4:	9307      	strge	r3, [sp, #28]
 8005cb6:	9307      	strlt	r3, [sp, #28]
 8005cb8:	bfb8      	it	lt
 8005cba:	9204      	strlt	r2, [sp, #16]
 8005cbc:	7823      	ldrb	r3, [r4, #0]
 8005cbe:	2b2e      	cmp	r3, #46	; 0x2e
 8005cc0:	d10c      	bne.n	8005cdc <_svfiprintf_r+0x130>
 8005cc2:	7863      	ldrb	r3, [r4, #1]
 8005cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8005cc6:	d135      	bne.n	8005d34 <_svfiprintf_r+0x188>
 8005cc8:	9b03      	ldr	r3, [sp, #12]
 8005cca:	1d1a      	adds	r2, r3, #4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	9203      	str	r2, [sp, #12]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	bfb8      	it	lt
 8005cd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cd8:	3402      	adds	r4, #2
 8005cda:	9305      	str	r3, [sp, #20]
 8005cdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005da8 <_svfiprintf_r+0x1fc>
 8005ce0:	7821      	ldrb	r1, [r4, #0]
 8005ce2:	2203      	movs	r2, #3
 8005ce4:	4650      	mov	r0, sl
 8005ce6:	f7fa fa83 	bl	80001f0 <memchr>
 8005cea:	b140      	cbz	r0, 8005cfe <_svfiprintf_r+0x152>
 8005cec:	2340      	movs	r3, #64	; 0x40
 8005cee:	eba0 000a 	sub.w	r0, r0, sl
 8005cf2:	fa03 f000 	lsl.w	r0, r3, r0
 8005cf6:	9b04      	ldr	r3, [sp, #16]
 8005cf8:	4303      	orrs	r3, r0
 8005cfa:	3401      	adds	r4, #1
 8005cfc:	9304      	str	r3, [sp, #16]
 8005cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d02:	4826      	ldr	r0, [pc, #152]	; (8005d9c <_svfiprintf_r+0x1f0>)
 8005d04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d08:	2206      	movs	r2, #6
 8005d0a:	f7fa fa71 	bl	80001f0 <memchr>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d038      	beq.n	8005d84 <_svfiprintf_r+0x1d8>
 8005d12:	4b23      	ldr	r3, [pc, #140]	; (8005da0 <_svfiprintf_r+0x1f4>)
 8005d14:	bb1b      	cbnz	r3, 8005d5e <_svfiprintf_r+0x1b2>
 8005d16:	9b03      	ldr	r3, [sp, #12]
 8005d18:	3307      	adds	r3, #7
 8005d1a:	f023 0307 	bic.w	r3, r3, #7
 8005d1e:	3308      	adds	r3, #8
 8005d20:	9303      	str	r3, [sp, #12]
 8005d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d24:	4433      	add	r3, r6
 8005d26:	9309      	str	r3, [sp, #36]	; 0x24
 8005d28:	e767      	b.n	8005bfa <_svfiprintf_r+0x4e>
 8005d2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d2e:	460c      	mov	r4, r1
 8005d30:	2001      	movs	r0, #1
 8005d32:	e7a5      	b.n	8005c80 <_svfiprintf_r+0xd4>
 8005d34:	2300      	movs	r3, #0
 8005d36:	3401      	adds	r4, #1
 8005d38:	9305      	str	r3, [sp, #20]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	f04f 0c0a 	mov.w	ip, #10
 8005d40:	4620      	mov	r0, r4
 8005d42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d46:	3a30      	subs	r2, #48	; 0x30
 8005d48:	2a09      	cmp	r2, #9
 8005d4a:	d903      	bls.n	8005d54 <_svfiprintf_r+0x1a8>
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0c5      	beq.n	8005cdc <_svfiprintf_r+0x130>
 8005d50:	9105      	str	r1, [sp, #20]
 8005d52:	e7c3      	b.n	8005cdc <_svfiprintf_r+0x130>
 8005d54:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d58:	4604      	mov	r4, r0
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e7f0      	b.n	8005d40 <_svfiprintf_r+0x194>
 8005d5e:	ab03      	add	r3, sp, #12
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	462a      	mov	r2, r5
 8005d64:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <_svfiprintf_r+0x1f8>)
 8005d66:	a904      	add	r1, sp, #16
 8005d68:	4638      	mov	r0, r7
 8005d6a:	f7fe f897 	bl	8003e9c <_printf_float>
 8005d6e:	1c42      	adds	r2, r0, #1
 8005d70:	4606      	mov	r6, r0
 8005d72:	d1d6      	bne.n	8005d22 <_svfiprintf_r+0x176>
 8005d74:	89ab      	ldrh	r3, [r5, #12]
 8005d76:	065b      	lsls	r3, r3, #25
 8005d78:	f53f af2c 	bmi.w	8005bd4 <_svfiprintf_r+0x28>
 8005d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d7e:	b01d      	add	sp, #116	; 0x74
 8005d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d84:	ab03      	add	r3, sp, #12
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	462a      	mov	r2, r5
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <_svfiprintf_r+0x1f8>)
 8005d8c:	a904      	add	r1, sp, #16
 8005d8e:	4638      	mov	r0, r7
 8005d90:	f7fe fb28 	bl	80043e4 <_printf_i>
 8005d94:	e7eb      	b.n	8005d6e <_svfiprintf_r+0x1c2>
 8005d96:	bf00      	nop
 8005d98:	08008284 	.word	0x08008284
 8005d9c:	0800828e 	.word	0x0800828e
 8005da0:	08003e9d 	.word	0x08003e9d
 8005da4:	08005af5 	.word	0x08005af5
 8005da8:	0800828a 	.word	0x0800828a

08005dac <__assert_func>:
 8005dac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005dae:	4614      	mov	r4, r2
 8005db0:	461a      	mov	r2, r3
 8005db2:	4b09      	ldr	r3, [pc, #36]	; (8005dd8 <__assert_func+0x2c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4605      	mov	r5, r0
 8005db8:	68d8      	ldr	r0, [r3, #12]
 8005dba:	b14c      	cbz	r4, 8005dd0 <__assert_func+0x24>
 8005dbc:	4b07      	ldr	r3, [pc, #28]	; (8005ddc <__assert_func+0x30>)
 8005dbe:	9100      	str	r1, [sp, #0]
 8005dc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005dc4:	4906      	ldr	r1, [pc, #24]	; (8005de0 <__assert_func+0x34>)
 8005dc6:	462b      	mov	r3, r5
 8005dc8:	f000 f80e 	bl	8005de8 <fiprintf>
 8005dcc:	f000 faa4 	bl	8006318 <abort>
 8005dd0:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <__assert_func+0x38>)
 8005dd2:	461c      	mov	r4, r3
 8005dd4:	e7f3      	b.n	8005dbe <__assert_func+0x12>
 8005dd6:	bf00      	nop
 8005dd8:	20000020 	.word	0x20000020
 8005ddc:	08008295 	.word	0x08008295
 8005de0:	080082a2 	.word	0x080082a2
 8005de4:	080082d0 	.word	0x080082d0

08005de8 <fiprintf>:
 8005de8:	b40e      	push	{r1, r2, r3}
 8005dea:	b503      	push	{r0, r1, lr}
 8005dec:	4601      	mov	r1, r0
 8005dee:	ab03      	add	r3, sp, #12
 8005df0:	4805      	ldr	r0, [pc, #20]	; (8005e08 <fiprintf+0x20>)
 8005df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005df6:	6800      	ldr	r0, [r0, #0]
 8005df8:	9301      	str	r3, [sp, #4]
 8005dfa:	f000 f88f 	bl	8005f1c <_vfiprintf_r>
 8005dfe:	b002      	add	sp, #8
 8005e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e04:	b003      	add	sp, #12
 8005e06:	4770      	bx	lr
 8005e08:	20000020 	.word	0x20000020

08005e0c <__retarget_lock_init_recursive>:
 8005e0c:	4770      	bx	lr

08005e0e <__retarget_lock_acquire_recursive>:
 8005e0e:	4770      	bx	lr

08005e10 <__retarget_lock_release_recursive>:
 8005e10:	4770      	bx	lr

08005e12 <__ascii_mbtowc>:
 8005e12:	b082      	sub	sp, #8
 8005e14:	b901      	cbnz	r1, 8005e18 <__ascii_mbtowc+0x6>
 8005e16:	a901      	add	r1, sp, #4
 8005e18:	b142      	cbz	r2, 8005e2c <__ascii_mbtowc+0x1a>
 8005e1a:	b14b      	cbz	r3, 8005e30 <__ascii_mbtowc+0x1e>
 8005e1c:	7813      	ldrb	r3, [r2, #0]
 8005e1e:	600b      	str	r3, [r1, #0]
 8005e20:	7812      	ldrb	r2, [r2, #0]
 8005e22:	1e10      	subs	r0, r2, #0
 8005e24:	bf18      	it	ne
 8005e26:	2001      	movne	r0, #1
 8005e28:	b002      	add	sp, #8
 8005e2a:	4770      	bx	lr
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	e7fb      	b.n	8005e28 <__ascii_mbtowc+0x16>
 8005e30:	f06f 0001 	mvn.w	r0, #1
 8005e34:	e7f8      	b.n	8005e28 <__ascii_mbtowc+0x16>

08005e36 <memmove>:
 8005e36:	4288      	cmp	r0, r1
 8005e38:	b510      	push	{r4, lr}
 8005e3a:	eb01 0402 	add.w	r4, r1, r2
 8005e3e:	d902      	bls.n	8005e46 <memmove+0x10>
 8005e40:	4284      	cmp	r4, r0
 8005e42:	4623      	mov	r3, r4
 8005e44:	d807      	bhi.n	8005e56 <memmove+0x20>
 8005e46:	1e43      	subs	r3, r0, #1
 8005e48:	42a1      	cmp	r1, r4
 8005e4a:	d008      	beq.n	8005e5e <memmove+0x28>
 8005e4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e50:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e54:	e7f8      	b.n	8005e48 <memmove+0x12>
 8005e56:	4402      	add	r2, r0
 8005e58:	4601      	mov	r1, r0
 8005e5a:	428a      	cmp	r2, r1
 8005e5c:	d100      	bne.n	8005e60 <memmove+0x2a>
 8005e5e:	bd10      	pop	{r4, pc}
 8005e60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e64:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e68:	e7f7      	b.n	8005e5a <memmove+0x24>

08005e6a <_realloc_r>:
 8005e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e6e:	4680      	mov	r8, r0
 8005e70:	4614      	mov	r4, r2
 8005e72:	460e      	mov	r6, r1
 8005e74:	b921      	cbnz	r1, 8005e80 <_realloc_r+0x16>
 8005e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	f7fd befa 	b.w	8003c74 <_malloc_r>
 8005e80:	b92a      	cbnz	r2, 8005e8e <_realloc_r+0x24>
 8005e82:	f7fd fe8b 	bl	8003b9c <_free_r>
 8005e86:	4625      	mov	r5, r4
 8005e88:	4628      	mov	r0, r5
 8005e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e8e:	f000 fc67 	bl	8006760 <_malloc_usable_size_r>
 8005e92:	4284      	cmp	r4, r0
 8005e94:	4607      	mov	r7, r0
 8005e96:	d802      	bhi.n	8005e9e <_realloc_r+0x34>
 8005e98:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e9c:	d812      	bhi.n	8005ec4 <_realloc_r+0x5a>
 8005e9e:	4621      	mov	r1, r4
 8005ea0:	4640      	mov	r0, r8
 8005ea2:	f7fd fee7 	bl	8003c74 <_malloc_r>
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d0ed      	beq.n	8005e88 <_realloc_r+0x1e>
 8005eac:	42bc      	cmp	r4, r7
 8005eae:	4622      	mov	r2, r4
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	bf28      	it	cs
 8005eb4:	463a      	movcs	r2, r7
 8005eb6:	f7ff fa69 	bl	800538c <memcpy>
 8005eba:	4631      	mov	r1, r6
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	f7fd fe6d 	bl	8003b9c <_free_r>
 8005ec2:	e7e1      	b.n	8005e88 <_realloc_r+0x1e>
 8005ec4:	4635      	mov	r5, r6
 8005ec6:	e7df      	b.n	8005e88 <_realloc_r+0x1e>

08005ec8 <__sfputc_r>:
 8005ec8:	6893      	ldr	r3, [r2, #8]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	b410      	push	{r4}
 8005ed0:	6093      	str	r3, [r2, #8]
 8005ed2:	da08      	bge.n	8005ee6 <__sfputc_r+0x1e>
 8005ed4:	6994      	ldr	r4, [r2, #24]
 8005ed6:	42a3      	cmp	r3, r4
 8005ed8:	db01      	blt.n	8005ede <__sfputc_r+0x16>
 8005eda:	290a      	cmp	r1, #10
 8005edc:	d103      	bne.n	8005ee6 <__sfputc_r+0x1e>
 8005ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ee2:	f000 b94b 	b.w	800617c <__swbuf_r>
 8005ee6:	6813      	ldr	r3, [r2, #0]
 8005ee8:	1c58      	adds	r0, r3, #1
 8005eea:	6010      	str	r0, [r2, #0]
 8005eec:	7019      	strb	r1, [r3, #0]
 8005eee:	4608      	mov	r0, r1
 8005ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <__sfputs_r>:
 8005ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef8:	4606      	mov	r6, r0
 8005efa:	460f      	mov	r7, r1
 8005efc:	4614      	mov	r4, r2
 8005efe:	18d5      	adds	r5, r2, r3
 8005f00:	42ac      	cmp	r4, r5
 8005f02:	d101      	bne.n	8005f08 <__sfputs_r+0x12>
 8005f04:	2000      	movs	r0, #0
 8005f06:	e007      	b.n	8005f18 <__sfputs_r+0x22>
 8005f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f0c:	463a      	mov	r2, r7
 8005f0e:	4630      	mov	r0, r6
 8005f10:	f7ff ffda 	bl	8005ec8 <__sfputc_r>
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d1f3      	bne.n	8005f00 <__sfputs_r+0xa>
 8005f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f1c <_vfiprintf_r>:
 8005f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f20:	460d      	mov	r5, r1
 8005f22:	b09d      	sub	sp, #116	; 0x74
 8005f24:	4614      	mov	r4, r2
 8005f26:	4698      	mov	r8, r3
 8005f28:	4606      	mov	r6, r0
 8005f2a:	b118      	cbz	r0, 8005f34 <_vfiprintf_r+0x18>
 8005f2c:	6983      	ldr	r3, [r0, #24]
 8005f2e:	b90b      	cbnz	r3, 8005f34 <_vfiprintf_r+0x18>
 8005f30:	f000 fb14 	bl	800655c <__sinit>
 8005f34:	4b89      	ldr	r3, [pc, #548]	; (800615c <_vfiprintf_r+0x240>)
 8005f36:	429d      	cmp	r5, r3
 8005f38:	d11b      	bne.n	8005f72 <_vfiprintf_r+0x56>
 8005f3a:	6875      	ldr	r5, [r6, #4]
 8005f3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f3e:	07d9      	lsls	r1, r3, #31
 8005f40:	d405      	bmi.n	8005f4e <_vfiprintf_r+0x32>
 8005f42:	89ab      	ldrh	r3, [r5, #12]
 8005f44:	059a      	lsls	r2, r3, #22
 8005f46:	d402      	bmi.n	8005f4e <_vfiprintf_r+0x32>
 8005f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f4a:	f7ff ff60 	bl	8005e0e <__retarget_lock_acquire_recursive>
 8005f4e:	89ab      	ldrh	r3, [r5, #12]
 8005f50:	071b      	lsls	r3, r3, #28
 8005f52:	d501      	bpl.n	8005f58 <_vfiprintf_r+0x3c>
 8005f54:	692b      	ldr	r3, [r5, #16]
 8005f56:	b9eb      	cbnz	r3, 8005f94 <_vfiprintf_r+0x78>
 8005f58:	4629      	mov	r1, r5
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	f000 f96e 	bl	800623c <__swsetup_r>
 8005f60:	b1c0      	cbz	r0, 8005f94 <_vfiprintf_r+0x78>
 8005f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f64:	07dc      	lsls	r4, r3, #31
 8005f66:	d50e      	bpl.n	8005f86 <_vfiprintf_r+0x6a>
 8005f68:	f04f 30ff 	mov.w	r0, #4294967295
 8005f6c:	b01d      	add	sp, #116	; 0x74
 8005f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f72:	4b7b      	ldr	r3, [pc, #492]	; (8006160 <_vfiprintf_r+0x244>)
 8005f74:	429d      	cmp	r5, r3
 8005f76:	d101      	bne.n	8005f7c <_vfiprintf_r+0x60>
 8005f78:	68b5      	ldr	r5, [r6, #8]
 8005f7a:	e7df      	b.n	8005f3c <_vfiprintf_r+0x20>
 8005f7c:	4b79      	ldr	r3, [pc, #484]	; (8006164 <_vfiprintf_r+0x248>)
 8005f7e:	429d      	cmp	r5, r3
 8005f80:	bf08      	it	eq
 8005f82:	68f5      	ldreq	r5, [r6, #12]
 8005f84:	e7da      	b.n	8005f3c <_vfiprintf_r+0x20>
 8005f86:	89ab      	ldrh	r3, [r5, #12]
 8005f88:	0598      	lsls	r0, r3, #22
 8005f8a:	d4ed      	bmi.n	8005f68 <_vfiprintf_r+0x4c>
 8005f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f8e:	f7ff ff3f 	bl	8005e10 <__retarget_lock_release_recursive>
 8005f92:	e7e9      	b.n	8005f68 <_vfiprintf_r+0x4c>
 8005f94:	2300      	movs	r3, #0
 8005f96:	9309      	str	r3, [sp, #36]	; 0x24
 8005f98:	2320      	movs	r3, #32
 8005f9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fa2:	2330      	movs	r3, #48	; 0x30
 8005fa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006168 <_vfiprintf_r+0x24c>
 8005fa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fac:	f04f 0901 	mov.w	r9, #1
 8005fb0:	4623      	mov	r3, r4
 8005fb2:	469a      	mov	sl, r3
 8005fb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fb8:	b10a      	cbz	r2, 8005fbe <_vfiprintf_r+0xa2>
 8005fba:	2a25      	cmp	r2, #37	; 0x25
 8005fbc:	d1f9      	bne.n	8005fb2 <_vfiprintf_r+0x96>
 8005fbe:	ebba 0b04 	subs.w	fp, sl, r4
 8005fc2:	d00b      	beq.n	8005fdc <_vfiprintf_r+0xc0>
 8005fc4:	465b      	mov	r3, fp
 8005fc6:	4622      	mov	r2, r4
 8005fc8:	4629      	mov	r1, r5
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7ff ff93 	bl	8005ef6 <__sfputs_r>
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	f000 80aa 	beq.w	800612a <_vfiprintf_r+0x20e>
 8005fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fd8:	445a      	add	r2, fp
 8005fda:	9209      	str	r2, [sp, #36]	; 0x24
 8005fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 80a2 	beq.w	800612a <_vfiprintf_r+0x20e>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ff0:	f10a 0a01 	add.w	sl, sl, #1
 8005ff4:	9304      	str	r3, [sp, #16]
 8005ff6:	9307      	str	r3, [sp, #28]
 8005ff8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ffc:	931a      	str	r3, [sp, #104]	; 0x68
 8005ffe:	4654      	mov	r4, sl
 8006000:	2205      	movs	r2, #5
 8006002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006006:	4858      	ldr	r0, [pc, #352]	; (8006168 <_vfiprintf_r+0x24c>)
 8006008:	f7fa f8f2 	bl	80001f0 <memchr>
 800600c:	9a04      	ldr	r2, [sp, #16]
 800600e:	b9d8      	cbnz	r0, 8006048 <_vfiprintf_r+0x12c>
 8006010:	06d1      	lsls	r1, r2, #27
 8006012:	bf44      	itt	mi
 8006014:	2320      	movmi	r3, #32
 8006016:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800601a:	0713      	lsls	r3, r2, #28
 800601c:	bf44      	itt	mi
 800601e:	232b      	movmi	r3, #43	; 0x2b
 8006020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006024:	f89a 3000 	ldrb.w	r3, [sl]
 8006028:	2b2a      	cmp	r3, #42	; 0x2a
 800602a:	d015      	beq.n	8006058 <_vfiprintf_r+0x13c>
 800602c:	9a07      	ldr	r2, [sp, #28]
 800602e:	4654      	mov	r4, sl
 8006030:	2000      	movs	r0, #0
 8006032:	f04f 0c0a 	mov.w	ip, #10
 8006036:	4621      	mov	r1, r4
 8006038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800603c:	3b30      	subs	r3, #48	; 0x30
 800603e:	2b09      	cmp	r3, #9
 8006040:	d94e      	bls.n	80060e0 <_vfiprintf_r+0x1c4>
 8006042:	b1b0      	cbz	r0, 8006072 <_vfiprintf_r+0x156>
 8006044:	9207      	str	r2, [sp, #28]
 8006046:	e014      	b.n	8006072 <_vfiprintf_r+0x156>
 8006048:	eba0 0308 	sub.w	r3, r0, r8
 800604c:	fa09 f303 	lsl.w	r3, r9, r3
 8006050:	4313      	orrs	r3, r2
 8006052:	9304      	str	r3, [sp, #16]
 8006054:	46a2      	mov	sl, r4
 8006056:	e7d2      	b.n	8005ffe <_vfiprintf_r+0xe2>
 8006058:	9b03      	ldr	r3, [sp, #12]
 800605a:	1d19      	adds	r1, r3, #4
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	9103      	str	r1, [sp, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	bfbb      	ittet	lt
 8006064:	425b      	neglt	r3, r3
 8006066:	f042 0202 	orrlt.w	r2, r2, #2
 800606a:	9307      	strge	r3, [sp, #28]
 800606c:	9307      	strlt	r3, [sp, #28]
 800606e:	bfb8      	it	lt
 8006070:	9204      	strlt	r2, [sp, #16]
 8006072:	7823      	ldrb	r3, [r4, #0]
 8006074:	2b2e      	cmp	r3, #46	; 0x2e
 8006076:	d10c      	bne.n	8006092 <_vfiprintf_r+0x176>
 8006078:	7863      	ldrb	r3, [r4, #1]
 800607a:	2b2a      	cmp	r3, #42	; 0x2a
 800607c:	d135      	bne.n	80060ea <_vfiprintf_r+0x1ce>
 800607e:	9b03      	ldr	r3, [sp, #12]
 8006080:	1d1a      	adds	r2, r3, #4
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	9203      	str	r2, [sp, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	bfb8      	it	lt
 800608a:	f04f 33ff 	movlt.w	r3, #4294967295
 800608e:	3402      	adds	r4, #2
 8006090:	9305      	str	r3, [sp, #20]
 8006092:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006178 <_vfiprintf_r+0x25c>
 8006096:	7821      	ldrb	r1, [r4, #0]
 8006098:	2203      	movs	r2, #3
 800609a:	4650      	mov	r0, sl
 800609c:	f7fa f8a8 	bl	80001f0 <memchr>
 80060a0:	b140      	cbz	r0, 80060b4 <_vfiprintf_r+0x198>
 80060a2:	2340      	movs	r3, #64	; 0x40
 80060a4:	eba0 000a 	sub.w	r0, r0, sl
 80060a8:	fa03 f000 	lsl.w	r0, r3, r0
 80060ac:	9b04      	ldr	r3, [sp, #16]
 80060ae:	4303      	orrs	r3, r0
 80060b0:	3401      	adds	r4, #1
 80060b2:	9304      	str	r3, [sp, #16]
 80060b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060b8:	482c      	ldr	r0, [pc, #176]	; (800616c <_vfiprintf_r+0x250>)
 80060ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060be:	2206      	movs	r2, #6
 80060c0:	f7fa f896 	bl	80001f0 <memchr>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	d03f      	beq.n	8006148 <_vfiprintf_r+0x22c>
 80060c8:	4b29      	ldr	r3, [pc, #164]	; (8006170 <_vfiprintf_r+0x254>)
 80060ca:	bb1b      	cbnz	r3, 8006114 <_vfiprintf_r+0x1f8>
 80060cc:	9b03      	ldr	r3, [sp, #12]
 80060ce:	3307      	adds	r3, #7
 80060d0:	f023 0307 	bic.w	r3, r3, #7
 80060d4:	3308      	adds	r3, #8
 80060d6:	9303      	str	r3, [sp, #12]
 80060d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060da:	443b      	add	r3, r7
 80060dc:	9309      	str	r3, [sp, #36]	; 0x24
 80060de:	e767      	b.n	8005fb0 <_vfiprintf_r+0x94>
 80060e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80060e4:	460c      	mov	r4, r1
 80060e6:	2001      	movs	r0, #1
 80060e8:	e7a5      	b.n	8006036 <_vfiprintf_r+0x11a>
 80060ea:	2300      	movs	r3, #0
 80060ec:	3401      	adds	r4, #1
 80060ee:	9305      	str	r3, [sp, #20]
 80060f0:	4619      	mov	r1, r3
 80060f2:	f04f 0c0a 	mov.w	ip, #10
 80060f6:	4620      	mov	r0, r4
 80060f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060fc:	3a30      	subs	r2, #48	; 0x30
 80060fe:	2a09      	cmp	r2, #9
 8006100:	d903      	bls.n	800610a <_vfiprintf_r+0x1ee>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0c5      	beq.n	8006092 <_vfiprintf_r+0x176>
 8006106:	9105      	str	r1, [sp, #20]
 8006108:	e7c3      	b.n	8006092 <_vfiprintf_r+0x176>
 800610a:	fb0c 2101 	mla	r1, ip, r1, r2
 800610e:	4604      	mov	r4, r0
 8006110:	2301      	movs	r3, #1
 8006112:	e7f0      	b.n	80060f6 <_vfiprintf_r+0x1da>
 8006114:	ab03      	add	r3, sp, #12
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	462a      	mov	r2, r5
 800611a:	4b16      	ldr	r3, [pc, #88]	; (8006174 <_vfiprintf_r+0x258>)
 800611c:	a904      	add	r1, sp, #16
 800611e:	4630      	mov	r0, r6
 8006120:	f7fd febc 	bl	8003e9c <_printf_float>
 8006124:	4607      	mov	r7, r0
 8006126:	1c78      	adds	r0, r7, #1
 8006128:	d1d6      	bne.n	80060d8 <_vfiprintf_r+0x1bc>
 800612a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800612c:	07d9      	lsls	r1, r3, #31
 800612e:	d405      	bmi.n	800613c <_vfiprintf_r+0x220>
 8006130:	89ab      	ldrh	r3, [r5, #12]
 8006132:	059a      	lsls	r2, r3, #22
 8006134:	d402      	bmi.n	800613c <_vfiprintf_r+0x220>
 8006136:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006138:	f7ff fe6a 	bl	8005e10 <__retarget_lock_release_recursive>
 800613c:	89ab      	ldrh	r3, [r5, #12]
 800613e:	065b      	lsls	r3, r3, #25
 8006140:	f53f af12 	bmi.w	8005f68 <_vfiprintf_r+0x4c>
 8006144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006146:	e711      	b.n	8005f6c <_vfiprintf_r+0x50>
 8006148:	ab03      	add	r3, sp, #12
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	462a      	mov	r2, r5
 800614e:	4b09      	ldr	r3, [pc, #36]	; (8006174 <_vfiprintf_r+0x258>)
 8006150:	a904      	add	r1, sp, #16
 8006152:	4630      	mov	r0, r6
 8006154:	f7fe f946 	bl	80043e4 <_printf_i>
 8006158:	e7e4      	b.n	8006124 <_vfiprintf_r+0x208>
 800615a:	bf00      	nop
 800615c:	080083fc 	.word	0x080083fc
 8006160:	0800841c 	.word	0x0800841c
 8006164:	080083dc 	.word	0x080083dc
 8006168:	08008284 	.word	0x08008284
 800616c:	0800828e 	.word	0x0800828e
 8006170:	08003e9d 	.word	0x08003e9d
 8006174:	08005ef7 	.word	0x08005ef7
 8006178:	0800828a 	.word	0x0800828a

0800617c <__swbuf_r>:
 800617c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617e:	460e      	mov	r6, r1
 8006180:	4614      	mov	r4, r2
 8006182:	4605      	mov	r5, r0
 8006184:	b118      	cbz	r0, 800618e <__swbuf_r+0x12>
 8006186:	6983      	ldr	r3, [r0, #24]
 8006188:	b90b      	cbnz	r3, 800618e <__swbuf_r+0x12>
 800618a:	f000 f9e7 	bl	800655c <__sinit>
 800618e:	4b21      	ldr	r3, [pc, #132]	; (8006214 <__swbuf_r+0x98>)
 8006190:	429c      	cmp	r4, r3
 8006192:	d12b      	bne.n	80061ec <__swbuf_r+0x70>
 8006194:	686c      	ldr	r4, [r5, #4]
 8006196:	69a3      	ldr	r3, [r4, #24]
 8006198:	60a3      	str	r3, [r4, #8]
 800619a:	89a3      	ldrh	r3, [r4, #12]
 800619c:	071a      	lsls	r2, r3, #28
 800619e:	d52f      	bpl.n	8006200 <__swbuf_r+0x84>
 80061a0:	6923      	ldr	r3, [r4, #16]
 80061a2:	b36b      	cbz	r3, 8006200 <__swbuf_r+0x84>
 80061a4:	6923      	ldr	r3, [r4, #16]
 80061a6:	6820      	ldr	r0, [r4, #0]
 80061a8:	1ac0      	subs	r0, r0, r3
 80061aa:	6963      	ldr	r3, [r4, #20]
 80061ac:	b2f6      	uxtb	r6, r6
 80061ae:	4283      	cmp	r3, r0
 80061b0:	4637      	mov	r7, r6
 80061b2:	dc04      	bgt.n	80061be <__swbuf_r+0x42>
 80061b4:	4621      	mov	r1, r4
 80061b6:	4628      	mov	r0, r5
 80061b8:	f000 f93c 	bl	8006434 <_fflush_r>
 80061bc:	bb30      	cbnz	r0, 800620c <__swbuf_r+0x90>
 80061be:	68a3      	ldr	r3, [r4, #8]
 80061c0:	3b01      	subs	r3, #1
 80061c2:	60a3      	str	r3, [r4, #8]
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	6022      	str	r2, [r4, #0]
 80061ca:	701e      	strb	r6, [r3, #0]
 80061cc:	6963      	ldr	r3, [r4, #20]
 80061ce:	3001      	adds	r0, #1
 80061d0:	4283      	cmp	r3, r0
 80061d2:	d004      	beq.n	80061de <__swbuf_r+0x62>
 80061d4:	89a3      	ldrh	r3, [r4, #12]
 80061d6:	07db      	lsls	r3, r3, #31
 80061d8:	d506      	bpl.n	80061e8 <__swbuf_r+0x6c>
 80061da:	2e0a      	cmp	r6, #10
 80061dc:	d104      	bne.n	80061e8 <__swbuf_r+0x6c>
 80061de:	4621      	mov	r1, r4
 80061e0:	4628      	mov	r0, r5
 80061e2:	f000 f927 	bl	8006434 <_fflush_r>
 80061e6:	b988      	cbnz	r0, 800620c <__swbuf_r+0x90>
 80061e8:	4638      	mov	r0, r7
 80061ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ec:	4b0a      	ldr	r3, [pc, #40]	; (8006218 <__swbuf_r+0x9c>)
 80061ee:	429c      	cmp	r4, r3
 80061f0:	d101      	bne.n	80061f6 <__swbuf_r+0x7a>
 80061f2:	68ac      	ldr	r4, [r5, #8]
 80061f4:	e7cf      	b.n	8006196 <__swbuf_r+0x1a>
 80061f6:	4b09      	ldr	r3, [pc, #36]	; (800621c <__swbuf_r+0xa0>)
 80061f8:	429c      	cmp	r4, r3
 80061fa:	bf08      	it	eq
 80061fc:	68ec      	ldreq	r4, [r5, #12]
 80061fe:	e7ca      	b.n	8006196 <__swbuf_r+0x1a>
 8006200:	4621      	mov	r1, r4
 8006202:	4628      	mov	r0, r5
 8006204:	f000 f81a 	bl	800623c <__swsetup_r>
 8006208:	2800      	cmp	r0, #0
 800620a:	d0cb      	beq.n	80061a4 <__swbuf_r+0x28>
 800620c:	f04f 37ff 	mov.w	r7, #4294967295
 8006210:	e7ea      	b.n	80061e8 <__swbuf_r+0x6c>
 8006212:	bf00      	nop
 8006214:	080083fc 	.word	0x080083fc
 8006218:	0800841c 	.word	0x0800841c
 800621c:	080083dc 	.word	0x080083dc

08006220 <__ascii_wctomb>:
 8006220:	b149      	cbz	r1, 8006236 <__ascii_wctomb+0x16>
 8006222:	2aff      	cmp	r2, #255	; 0xff
 8006224:	bf85      	ittet	hi
 8006226:	238a      	movhi	r3, #138	; 0x8a
 8006228:	6003      	strhi	r3, [r0, #0]
 800622a:	700a      	strbls	r2, [r1, #0]
 800622c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006230:	bf98      	it	ls
 8006232:	2001      	movls	r0, #1
 8006234:	4770      	bx	lr
 8006236:	4608      	mov	r0, r1
 8006238:	4770      	bx	lr
	...

0800623c <__swsetup_r>:
 800623c:	4b32      	ldr	r3, [pc, #200]	; (8006308 <__swsetup_r+0xcc>)
 800623e:	b570      	push	{r4, r5, r6, lr}
 8006240:	681d      	ldr	r5, [r3, #0]
 8006242:	4606      	mov	r6, r0
 8006244:	460c      	mov	r4, r1
 8006246:	b125      	cbz	r5, 8006252 <__swsetup_r+0x16>
 8006248:	69ab      	ldr	r3, [r5, #24]
 800624a:	b913      	cbnz	r3, 8006252 <__swsetup_r+0x16>
 800624c:	4628      	mov	r0, r5
 800624e:	f000 f985 	bl	800655c <__sinit>
 8006252:	4b2e      	ldr	r3, [pc, #184]	; (800630c <__swsetup_r+0xd0>)
 8006254:	429c      	cmp	r4, r3
 8006256:	d10f      	bne.n	8006278 <__swsetup_r+0x3c>
 8006258:	686c      	ldr	r4, [r5, #4]
 800625a:	89a3      	ldrh	r3, [r4, #12]
 800625c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006260:	0719      	lsls	r1, r3, #28
 8006262:	d42c      	bmi.n	80062be <__swsetup_r+0x82>
 8006264:	06dd      	lsls	r5, r3, #27
 8006266:	d411      	bmi.n	800628c <__swsetup_r+0x50>
 8006268:	2309      	movs	r3, #9
 800626a:	6033      	str	r3, [r6, #0]
 800626c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006270:	81a3      	strh	r3, [r4, #12]
 8006272:	f04f 30ff 	mov.w	r0, #4294967295
 8006276:	e03e      	b.n	80062f6 <__swsetup_r+0xba>
 8006278:	4b25      	ldr	r3, [pc, #148]	; (8006310 <__swsetup_r+0xd4>)
 800627a:	429c      	cmp	r4, r3
 800627c:	d101      	bne.n	8006282 <__swsetup_r+0x46>
 800627e:	68ac      	ldr	r4, [r5, #8]
 8006280:	e7eb      	b.n	800625a <__swsetup_r+0x1e>
 8006282:	4b24      	ldr	r3, [pc, #144]	; (8006314 <__swsetup_r+0xd8>)
 8006284:	429c      	cmp	r4, r3
 8006286:	bf08      	it	eq
 8006288:	68ec      	ldreq	r4, [r5, #12]
 800628a:	e7e6      	b.n	800625a <__swsetup_r+0x1e>
 800628c:	0758      	lsls	r0, r3, #29
 800628e:	d512      	bpl.n	80062b6 <__swsetup_r+0x7a>
 8006290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006292:	b141      	cbz	r1, 80062a6 <__swsetup_r+0x6a>
 8006294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006298:	4299      	cmp	r1, r3
 800629a:	d002      	beq.n	80062a2 <__swsetup_r+0x66>
 800629c:	4630      	mov	r0, r6
 800629e:	f7fd fc7d 	bl	8003b9c <_free_r>
 80062a2:	2300      	movs	r3, #0
 80062a4:	6363      	str	r3, [r4, #52]	; 0x34
 80062a6:	89a3      	ldrh	r3, [r4, #12]
 80062a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062ac:	81a3      	strh	r3, [r4, #12]
 80062ae:	2300      	movs	r3, #0
 80062b0:	6063      	str	r3, [r4, #4]
 80062b2:	6923      	ldr	r3, [r4, #16]
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	89a3      	ldrh	r3, [r4, #12]
 80062b8:	f043 0308 	orr.w	r3, r3, #8
 80062bc:	81a3      	strh	r3, [r4, #12]
 80062be:	6923      	ldr	r3, [r4, #16]
 80062c0:	b94b      	cbnz	r3, 80062d6 <__swsetup_r+0x9a>
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062cc:	d003      	beq.n	80062d6 <__swsetup_r+0x9a>
 80062ce:	4621      	mov	r1, r4
 80062d0:	4630      	mov	r0, r6
 80062d2:	f000 fa05 	bl	80066e0 <__smakebuf_r>
 80062d6:	89a0      	ldrh	r0, [r4, #12]
 80062d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062dc:	f010 0301 	ands.w	r3, r0, #1
 80062e0:	d00a      	beq.n	80062f8 <__swsetup_r+0xbc>
 80062e2:	2300      	movs	r3, #0
 80062e4:	60a3      	str	r3, [r4, #8]
 80062e6:	6963      	ldr	r3, [r4, #20]
 80062e8:	425b      	negs	r3, r3
 80062ea:	61a3      	str	r3, [r4, #24]
 80062ec:	6923      	ldr	r3, [r4, #16]
 80062ee:	b943      	cbnz	r3, 8006302 <__swsetup_r+0xc6>
 80062f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062f4:	d1ba      	bne.n	800626c <__swsetup_r+0x30>
 80062f6:	bd70      	pop	{r4, r5, r6, pc}
 80062f8:	0781      	lsls	r1, r0, #30
 80062fa:	bf58      	it	pl
 80062fc:	6963      	ldrpl	r3, [r4, #20]
 80062fe:	60a3      	str	r3, [r4, #8]
 8006300:	e7f4      	b.n	80062ec <__swsetup_r+0xb0>
 8006302:	2000      	movs	r0, #0
 8006304:	e7f7      	b.n	80062f6 <__swsetup_r+0xba>
 8006306:	bf00      	nop
 8006308:	20000020 	.word	0x20000020
 800630c:	080083fc 	.word	0x080083fc
 8006310:	0800841c 	.word	0x0800841c
 8006314:	080083dc 	.word	0x080083dc

08006318 <abort>:
 8006318:	b508      	push	{r3, lr}
 800631a:	2006      	movs	r0, #6
 800631c:	f000 fa50 	bl	80067c0 <raise>
 8006320:	2001      	movs	r0, #1
 8006322:	f7fb ff0b 	bl	800213c <_exit>
	...

08006328 <__sflush_r>:
 8006328:	898a      	ldrh	r2, [r1, #12]
 800632a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800632e:	4605      	mov	r5, r0
 8006330:	0710      	lsls	r0, r2, #28
 8006332:	460c      	mov	r4, r1
 8006334:	d458      	bmi.n	80063e8 <__sflush_r+0xc0>
 8006336:	684b      	ldr	r3, [r1, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	dc05      	bgt.n	8006348 <__sflush_r+0x20>
 800633c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	dc02      	bgt.n	8006348 <__sflush_r+0x20>
 8006342:	2000      	movs	r0, #0
 8006344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800634a:	2e00      	cmp	r6, #0
 800634c:	d0f9      	beq.n	8006342 <__sflush_r+0x1a>
 800634e:	2300      	movs	r3, #0
 8006350:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006354:	682f      	ldr	r7, [r5, #0]
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	d032      	beq.n	80063c0 <__sflush_r+0x98>
 800635a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800635c:	89a3      	ldrh	r3, [r4, #12]
 800635e:	075a      	lsls	r2, r3, #29
 8006360:	d505      	bpl.n	800636e <__sflush_r+0x46>
 8006362:	6863      	ldr	r3, [r4, #4]
 8006364:	1ac0      	subs	r0, r0, r3
 8006366:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006368:	b10b      	cbz	r3, 800636e <__sflush_r+0x46>
 800636a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800636c:	1ac0      	subs	r0, r0, r3
 800636e:	2300      	movs	r3, #0
 8006370:	4602      	mov	r2, r0
 8006372:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006374:	6a21      	ldr	r1, [r4, #32]
 8006376:	4628      	mov	r0, r5
 8006378:	47b0      	blx	r6
 800637a:	1c43      	adds	r3, r0, #1
 800637c:	89a3      	ldrh	r3, [r4, #12]
 800637e:	d106      	bne.n	800638e <__sflush_r+0x66>
 8006380:	6829      	ldr	r1, [r5, #0]
 8006382:	291d      	cmp	r1, #29
 8006384:	d82c      	bhi.n	80063e0 <__sflush_r+0xb8>
 8006386:	4a2a      	ldr	r2, [pc, #168]	; (8006430 <__sflush_r+0x108>)
 8006388:	40ca      	lsrs	r2, r1
 800638a:	07d6      	lsls	r6, r2, #31
 800638c:	d528      	bpl.n	80063e0 <__sflush_r+0xb8>
 800638e:	2200      	movs	r2, #0
 8006390:	6062      	str	r2, [r4, #4]
 8006392:	04d9      	lsls	r1, r3, #19
 8006394:	6922      	ldr	r2, [r4, #16]
 8006396:	6022      	str	r2, [r4, #0]
 8006398:	d504      	bpl.n	80063a4 <__sflush_r+0x7c>
 800639a:	1c42      	adds	r2, r0, #1
 800639c:	d101      	bne.n	80063a2 <__sflush_r+0x7a>
 800639e:	682b      	ldr	r3, [r5, #0]
 80063a0:	b903      	cbnz	r3, 80063a4 <__sflush_r+0x7c>
 80063a2:	6560      	str	r0, [r4, #84]	; 0x54
 80063a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063a6:	602f      	str	r7, [r5, #0]
 80063a8:	2900      	cmp	r1, #0
 80063aa:	d0ca      	beq.n	8006342 <__sflush_r+0x1a>
 80063ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063b0:	4299      	cmp	r1, r3
 80063b2:	d002      	beq.n	80063ba <__sflush_r+0x92>
 80063b4:	4628      	mov	r0, r5
 80063b6:	f7fd fbf1 	bl	8003b9c <_free_r>
 80063ba:	2000      	movs	r0, #0
 80063bc:	6360      	str	r0, [r4, #52]	; 0x34
 80063be:	e7c1      	b.n	8006344 <__sflush_r+0x1c>
 80063c0:	6a21      	ldr	r1, [r4, #32]
 80063c2:	2301      	movs	r3, #1
 80063c4:	4628      	mov	r0, r5
 80063c6:	47b0      	blx	r6
 80063c8:	1c41      	adds	r1, r0, #1
 80063ca:	d1c7      	bne.n	800635c <__sflush_r+0x34>
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0c4      	beq.n	800635c <__sflush_r+0x34>
 80063d2:	2b1d      	cmp	r3, #29
 80063d4:	d001      	beq.n	80063da <__sflush_r+0xb2>
 80063d6:	2b16      	cmp	r3, #22
 80063d8:	d101      	bne.n	80063de <__sflush_r+0xb6>
 80063da:	602f      	str	r7, [r5, #0]
 80063dc:	e7b1      	b.n	8006342 <__sflush_r+0x1a>
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063e4:	81a3      	strh	r3, [r4, #12]
 80063e6:	e7ad      	b.n	8006344 <__sflush_r+0x1c>
 80063e8:	690f      	ldr	r7, [r1, #16]
 80063ea:	2f00      	cmp	r7, #0
 80063ec:	d0a9      	beq.n	8006342 <__sflush_r+0x1a>
 80063ee:	0793      	lsls	r3, r2, #30
 80063f0:	680e      	ldr	r6, [r1, #0]
 80063f2:	bf08      	it	eq
 80063f4:	694b      	ldreq	r3, [r1, #20]
 80063f6:	600f      	str	r7, [r1, #0]
 80063f8:	bf18      	it	ne
 80063fa:	2300      	movne	r3, #0
 80063fc:	eba6 0807 	sub.w	r8, r6, r7
 8006400:	608b      	str	r3, [r1, #8]
 8006402:	f1b8 0f00 	cmp.w	r8, #0
 8006406:	dd9c      	ble.n	8006342 <__sflush_r+0x1a>
 8006408:	6a21      	ldr	r1, [r4, #32]
 800640a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800640c:	4643      	mov	r3, r8
 800640e:	463a      	mov	r2, r7
 8006410:	4628      	mov	r0, r5
 8006412:	47b0      	blx	r6
 8006414:	2800      	cmp	r0, #0
 8006416:	dc06      	bgt.n	8006426 <__sflush_r+0xfe>
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800641e:	81a3      	strh	r3, [r4, #12]
 8006420:	f04f 30ff 	mov.w	r0, #4294967295
 8006424:	e78e      	b.n	8006344 <__sflush_r+0x1c>
 8006426:	4407      	add	r7, r0
 8006428:	eba8 0800 	sub.w	r8, r8, r0
 800642c:	e7e9      	b.n	8006402 <__sflush_r+0xda>
 800642e:	bf00      	nop
 8006430:	20400001 	.word	0x20400001

08006434 <_fflush_r>:
 8006434:	b538      	push	{r3, r4, r5, lr}
 8006436:	690b      	ldr	r3, [r1, #16]
 8006438:	4605      	mov	r5, r0
 800643a:	460c      	mov	r4, r1
 800643c:	b913      	cbnz	r3, 8006444 <_fflush_r+0x10>
 800643e:	2500      	movs	r5, #0
 8006440:	4628      	mov	r0, r5
 8006442:	bd38      	pop	{r3, r4, r5, pc}
 8006444:	b118      	cbz	r0, 800644e <_fflush_r+0x1a>
 8006446:	6983      	ldr	r3, [r0, #24]
 8006448:	b90b      	cbnz	r3, 800644e <_fflush_r+0x1a>
 800644a:	f000 f887 	bl	800655c <__sinit>
 800644e:	4b14      	ldr	r3, [pc, #80]	; (80064a0 <_fflush_r+0x6c>)
 8006450:	429c      	cmp	r4, r3
 8006452:	d11b      	bne.n	800648c <_fflush_r+0x58>
 8006454:	686c      	ldr	r4, [r5, #4]
 8006456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d0ef      	beq.n	800643e <_fflush_r+0xa>
 800645e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006460:	07d0      	lsls	r0, r2, #31
 8006462:	d404      	bmi.n	800646e <_fflush_r+0x3a>
 8006464:	0599      	lsls	r1, r3, #22
 8006466:	d402      	bmi.n	800646e <_fflush_r+0x3a>
 8006468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800646a:	f7ff fcd0 	bl	8005e0e <__retarget_lock_acquire_recursive>
 800646e:	4628      	mov	r0, r5
 8006470:	4621      	mov	r1, r4
 8006472:	f7ff ff59 	bl	8006328 <__sflush_r>
 8006476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006478:	07da      	lsls	r2, r3, #31
 800647a:	4605      	mov	r5, r0
 800647c:	d4e0      	bmi.n	8006440 <_fflush_r+0xc>
 800647e:	89a3      	ldrh	r3, [r4, #12]
 8006480:	059b      	lsls	r3, r3, #22
 8006482:	d4dd      	bmi.n	8006440 <_fflush_r+0xc>
 8006484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006486:	f7ff fcc3 	bl	8005e10 <__retarget_lock_release_recursive>
 800648a:	e7d9      	b.n	8006440 <_fflush_r+0xc>
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <_fflush_r+0x70>)
 800648e:	429c      	cmp	r4, r3
 8006490:	d101      	bne.n	8006496 <_fflush_r+0x62>
 8006492:	68ac      	ldr	r4, [r5, #8]
 8006494:	e7df      	b.n	8006456 <_fflush_r+0x22>
 8006496:	4b04      	ldr	r3, [pc, #16]	; (80064a8 <_fflush_r+0x74>)
 8006498:	429c      	cmp	r4, r3
 800649a:	bf08      	it	eq
 800649c:	68ec      	ldreq	r4, [r5, #12]
 800649e:	e7da      	b.n	8006456 <_fflush_r+0x22>
 80064a0:	080083fc 	.word	0x080083fc
 80064a4:	0800841c 	.word	0x0800841c
 80064a8:	080083dc 	.word	0x080083dc

080064ac <std>:
 80064ac:	2300      	movs	r3, #0
 80064ae:	b510      	push	{r4, lr}
 80064b0:	4604      	mov	r4, r0
 80064b2:	e9c0 3300 	strd	r3, r3, [r0]
 80064b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064ba:	6083      	str	r3, [r0, #8]
 80064bc:	8181      	strh	r1, [r0, #12]
 80064be:	6643      	str	r3, [r0, #100]	; 0x64
 80064c0:	81c2      	strh	r2, [r0, #14]
 80064c2:	6183      	str	r3, [r0, #24]
 80064c4:	4619      	mov	r1, r3
 80064c6:	2208      	movs	r2, #8
 80064c8:	305c      	adds	r0, #92	; 0x5c
 80064ca:	f7fd fb5f 	bl	8003b8c <memset>
 80064ce:	4b05      	ldr	r3, [pc, #20]	; (80064e4 <std+0x38>)
 80064d0:	6263      	str	r3, [r4, #36]	; 0x24
 80064d2:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <std+0x3c>)
 80064d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80064d6:	4b05      	ldr	r3, [pc, #20]	; (80064ec <std+0x40>)
 80064d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064da:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <std+0x44>)
 80064dc:	6224      	str	r4, [r4, #32]
 80064de:	6323      	str	r3, [r4, #48]	; 0x30
 80064e0:	bd10      	pop	{r4, pc}
 80064e2:	bf00      	nop
 80064e4:	080067f9 	.word	0x080067f9
 80064e8:	0800681b 	.word	0x0800681b
 80064ec:	08006853 	.word	0x08006853
 80064f0:	08006877 	.word	0x08006877

080064f4 <_cleanup_r>:
 80064f4:	4901      	ldr	r1, [pc, #4]	; (80064fc <_cleanup_r+0x8>)
 80064f6:	f000 b8af 	b.w	8006658 <_fwalk_reent>
 80064fa:	bf00      	nop
 80064fc:	08006435 	.word	0x08006435

08006500 <__sfmoreglue>:
 8006500:	b570      	push	{r4, r5, r6, lr}
 8006502:	2268      	movs	r2, #104	; 0x68
 8006504:	1e4d      	subs	r5, r1, #1
 8006506:	4355      	muls	r5, r2
 8006508:	460e      	mov	r6, r1
 800650a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800650e:	f7fd fbb1 	bl	8003c74 <_malloc_r>
 8006512:	4604      	mov	r4, r0
 8006514:	b140      	cbz	r0, 8006528 <__sfmoreglue+0x28>
 8006516:	2100      	movs	r1, #0
 8006518:	e9c0 1600 	strd	r1, r6, [r0]
 800651c:	300c      	adds	r0, #12
 800651e:	60a0      	str	r0, [r4, #8]
 8006520:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006524:	f7fd fb32 	bl	8003b8c <memset>
 8006528:	4620      	mov	r0, r4
 800652a:	bd70      	pop	{r4, r5, r6, pc}

0800652c <__sfp_lock_acquire>:
 800652c:	4801      	ldr	r0, [pc, #4]	; (8006534 <__sfp_lock_acquire+0x8>)
 800652e:	f7ff bc6e 	b.w	8005e0e <__retarget_lock_acquire_recursive>
 8006532:	bf00      	nop
 8006534:	20000259 	.word	0x20000259

08006538 <__sfp_lock_release>:
 8006538:	4801      	ldr	r0, [pc, #4]	; (8006540 <__sfp_lock_release+0x8>)
 800653a:	f7ff bc69 	b.w	8005e10 <__retarget_lock_release_recursive>
 800653e:	bf00      	nop
 8006540:	20000259 	.word	0x20000259

08006544 <__sinit_lock_acquire>:
 8006544:	4801      	ldr	r0, [pc, #4]	; (800654c <__sinit_lock_acquire+0x8>)
 8006546:	f7ff bc62 	b.w	8005e0e <__retarget_lock_acquire_recursive>
 800654a:	bf00      	nop
 800654c:	2000025a 	.word	0x2000025a

08006550 <__sinit_lock_release>:
 8006550:	4801      	ldr	r0, [pc, #4]	; (8006558 <__sinit_lock_release+0x8>)
 8006552:	f7ff bc5d 	b.w	8005e10 <__retarget_lock_release_recursive>
 8006556:	bf00      	nop
 8006558:	2000025a 	.word	0x2000025a

0800655c <__sinit>:
 800655c:	b510      	push	{r4, lr}
 800655e:	4604      	mov	r4, r0
 8006560:	f7ff fff0 	bl	8006544 <__sinit_lock_acquire>
 8006564:	69a3      	ldr	r3, [r4, #24]
 8006566:	b11b      	cbz	r3, 8006570 <__sinit+0x14>
 8006568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800656c:	f7ff bff0 	b.w	8006550 <__sinit_lock_release>
 8006570:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006574:	6523      	str	r3, [r4, #80]	; 0x50
 8006576:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <__sinit+0x68>)
 8006578:	4a13      	ldr	r2, [pc, #76]	; (80065c8 <__sinit+0x6c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	62a2      	str	r2, [r4, #40]	; 0x28
 800657e:	42a3      	cmp	r3, r4
 8006580:	bf04      	itt	eq
 8006582:	2301      	moveq	r3, #1
 8006584:	61a3      	streq	r3, [r4, #24]
 8006586:	4620      	mov	r0, r4
 8006588:	f000 f820 	bl	80065cc <__sfp>
 800658c:	6060      	str	r0, [r4, #4]
 800658e:	4620      	mov	r0, r4
 8006590:	f000 f81c 	bl	80065cc <__sfp>
 8006594:	60a0      	str	r0, [r4, #8]
 8006596:	4620      	mov	r0, r4
 8006598:	f000 f818 	bl	80065cc <__sfp>
 800659c:	2200      	movs	r2, #0
 800659e:	60e0      	str	r0, [r4, #12]
 80065a0:	2104      	movs	r1, #4
 80065a2:	6860      	ldr	r0, [r4, #4]
 80065a4:	f7ff ff82 	bl	80064ac <std>
 80065a8:	68a0      	ldr	r0, [r4, #8]
 80065aa:	2201      	movs	r2, #1
 80065ac:	2109      	movs	r1, #9
 80065ae:	f7ff ff7d 	bl	80064ac <std>
 80065b2:	68e0      	ldr	r0, [r4, #12]
 80065b4:	2202      	movs	r2, #2
 80065b6:	2112      	movs	r1, #18
 80065b8:	f7ff ff78 	bl	80064ac <std>
 80065bc:	2301      	movs	r3, #1
 80065be:	61a3      	str	r3, [r4, #24]
 80065c0:	e7d2      	b.n	8006568 <__sinit+0xc>
 80065c2:	bf00      	nop
 80065c4:	08008064 	.word	0x08008064
 80065c8:	080064f5 	.word	0x080064f5

080065cc <__sfp>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	4607      	mov	r7, r0
 80065d0:	f7ff ffac 	bl	800652c <__sfp_lock_acquire>
 80065d4:	4b1e      	ldr	r3, [pc, #120]	; (8006650 <__sfp+0x84>)
 80065d6:	681e      	ldr	r6, [r3, #0]
 80065d8:	69b3      	ldr	r3, [r6, #24]
 80065da:	b913      	cbnz	r3, 80065e2 <__sfp+0x16>
 80065dc:	4630      	mov	r0, r6
 80065de:	f7ff ffbd 	bl	800655c <__sinit>
 80065e2:	3648      	adds	r6, #72	; 0x48
 80065e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	d503      	bpl.n	80065f4 <__sfp+0x28>
 80065ec:	6833      	ldr	r3, [r6, #0]
 80065ee:	b30b      	cbz	r3, 8006634 <__sfp+0x68>
 80065f0:	6836      	ldr	r6, [r6, #0]
 80065f2:	e7f7      	b.n	80065e4 <__sfp+0x18>
 80065f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80065f8:	b9d5      	cbnz	r5, 8006630 <__sfp+0x64>
 80065fa:	4b16      	ldr	r3, [pc, #88]	; (8006654 <__sfp+0x88>)
 80065fc:	60e3      	str	r3, [r4, #12]
 80065fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006602:	6665      	str	r5, [r4, #100]	; 0x64
 8006604:	f7ff fc02 	bl	8005e0c <__retarget_lock_init_recursive>
 8006608:	f7ff ff96 	bl	8006538 <__sfp_lock_release>
 800660c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006610:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006614:	6025      	str	r5, [r4, #0]
 8006616:	61a5      	str	r5, [r4, #24]
 8006618:	2208      	movs	r2, #8
 800661a:	4629      	mov	r1, r5
 800661c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006620:	f7fd fab4 	bl	8003b8c <memset>
 8006624:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006628:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800662c:	4620      	mov	r0, r4
 800662e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006630:	3468      	adds	r4, #104	; 0x68
 8006632:	e7d9      	b.n	80065e8 <__sfp+0x1c>
 8006634:	2104      	movs	r1, #4
 8006636:	4638      	mov	r0, r7
 8006638:	f7ff ff62 	bl	8006500 <__sfmoreglue>
 800663c:	4604      	mov	r4, r0
 800663e:	6030      	str	r0, [r6, #0]
 8006640:	2800      	cmp	r0, #0
 8006642:	d1d5      	bne.n	80065f0 <__sfp+0x24>
 8006644:	f7ff ff78 	bl	8006538 <__sfp_lock_release>
 8006648:	230c      	movs	r3, #12
 800664a:	603b      	str	r3, [r7, #0]
 800664c:	e7ee      	b.n	800662c <__sfp+0x60>
 800664e:	bf00      	nop
 8006650:	08008064 	.word	0x08008064
 8006654:	ffff0001 	.word	0xffff0001

08006658 <_fwalk_reent>:
 8006658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800665c:	4606      	mov	r6, r0
 800665e:	4688      	mov	r8, r1
 8006660:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006664:	2700      	movs	r7, #0
 8006666:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800666a:	f1b9 0901 	subs.w	r9, r9, #1
 800666e:	d505      	bpl.n	800667c <_fwalk_reent+0x24>
 8006670:	6824      	ldr	r4, [r4, #0]
 8006672:	2c00      	cmp	r4, #0
 8006674:	d1f7      	bne.n	8006666 <_fwalk_reent+0xe>
 8006676:	4638      	mov	r0, r7
 8006678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800667c:	89ab      	ldrh	r3, [r5, #12]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d907      	bls.n	8006692 <_fwalk_reent+0x3a>
 8006682:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006686:	3301      	adds	r3, #1
 8006688:	d003      	beq.n	8006692 <_fwalk_reent+0x3a>
 800668a:	4629      	mov	r1, r5
 800668c:	4630      	mov	r0, r6
 800668e:	47c0      	blx	r8
 8006690:	4307      	orrs	r7, r0
 8006692:	3568      	adds	r5, #104	; 0x68
 8006694:	e7e9      	b.n	800666a <_fwalk_reent+0x12>

08006696 <__swhatbuf_r>:
 8006696:	b570      	push	{r4, r5, r6, lr}
 8006698:	460e      	mov	r6, r1
 800669a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800669e:	2900      	cmp	r1, #0
 80066a0:	b096      	sub	sp, #88	; 0x58
 80066a2:	4614      	mov	r4, r2
 80066a4:	461d      	mov	r5, r3
 80066a6:	da08      	bge.n	80066ba <__swhatbuf_r+0x24>
 80066a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	602a      	str	r2, [r5, #0]
 80066b0:	061a      	lsls	r2, r3, #24
 80066b2:	d410      	bmi.n	80066d6 <__swhatbuf_r+0x40>
 80066b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066b8:	e00e      	b.n	80066d8 <__swhatbuf_r+0x42>
 80066ba:	466a      	mov	r2, sp
 80066bc:	f000 f902 	bl	80068c4 <_fstat_r>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	dbf1      	blt.n	80066a8 <__swhatbuf_r+0x12>
 80066c4:	9a01      	ldr	r2, [sp, #4]
 80066c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80066ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80066ce:	425a      	negs	r2, r3
 80066d0:	415a      	adcs	r2, r3
 80066d2:	602a      	str	r2, [r5, #0]
 80066d4:	e7ee      	b.n	80066b4 <__swhatbuf_r+0x1e>
 80066d6:	2340      	movs	r3, #64	; 0x40
 80066d8:	2000      	movs	r0, #0
 80066da:	6023      	str	r3, [r4, #0]
 80066dc:	b016      	add	sp, #88	; 0x58
 80066de:	bd70      	pop	{r4, r5, r6, pc}

080066e0 <__smakebuf_r>:
 80066e0:	898b      	ldrh	r3, [r1, #12]
 80066e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066e4:	079d      	lsls	r5, r3, #30
 80066e6:	4606      	mov	r6, r0
 80066e8:	460c      	mov	r4, r1
 80066ea:	d507      	bpl.n	80066fc <__smakebuf_r+0x1c>
 80066ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	6123      	str	r3, [r4, #16]
 80066f4:	2301      	movs	r3, #1
 80066f6:	6163      	str	r3, [r4, #20]
 80066f8:	b002      	add	sp, #8
 80066fa:	bd70      	pop	{r4, r5, r6, pc}
 80066fc:	ab01      	add	r3, sp, #4
 80066fe:	466a      	mov	r2, sp
 8006700:	f7ff ffc9 	bl	8006696 <__swhatbuf_r>
 8006704:	9900      	ldr	r1, [sp, #0]
 8006706:	4605      	mov	r5, r0
 8006708:	4630      	mov	r0, r6
 800670a:	f7fd fab3 	bl	8003c74 <_malloc_r>
 800670e:	b948      	cbnz	r0, 8006724 <__smakebuf_r+0x44>
 8006710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006714:	059a      	lsls	r2, r3, #22
 8006716:	d4ef      	bmi.n	80066f8 <__smakebuf_r+0x18>
 8006718:	f023 0303 	bic.w	r3, r3, #3
 800671c:	f043 0302 	orr.w	r3, r3, #2
 8006720:	81a3      	strh	r3, [r4, #12]
 8006722:	e7e3      	b.n	80066ec <__smakebuf_r+0xc>
 8006724:	4b0d      	ldr	r3, [pc, #52]	; (800675c <__smakebuf_r+0x7c>)
 8006726:	62b3      	str	r3, [r6, #40]	; 0x28
 8006728:	89a3      	ldrh	r3, [r4, #12]
 800672a:	6020      	str	r0, [r4, #0]
 800672c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	9b00      	ldr	r3, [sp, #0]
 8006734:	6163      	str	r3, [r4, #20]
 8006736:	9b01      	ldr	r3, [sp, #4]
 8006738:	6120      	str	r0, [r4, #16]
 800673a:	b15b      	cbz	r3, 8006754 <__smakebuf_r+0x74>
 800673c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006740:	4630      	mov	r0, r6
 8006742:	f000 f8d1 	bl	80068e8 <_isatty_r>
 8006746:	b128      	cbz	r0, 8006754 <__smakebuf_r+0x74>
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	f023 0303 	bic.w	r3, r3, #3
 800674e:	f043 0301 	orr.w	r3, r3, #1
 8006752:	81a3      	strh	r3, [r4, #12]
 8006754:	89a0      	ldrh	r0, [r4, #12]
 8006756:	4305      	orrs	r5, r0
 8006758:	81a5      	strh	r5, [r4, #12]
 800675a:	e7cd      	b.n	80066f8 <__smakebuf_r+0x18>
 800675c:	080064f5 	.word	0x080064f5

08006760 <_malloc_usable_size_r>:
 8006760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006764:	1f18      	subs	r0, r3, #4
 8006766:	2b00      	cmp	r3, #0
 8006768:	bfbc      	itt	lt
 800676a:	580b      	ldrlt	r3, [r1, r0]
 800676c:	18c0      	addlt	r0, r0, r3
 800676e:	4770      	bx	lr

08006770 <_raise_r>:
 8006770:	291f      	cmp	r1, #31
 8006772:	b538      	push	{r3, r4, r5, lr}
 8006774:	4604      	mov	r4, r0
 8006776:	460d      	mov	r5, r1
 8006778:	d904      	bls.n	8006784 <_raise_r+0x14>
 800677a:	2316      	movs	r3, #22
 800677c:	6003      	str	r3, [r0, #0]
 800677e:	f04f 30ff 	mov.w	r0, #4294967295
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006786:	b112      	cbz	r2, 800678e <_raise_r+0x1e>
 8006788:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800678c:	b94b      	cbnz	r3, 80067a2 <_raise_r+0x32>
 800678e:	4620      	mov	r0, r4
 8006790:	f000 f830 	bl	80067f4 <_getpid_r>
 8006794:	462a      	mov	r2, r5
 8006796:	4601      	mov	r1, r0
 8006798:	4620      	mov	r0, r4
 800679a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800679e:	f000 b817 	b.w	80067d0 <_kill_r>
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d00a      	beq.n	80067bc <_raise_r+0x4c>
 80067a6:	1c59      	adds	r1, r3, #1
 80067a8:	d103      	bne.n	80067b2 <_raise_r+0x42>
 80067aa:	2316      	movs	r3, #22
 80067ac:	6003      	str	r3, [r0, #0]
 80067ae:	2001      	movs	r0, #1
 80067b0:	e7e7      	b.n	8006782 <_raise_r+0x12>
 80067b2:	2400      	movs	r4, #0
 80067b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80067b8:	4628      	mov	r0, r5
 80067ba:	4798      	blx	r3
 80067bc:	2000      	movs	r0, #0
 80067be:	e7e0      	b.n	8006782 <_raise_r+0x12>

080067c0 <raise>:
 80067c0:	4b02      	ldr	r3, [pc, #8]	; (80067cc <raise+0xc>)
 80067c2:	4601      	mov	r1, r0
 80067c4:	6818      	ldr	r0, [r3, #0]
 80067c6:	f7ff bfd3 	b.w	8006770 <_raise_r>
 80067ca:	bf00      	nop
 80067cc:	20000020 	.word	0x20000020

080067d0 <_kill_r>:
 80067d0:	b538      	push	{r3, r4, r5, lr}
 80067d2:	4d07      	ldr	r5, [pc, #28]	; (80067f0 <_kill_r+0x20>)
 80067d4:	2300      	movs	r3, #0
 80067d6:	4604      	mov	r4, r0
 80067d8:	4608      	mov	r0, r1
 80067da:	4611      	mov	r1, r2
 80067dc:	602b      	str	r3, [r5, #0]
 80067de:	f7fb fc9d 	bl	800211c <_kill>
 80067e2:	1c43      	adds	r3, r0, #1
 80067e4:	d102      	bne.n	80067ec <_kill_r+0x1c>
 80067e6:	682b      	ldr	r3, [r5, #0]
 80067e8:	b103      	cbz	r3, 80067ec <_kill_r+0x1c>
 80067ea:	6023      	str	r3, [r4, #0]
 80067ec:	bd38      	pop	{r3, r4, r5, pc}
 80067ee:	bf00      	nop
 80067f0:	20000254 	.word	0x20000254

080067f4 <_getpid_r>:
 80067f4:	f7fb bc8a 	b.w	800210c <_getpid>

080067f8 <__sread>:
 80067f8:	b510      	push	{r4, lr}
 80067fa:	460c      	mov	r4, r1
 80067fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006800:	f000 f894 	bl	800692c <_read_r>
 8006804:	2800      	cmp	r0, #0
 8006806:	bfab      	itete	ge
 8006808:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800680a:	89a3      	ldrhlt	r3, [r4, #12]
 800680c:	181b      	addge	r3, r3, r0
 800680e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006812:	bfac      	ite	ge
 8006814:	6563      	strge	r3, [r4, #84]	; 0x54
 8006816:	81a3      	strhlt	r3, [r4, #12]
 8006818:	bd10      	pop	{r4, pc}

0800681a <__swrite>:
 800681a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800681e:	461f      	mov	r7, r3
 8006820:	898b      	ldrh	r3, [r1, #12]
 8006822:	05db      	lsls	r3, r3, #23
 8006824:	4605      	mov	r5, r0
 8006826:	460c      	mov	r4, r1
 8006828:	4616      	mov	r6, r2
 800682a:	d505      	bpl.n	8006838 <__swrite+0x1e>
 800682c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006830:	2302      	movs	r3, #2
 8006832:	2200      	movs	r2, #0
 8006834:	f000 f868 	bl	8006908 <_lseek_r>
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800683e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006842:	81a3      	strh	r3, [r4, #12]
 8006844:	4632      	mov	r2, r6
 8006846:	463b      	mov	r3, r7
 8006848:	4628      	mov	r0, r5
 800684a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800684e:	f000 b817 	b.w	8006880 <_write_r>

08006852 <__sseek>:
 8006852:	b510      	push	{r4, lr}
 8006854:	460c      	mov	r4, r1
 8006856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800685a:	f000 f855 	bl	8006908 <_lseek_r>
 800685e:	1c43      	adds	r3, r0, #1
 8006860:	89a3      	ldrh	r3, [r4, #12]
 8006862:	bf15      	itete	ne
 8006864:	6560      	strne	r0, [r4, #84]	; 0x54
 8006866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800686a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800686e:	81a3      	strheq	r3, [r4, #12]
 8006870:	bf18      	it	ne
 8006872:	81a3      	strhne	r3, [r4, #12]
 8006874:	bd10      	pop	{r4, pc}

08006876 <__sclose>:
 8006876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800687a:	f000 b813 	b.w	80068a4 <_close_r>
	...

08006880 <_write_r>:
 8006880:	b538      	push	{r3, r4, r5, lr}
 8006882:	4d07      	ldr	r5, [pc, #28]	; (80068a0 <_write_r+0x20>)
 8006884:	4604      	mov	r4, r0
 8006886:	4608      	mov	r0, r1
 8006888:	4611      	mov	r1, r2
 800688a:	2200      	movs	r2, #0
 800688c:	602a      	str	r2, [r5, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	f7fb fc7b 	bl	800218a <_write>
 8006894:	1c43      	adds	r3, r0, #1
 8006896:	d102      	bne.n	800689e <_write_r+0x1e>
 8006898:	682b      	ldr	r3, [r5, #0]
 800689a:	b103      	cbz	r3, 800689e <_write_r+0x1e>
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	bd38      	pop	{r3, r4, r5, pc}
 80068a0:	20000254 	.word	0x20000254

080068a4 <_close_r>:
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	4d06      	ldr	r5, [pc, #24]	; (80068c0 <_close_r+0x1c>)
 80068a8:	2300      	movs	r3, #0
 80068aa:	4604      	mov	r4, r0
 80068ac:	4608      	mov	r0, r1
 80068ae:	602b      	str	r3, [r5, #0]
 80068b0:	f7fb fc87 	bl	80021c2 <_close>
 80068b4:	1c43      	adds	r3, r0, #1
 80068b6:	d102      	bne.n	80068be <_close_r+0x1a>
 80068b8:	682b      	ldr	r3, [r5, #0]
 80068ba:	b103      	cbz	r3, 80068be <_close_r+0x1a>
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	bd38      	pop	{r3, r4, r5, pc}
 80068c0:	20000254 	.word	0x20000254

080068c4 <_fstat_r>:
 80068c4:	b538      	push	{r3, r4, r5, lr}
 80068c6:	4d07      	ldr	r5, [pc, #28]	; (80068e4 <_fstat_r+0x20>)
 80068c8:	2300      	movs	r3, #0
 80068ca:	4604      	mov	r4, r0
 80068cc:	4608      	mov	r0, r1
 80068ce:	4611      	mov	r1, r2
 80068d0:	602b      	str	r3, [r5, #0]
 80068d2:	f7fb fc82 	bl	80021da <_fstat>
 80068d6:	1c43      	adds	r3, r0, #1
 80068d8:	d102      	bne.n	80068e0 <_fstat_r+0x1c>
 80068da:	682b      	ldr	r3, [r5, #0]
 80068dc:	b103      	cbz	r3, 80068e0 <_fstat_r+0x1c>
 80068de:	6023      	str	r3, [r4, #0]
 80068e0:	bd38      	pop	{r3, r4, r5, pc}
 80068e2:	bf00      	nop
 80068e4:	20000254 	.word	0x20000254

080068e8 <_isatty_r>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	4d06      	ldr	r5, [pc, #24]	; (8006904 <_isatty_r+0x1c>)
 80068ec:	2300      	movs	r3, #0
 80068ee:	4604      	mov	r4, r0
 80068f0:	4608      	mov	r0, r1
 80068f2:	602b      	str	r3, [r5, #0]
 80068f4:	f7fb fc81 	bl	80021fa <_isatty>
 80068f8:	1c43      	adds	r3, r0, #1
 80068fa:	d102      	bne.n	8006902 <_isatty_r+0x1a>
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	b103      	cbz	r3, 8006902 <_isatty_r+0x1a>
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	bd38      	pop	{r3, r4, r5, pc}
 8006904:	20000254 	.word	0x20000254

08006908 <_lseek_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4d07      	ldr	r5, [pc, #28]	; (8006928 <_lseek_r+0x20>)
 800690c:	4604      	mov	r4, r0
 800690e:	4608      	mov	r0, r1
 8006910:	4611      	mov	r1, r2
 8006912:	2200      	movs	r2, #0
 8006914:	602a      	str	r2, [r5, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	f7fb fc7a 	bl	8002210 <_lseek>
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	d102      	bne.n	8006926 <_lseek_r+0x1e>
 8006920:	682b      	ldr	r3, [r5, #0]
 8006922:	b103      	cbz	r3, 8006926 <_lseek_r+0x1e>
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	bd38      	pop	{r3, r4, r5, pc}
 8006928:	20000254 	.word	0x20000254

0800692c <_read_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4d07      	ldr	r5, [pc, #28]	; (800694c <_read_r+0x20>)
 8006930:	4604      	mov	r4, r0
 8006932:	4608      	mov	r0, r1
 8006934:	4611      	mov	r1, r2
 8006936:	2200      	movs	r2, #0
 8006938:	602a      	str	r2, [r5, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	f7fb fc08 	bl	8002150 <_read>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	d102      	bne.n	800694a <_read_r+0x1e>
 8006944:	682b      	ldr	r3, [r5, #0]
 8006946:	b103      	cbz	r3, 800694a <_read_r+0x1e>
 8006948:	6023      	str	r3, [r4, #0]
 800694a:	bd38      	pop	{r3, r4, r5, pc}
 800694c:	20000254 	.word	0x20000254

08006950 <cos>:
 8006950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006952:	ec53 2b10 	vmov	r2, r3, d0
 8006956:	4826      	ldr	r0, [pc, #152]	; (80069f0 <cos+0xa0>)
 8006958:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800695c:	4281      	cmp	r1, r0
 800695e:	dc06      	bgt.n	800696e <cos+0x1e>
 8006960:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80069e8 <cos+0x98>
 8006964:	b005      	add	sp, #20
 8006966:	f85d eb04 	ldr.w	lr, [sp], #4
 800696a:	f000 baa9 	b.w	8006ec0 <__kernel_cos>
 800696e:	4821      	ldr	r0, [pc, #132]	; (80069f4 <cos+0xa4>)
 8006970:	4281      	cmp	r1, r0
 8006972:	dd09      	ble.n	8006988 <cos+0x38>
 8006974:	ee10 0a10 	vmov	r0, s0
 8006978:	4619      	mov	r1, r3
 800697a:	f7f9 fc8d 	bl	8000298 <__aeabi_dsub>
 800697e:	ec41 0b10 	vmov	d0, r0, r1
 8006982:	b005      	add	sp, #20
 8006984:	f85d fb04 	ldr.w	pc, [sp], #4
 8006988:	4668      	mov	r0, sp
 800698a:	f000 f88d 	bl	8006aa8 <__ieee754_rem_pio2>
 800698e:	f000 0003 	and.w	r0, r0, #3
 8006992:	2801      	cmp	r0, #1
 8006994:	d00b      	beq.n	80069ae <cos+0x5e>
 8006996:	2802      	cmp	r0, #2
 8006998:	d016      	beq.n	80069c8 <cos+0x78>
 800699a:	b9e0      	cbnz	r0, 80069d6 <cos+0x86>
 800699c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069a0:	ed9d 0b00 	vldr	d0, [sp]
 80069a4:	f000 fa8c 	bl	8006ec0 <__kernel_cos>
 80069a8:	ec51 0b10 	vmov	r0, r1, d0
 80069ac:	e7e7      	b.n	800697e <cos+0x2e>
 80069ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069b2:	ed9d 0b00 	vldr	d0, [sp]
 80069b6:	f000 fe9b 	bl	80076f0 <__kernel_sin>
 80069ba:	ec53 2b10 	vmov	r2, r3, d0
 80069be:	ee10 0a10 	vmov	r0, s0
 80069c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80069c6:	e7da      	b.n	800697e <cos+0x2e>
 80069c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069cc:	ed9d 0b00 	vldr	d0, [sp]
 80069d0:	f000 fa76 	bl	8006ec0 <__kernel_cos>
 80069d4:	e7f1      	b.n	80069ba <cos+0x6a>
 80069d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069da:	ed9d 0b00 	vldr	d0, [sp]
 80069de:	2001      	movs	r0, #1
 80069e0:	f000 fe86 	bl	80076f0 <__kernel_sin>
 80069e4:	e7e0      	b.n	80069a8 <cos+0x58>
 80069e6:	bf00      	nop
	...
 80069f0:	3fe921fb 	.word	0x3fe921fb
 80069f4:	7fefffff 	.word	0x7fefffff

080069f8 <sin>:
 80069f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80069fa:	ec53 2b10 	vmov	r2, r3, d0
 80069fe:	4828      	ldr	r0, [pc, #160]	; (8006aa0 <sin+0xa8>)
 8006a00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006a04:	4281      	cmp	r1, r0
 8006a06:	dc07      	bgt.n	8006a18 <sin+0x20>
 8006a08:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006a98 <sin+0xa0>
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	b005      	add	sp, #20
 8006a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a14:	f000 be6c 	b.w	80076f0 <__kernel_sin>
 8006a18:	4822      	ldr	r0, [pc, #136]	; (8006aa4 <sin+0xac>)
 8006a1a:	4281      	cmp	r1, r0
 8006a1c:	dd09      	ble.n	8006a32 <sin+0x3a>
 8006a1e:	ee10 0a10 	vmov	r0, s0
 8006a22:	4619      	mov	r1, r3
 8006a24:	f7f9 fc38 	bl	8000298 <__aeabi_dsub>
 8006a28:	ec41 0b10 	vmov	d0, r0, r1
 8006a2c:	b005      	add	sp, #20
 8006a2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a32:	4668      	mov	r0, sp
 8006a34:	f000 f838 	bl	8006aa8 <__ieee754_rem_pio2>
 8006a38:	f000 0003 	and.w	r0, r0, #3
 8006a3c:	2801      	cmp	r0, #1
 8006a3e:	d00c      	beq.n	8006a5a <sin+0x62>
 8006a40:	2802      	cmp	r0, #2
 8006a42:	d011      	beq.n	8006a68 <sin+0x70>
 8006a44:	b9f0      	cbnz	r0, 8006a84 <sin+0x8c>
 8006a46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a4a:	ed9d 0b00 	vldr	d0, [sp]
 8006a4e:	2001      	movs	r0, #1
 8006a50:	f000 fe4e 	bl	80076f0 <__kernel_sin>
 8006a54:	ec51 0b10 	vmov	r0, r1, d0
 8006a58:	e7e6      	b.n	8006a28 <sin+0x30>
 8006a5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a5e:	ed9d 0b00 	vldr	d0, [sp]
 8006a62:	f000 fa2d 	bl	8006ec0 <__kernel_cos>
 8006a66:	e7f5      	b.n	8006a54 <sin+0x5c>
 8006a68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a6c:	ed9d 0b00 	vldr	d0, [sp]
 8006a70:	2001      	movs	r0, #1
 8006a72:	f000 fe3d 	bl	80076f0 <__kernel_sin>
 8006a76:	ec53 2b10 	vmov	r2, r3, d0
 8006a7a:	ee10 0a10 	vmov	r0, s0
 8006a7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006a82:	e7d1      	b.n	8006a28 <sin+0x30>
 8006a84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a88:	ed9d 0b00 	vldr	d0, [sp]
 8006a8c:	f000 fa18 	bl	8006ec0 <__kernel_cos>
 8006a90:	e7f1      	b.n	8006a76 <sin+0x7e>
 8006a92:	bf00      	nop
 8006a94:	f3af 8000 	nop.w
	...
 8006aa0:	3fe921fb 	.word	0x3fe921fb
 8006aa4:	7fefffff 	.word	0x7fefffff

08006aa8 <__ieee754_rem_pio2>:
 8006aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	ed2d 8b02 	vpush	{d8}
 8006ab0:	ec55 4b10 	vmov	r4, r5, d0
 8006ab4:	4bca      	ldr	r3, [pc, #808]	; (8006de0 <__ieee754_rem_pio2+0x338>)
 8006ab6:	b08b      	sub	sp, #44	; 0x2c
 8006ab8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006abc:	4598      	cmp	r8, r3
 8006abe:	4682      	mov	sl, r0
 8006ac0:	9502      	str	r5, [sp, #8]
 8006ac2:	dc08      	bgt.n	8006ad6 <__ieee754_rem_pio2+0x2e>
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	ed80 0b00 	vstr	d0, [r0]
 8006acc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006ad0:	f04f 0b00 	mov.w	fp, #0
 8006ad4:	e028      	b.n	8006b28 <__ieee754_rem_pio2+0x80>
 8006ad6:	4bc3      	ldr	r3, [pc, #780]	; (8006de4 <__ieee754_rem_pio2+0x33c>)
 8006ad8:	4598      	cmp	r8, r3
 8006ada:	dc78      	bgt.n	8006bce <__ieee754_rem_pio2+0x126>
 8006adc:	9b02      	ldr	r3, [sp, #8]
 8006ade:	4ec2      	ldr	r6, [pc, #776]	; (8006de8 <__ieee754_rem_pio2+0x340>)
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	ee10 0a10 	vmov	r0, s0
 8006ae6:	a3b0      	add	r3, pc, #704	; (adr r3, 8006da8 <__ieee754_rem_pio2+0x300>)
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	4629      	mov	r1, r5
 8006aee:	dd39      	ble.n	8006b64 <__ieee754_rem_pio2+0xbc>
 8006af0:	f7f9 fbd2 	bl	8000298 <__aeabi_dsub>
 8006af4:	45b0      	cmp	r8, r6
 8006af6:	4604      	mov	r4, r0
 8006af8:	460d      	mov	r5, r1
 8006afa:	d01b      	beq.n	8006b34 <__ieee754_rem_pio2+0x8c>
 8006afc:	a3ac      	add	r3, pc, #688	; (adr r3, 8006db0 <__ieee754_rem_pio2+0x308>)
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	f7f9 fbc9 	bl	8000298 <__aeabi_dsub>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	e9ca 2300 	strd	r2, r3, [sl]
 8006b0e:	4620      	mov	r0, r4
 8006b10:	4629      	mov	r1, r5
 8006b12:	f7f9 fbc1 	bl	8000298 <__aeabi_dsub>
 8006b16:	a3a6      	add	r3, pc, #664	; (adr r3, 8006db0 <__ieee754_rem_pio2+0x308>)
 8006b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1c:	f7f9 fbbc 	bl	8000298 <__aeabi_dsub>
 8006b20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006b24:	f04f 0b01 	mov.w	fp, #1
 8006b28:	4658      	mov	r0, fp
 8006b2a:	b00b      	add	sp, #44	; 0x2c
 8006b2c:	ecbd 8b02 	vpop	{d8}
 8006b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b34:	a3a0      	add	r3, pc, #640	; (adr r3, 8006db8 <__ieee754_rem_pio2+0x310>)
 8006b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3a:	f7f9 fbad 	bl	8000298 <__aeabi_dsub>
 8006b3e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006dc0 <__ieee754_rem_pio2+0x318>)
 8006b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b44:	4604      	mov	r4, r0
 8006b46:	460d      	mov	r5, r1
 8006b48:	f7f9 fba6 	bl	8000298 <__aeabi_dsub>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	e9ca 2300 	strd	r2, r3, [sl]
 8006b54:	4620      	mov	r0, r4
 8006b56:	4629      	mov	r1, r5
 8006b58:	f7f9 fb9e 	bl	8000298 <__aeabi_dsub>
 8006b5c:	a398      	add	r3, pc, #608	; (adr r3, 8006dc0 <__ieee754_rem_pio2+0x318>)
 8006b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b62:	e7db      	b.n	8006b1c <__ieee754_rem_pio2+0x74>
 8006b64:	f7f9 fb9a 	bl	800029c <__adddf3>
 8006b68:	45b0      	cmp	r8, r6
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	460d      	mov	r5, r1
 8006b6e:	d016      	beq.n	8006b9e <__ieee754_rem_pio2+0xf6>
 8006b70:	a38f      	add	r3, pc, #572	; (adr r3, 8006db0 <__ieee754_rem_pio2+0x308>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f7f9 fb91 	bl	800029c <__adddf3>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	e9ca 2300 	strd	r2, r3, [sl]
 8006b82:	4620      	mov	r0, r4
 8006b84:	4629      	mov	r1, r5
 8006b86:	f7f9 fb87 	bl	8000298 <__aeabi_dsub>
 8006b8a:	a389      	add	r3, pc, #548	; (adr r3, 8006db0 <__ieee754_rem_pio2+0x308>)
 8006b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b90:	f7f9 fb84 	bl	800029c <__adddf3>
 8006b94:	f04f 3bff 	mov.w	fp, #4294967295
 8006b98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006b9c:	e7c4      	b.n	8006b28 <__ieee754_rem_pio2+0x80>
 8006b9e:	a386      	add	r3, pc, #536	; (adr r3, 8006db8 <__ieee754_rem_pio2+0x310>)
 8006ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba4:	f7f9 fb7a 	bl	800029c <__adddf3>
 8006ba8:	a385      	add	r3, pc, #532	; (adr r3, 8006dc0 <__ieee754_rem_pio2+0x318>)
 8006baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bae:	4604      	mov	r4, r0
 8006bb0:	460d      	mov	r5, r1
 8006bb2:	f7f9 fb73 	bl	800029c <__adddf3>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	e9ca 2300 	strd	r2, r3, [sl]
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	f7f9 fb69 	bl	8000298 <__aeabi_dsub>
 8006bc6:	a37e      	add	r3, pc, #504	; (adr r3, 8006dc0 <__ieee754_rem_pio2+0x318>)
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	e7e0      	b.n	8006b90 <__ieee754_rem_pio2+0xe8>
 8006bce:	4b87      	ldr	r3, [pc, #540]	; (8006dec <__ieee754_rem_pio2+0x344>)
 8006bd0:	4598      	cmp	r8, r3
 8006bd2:	f300 80d9 	bgt.w	8006d88 <__ieee754_rem_pio2+0x2e0>
 8006bd6:	f000 fe49 	bl	800786c <fabs>
 8006bda:	ec55 4b10 	vmov	r4, r5, d0
 8006bde:	ee10 0a10 	vmov	r0, s0
 8006be2:	a379      	add	r3, pc, #484	; (adr r3, 8006dc8 <__ieee754_rem_pio2+0x320>)
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	4629      	mov	r1, r5
 8006bea:	f7f9 fd0d 	bl	8000608 <__aeabi_dmul>
 8006bee:	4b80      	ldr	r3, [pc, #512]	; (8006df0 <__ieee754_rem_pio2+0x348>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f7f9 fb53 	bl	800029c <__adddf3>
 8006bf6:	f7f9 ffb7 	bl	8000b68 <__aeabi_d2iz>
 8006bfa:	4683      	mov	fp, r0
 8006bfc:	f7f9 fc9a 	bl	8000534 <__aeabi_i2d>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	ec43 2b18 	vmov	d8, r2, r3
 8006c08:	a367      	add	r3, pc, #412	; (adr r3, 8006da8 <__ieee754_rem_pio2+0x300>)
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	f7f9 fcfb 	bl	8000608 <__aeabi_dmul>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	4620      	mov	r0, r4
 8006c18:	4629      	mov	r1, r5
 8006c1a:	f7f9 fb3d 	bl	8000298 <__aeabi_dsub>
 8006c1e:	a364      	add	r3, pc, #400	; (adr r3, 8006db0 <__ieee754_rem_pio2+0x308>)
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	4606      	mov	r6, r0
 8006c26:	460f      	mov	r7, r1
 8006c28:	ec51 0b18 	vmov	r0, r1, d8
 8006c2c:	f7f9 fcec 	bl	8000608 <__aeabi_dmul>
 8006c30:	f1bb 0f1f 	cmp.w	fp, #31
 8006c34:	4604      	mov	r4, r0
 8006c36:	460d      	mov	r5, r1
 8006c38:	dc0d      	bgt.n	8006c56 <__ieee754_rem_pio2+0x1ae>
 8006c3a:	4b6e      	ldr	r3, [pc, #440]	; (8006df4 <__ieee754_rem_pio2+0x34c>)
 8006c3c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c44:	4543      	cmp	r3, r8
 8006c46:	d006      	beq.n	8006c56 <__ieee754_rem_pio2+0x1ae>
 8006c48:	4622      	mov	r2, r4
 8006c4a:	462b      	mov	r3, r5
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	4639      	mov	r1, r7
 8006c50:	f7f9 fb22 	bl	8000298 <__aeabi_dsub>
 8006c54:	e00f      	b.n	8006c76 <__ieee754_rem_pio2+0x1ce>
 8006c56:	462b      	mov	r3, r5
 8006c58:	4622      	mov	r2, r4
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	4639      	mov	r1, r7
 8006c5e:	f7f9 fb1b 	bl	8000298 <__aeabi_dsub>
 8006c62:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006c66:	9303      	str	r3, [sp, #12]
 8006c68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006c6c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006c70:	f1b8 0f10 	cmp.w	r8, #16
 8006c74:	dc02      	bgt.n	8006c7c <__ieee754_rem_pio2+0x1d4>
 8006c76:	e9ca 0100 	strd	r0, r1, [sl]
 8006c7a:	e039      	b.n	8006cf0 <__ieee754_rem_pio2+0x248>
 8006c7c:	a34e      	add	r3, pc, #312	; (adr r3, 8006db8 <__ieee754_rem_pio2+0x310>)
 8006c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c82:	ec51 0b18 	vmov	r0, r1, d8
 8006c86:	f7f9 fcbf 	bl	8000608 <__aeabi_dmul>
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	460d      	mov	r5, r1
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	4630      	mov	r0, r6
 8006c94:	4639      	mov	r1, r7
 8006c96:	f7f9 faff 	bl	8000298 <__aeabi_dsub>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4680      	mov	r8, r0
 8006ca0:	4689      	mov	r9, r1
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	4639      	mov	r1, r7
 8006ca6:	f7f9 faf7 	bl	8000298 <__aeabi_dsub>
 8006caa:	4622      	mov	r2, r4
 8006cac:	462b      	mov	r3, r5
 8006cae:	f7f9 faf3 	bl	8000298 <__aeabi_dsub>
 8006cb2:	a343      	add	r3, pc, #268	; (adr r3, 8006dc0 <__ieee754_rem_pio2+0x318>)
 8006cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb8:	4604      	mov	r4, r0
 8006cba:	460d      	mov	r5, r1
 8006cbc:	ec51 0b18 	vmov	r0, r1, d8
 8006cc0:	f7f9 fca2 	bl	8000608 <__aeabi_dmul>
 8006cc4:	4622      	mov	r2, r4
 8006cc6:	462b      	mov	r3, r5
 8006cc8:	f7f9 fae6 	bl	8000298 <__aeabi_dsub>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	460d      	mov	r5, r1
 8006cd4:	4640      	mov	r0, r8
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	f7f9 fade 	bl	8000298 <__aeabi_dsub>
 8006cdc:	9a03      	ldr	r2, [sp, #12]
 8006cde:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b31      	cmp	r3, #49	; 0x31
 8006ce6:	dc24      	bgt.n	8006d32 <__ieee754_rem_pio2+0x28a>
 8006ce8:	e9ca 0100 	strd	r0, r1, [sl]
 8006cec:	4646      	mov	r6, r8
 8006cee:	464f      	mov	r7, r9
 8006cf0:	e9da 8900 	ldrd	r8, r9, [sl]
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	4642      	mov	r2, r8
 8006cf8:	464b      	mov	r3, r9
 8006cfa:	4639      	mov	r1, r7
 8006cfc:	f7f9 facc 	bl	8000298 <__aeabi_dsub>
 8006d00:	462b      	mov	r3, r5
 8006d02:	4622      	mov	r2, r4
 8006d04:	f7f9 fac8 	bl	8000298 <__aeabi_dsub>
 8006d08:	9b02      	ldr	r3, [sp, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d10:	f6bf af0a 	bge.w	8006b28 <__ieee754_rem_pio2+0x80>
 8006d14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006d18:	f8ca 3004 	str.w	r3, [sl, #4]
 8006d1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d20:	f8ca 8000 	str.w	r8, [sl]
 8006d24:	f8ca 0008 	str.w	r0, [sl, #8]
 8006d28:	f8ca 300c 	str.w	r3, [sl, #12]
 8006d2c:	f1cb 0b00 	rsb	fp, fp, #0
 8006d30:	e6fa      	b.n	8006b28 <__ieee754_rem_pio2+0x80>
 8006d32:	a327      	add	r3, pc, #156	; (adr r3, 8006dd0 <__ieee754_rem_pio2+0x328>)
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	ec51 0b18 	vmov	r0, r1, d8
 8006d3c:	f7f9 fc64 	bl	8000608 <__aeabi_dmul>
 8006d40:	4604      	mov	r4, r0
 8006d42:	460d      	mov	r5, r1
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4640      	mov	r0, r8
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	f7f9 faa4 	bl	8000298 <__aeabi_dsub>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4606      	mov	r6, r0
 8006d56:	460f      	mov	r7, r1
 8006d58:	4640      	mov	r0, r8
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	f7f9 fa9c 	bl	8000298 <__aeabi_dsub>
 8006d60:	4622      	mov	r2, r4
 8006d62:	462b      	mov	r3, r5
 8006d64:	f7f9 fa98 	bl	8000298 <__aeabi_dsub>
 8006d68:	a31b      	add	r3, pc, #108	; (adr r3, 8006dd8 <__ieee754_rem_pio2+0x330>)
 8006d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6e:	4604      	mov	r4, r0
 8006d70:	460d      	mov	r5, r1
 8006d72:	ec51 0b18 	vmov	r0, r1, d8
 8006d76:	f7f9 fc47 	bl	8000608 <__aeabi_dmul>
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	462b      	mov	r3, r5
 8006d7e:	f7f9 fa8b 	bl	8000298 <__aeabi_dsub>
 8006d82:	4604      	mov	r4, r0
 8006d84:	460d      	mov	r5, r1
 8006d86:	e75f      	b.n	8006c48 <__ieee754_rem_pio2+0x1a0>
 8006d88:	4b1b      	ldr	r3, [pc, #108]	; (8006df8 <__ieee754_rem_pio2+0x350>)
 8006d8a:	4598      	cmp	r8, r3
 8006d8c:	dd36      	ble.n	8006dfc <__ieee754_rem_pio2+0x354>
 8006d8e:	ee10 2a10 	vmov	r2, s0
 8006d92:	462b      	mov	r3, r5
 8006d94:	4620      	mov	r0, r4
 8006d96:	4629      	mov	r1, r5
 8006d98:	f7f9 fa7e 	bl	8000298 <__aeabi_dsub>
 8006d9c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006da0:	e9ca 0100 	strd	r0, r1, [sl]
 8006da4:	e694      	b.n	8006ad0 <__ieee754_rem_pio2+0x28>
 8006da6:	bf00      	nop
 8006da8:	54400000 	.word	0x54400000
 8006dac:	3ff921fb 	.word	0x3ff921fb
 8006db0:	1a626331 	.word	0x1a626331
 8006db4:	3dd0b461 	.word	0x3dd0b461
 8006db8:	1a600000 	.word	0x1a600000
 8006dbc:	3dd0b461 	.word	0x3dd0b461
 8006dc0:	2e037073 	.word	0x2e037073
 8006dc4:	3ba3198a 	.word	0x3ba3198a
 8006dc8:	6dc9c883 	.word	0x6dc9c883
 8006dcc:	3fe45f30 	.word	0x3fe45f30
 8006dd0:	2e000000 	.word	0x2e000000
 8006dd4:	3ba3198a 	.word	0x3ba3198a
 8006dd8:	252049c1 	.word	0x252049c1
 8006ddc:	397b839a 	.word	0x397b839a
 8006de0:	3fe921fb 	.word	0x3fe921fb
 8006de4:	4002d97b 	.word	0x4002d97b
 8006de8:	3ff921fb 	.word	0x3ff921fb
 8006dec:	413921fb 	.word	0x413921fb
 8006df0:	3fe00000 	.word	0x3fe00000
 8006df4:	0800843c 	.word	0x0800843c
 8006df8:	7fefffff 	.word	0x7fefffff
 8006dfc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006e00:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006e04:	ee10 0a10 	vmov	r0, s0
 8006e08:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006e0c:	ee10 6a10 	vmov	r6, s0
 8006e10:	460f      	mov	r7, r1
 8006e12:	f7f9 fea9 	bl	8000b68 <__aeabi_d2iz>
 8006e16:	f7f9 fb8d 	bl	8000534 <__aeabi_i2d>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4630      	mov	r0, r6
 8006e20:	4639      	mov	r1, r7
 8006e22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e26:	f7f9 fa37 	bl	8000298 <__aeabi_dsub>
 8006e2a:	4b23      	ldr	r3, [pc, #140]	; (8006eb8 <__ieee754_rem_pio2+0x410>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f7f9 fbeb 	bl	8000608 <__aeabi_dmul>
 8006e32:	460f      	mov	r7, r1
 8006e34:	4606      	mov	r6, r0
 8006e36:	f7f9 fe97 	bl	8000b68 <__aeabi_d2iz>
 8006e3a:	f7f9 fb7b 	bl	8000534 <__aeabi_i2d>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	460b      	mov	r3, r1
 8006e42:	4630      	mov	r0, r6
 8006e44:	4639      	mov	r1, r7
 8006e46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006e4a:	f7f9 fa25 	bl	8000298 <__aeabi_dsub>
 8006e4e:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <__ieee754_rem_pio2+0x410>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	f7f9 fbd9 	bl	8000608 <__aeabi_dmul>
 8006e56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006e5a:	ad04      	add	r5, sp, #16
 8006e5c:	f04f 0803 	mov.w	r8, #3
 8006e60:	46a9      	mov	r9, r5
 8006e62:	2600      	movs	r6, #0
 8006e64:	2700      	movs	r7, #0
 8006e66:	4632      	mov	r2, r6
 8006e68:	463b      	mov	r3, r7
 8006e6a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006e6e:	46c3      	mov	fp, r8
 8006e70:	3d08      	subs	r5, #8
 8006e72:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e76:	f7f9 fe2f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d1f3      	bne.n	8006e66 <__ieee754_rem_pio2+0x3be>
 8006e7e:	4b0f      	ldr	r3, [pc, #60]	; (8006ebc <__ieee754_rem_pio2+0x414>)
 8006e80:	9301      	str	r3, [sp, #4]
 8006e82:	2302      	movs	r3, #2
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	4622      	mov	r2, r4
 8006e88:	465b      	mov	r3, fp
 8006e8a:	4651      	mov	r1, sl
 8006e8c:	4648      	mov	r0, r9
 8006e8e:	f000 f8df 	bl	8007050 <__kernel_rem_pio2>
 8006e92:	9b02      	ldr	r3, [sp, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	4683      	mov	fp, r0
 8006e98:	f6bf ae46 	bge.w	8006b28 <__ieee754_rem_pio2+0x80>
 8006e9c:	e9da 2100 	ldrd	r2, r1, [sl]
 8006ea0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ea4:	e9ca 2300 	strd	r2, r3, [sl]
 8006ea8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006eac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006eb0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006eb4:	e73a      	b.n	8006d2c <__ieee754_rem_pio2+0x284>
 8006eb6:	bf00      	nop
 8006eb8:	41700000 	.word	0x41700000
 8006ebc:	080084bc 	.word	0x080084bc

08006ec0 <__kernel_cos>:
 8006ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	ec57 6b10 	vmov	r6, r7, d0
 8006ec8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006ecc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006ed0:	ed8d 1b00 	vstr	d1, [sp]
 8006ed4:	da07      	bge.n	8006ee6 <__kernel_cos+0x26>
 8006ed6:	ee10 0a10 	vmov	r0, s0
 8006eda:	4639      	mov	r1, r7
 8006edc:	f7f9 fe44 	bl	8000b68 <__aeabi_d2iz>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	f000 8088 	beq.w	8006ff6 <__kernel_cos+0x136>
 8006ee6:	4632      	mov	r2, r6
 8006ee8:	463b      	mov	r3, r7
 8006eea:	4630      	mov	r0, r6
 8006eec:	4639      	mov	r1, r7
 8006eee:	f7f9 fb8b 	bl	8000608 <__aeabi_dmul>
 8006ef2:	4b51      	ldr	r3, [pc, #324]	; (8007038 <__kernel_cos+0x178>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	460d      	mov	r5, r1
 8006efa:	f7f9 fb85 	bl	8000608 <__aeabi_dmul>
 8006efe:	a340      	add	r3, pc, #256	; (adr r3, 8007000 <__kernel_cos+0x140>)
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	4682      	mov	sl, r0
 8006f06:	468b      	mov	fp, r1
 8006f08:	4620      	mov	r0, r4
 8006f0a:	4629      	mov	r1, r5
 8006f0c:	f7f9 fb7c 	bl	8000608 <__aeabi_dmul>
 8006f10:	a33d      	add	r3, pc, #244	; (adr r3, 8007008 <__kernel_cos+0x148>)
 8006f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f16:	f7f9 f9c1 	bl	800029c <__adddf3>
 8006f1a:	4622      	mov	r2, r4
 8006f1c:	462b      	mov	r3, r5
 8006f1e:	f7f9 fb73 	bl	8000608 <__aeabi_dmul>
 8006f22:	a33b      	add	r3, pc, #236	; (adr r3, 8007010 <__kernel_cos+0x150>)
 8006f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f28:	f7f9 f9b6 	bl	8000298 <__aeabi_dsub>
 8006f2c:	4622      	mov	r2, r4
 8006f2e:	462b      	mov	r3, r5
 8006f30:	f7f9 fb6a 	bl	8000608 <__aeabi_dmul>
 8006f34:	a338      	add	r3, pc, #224	; (adr r3, 8007018 <__kernel_cos+0x158>)
 8006f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3a:	f7f9 f9af 	bl	800029c <__adddf3>
 8006f3e:	4622      	mov	r2, r4
 8006f40:	462b      	mov	r3, r5
 8006f42:	f7f9 fb61 	bl	8000608 <__aeabi_dmul>
 8006f46:	a336      	add	r3, pc, #216	; (adr r3, 8007020 <__kernel_cos+0x160>)
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	f7f9 f9a4 	bl	8000298 <__aeabi_dsub>
 8006f50:	4622      	mov	r2, r4
 8006f52:	462b      	mov	r3, r5
 8006f54:	f7f9 fb58 	bl	8000608 <__aeabi_dmul>
 8006f58:	a333      	add	r3, pc, #204	; (adr r3, 8007028 <__kernel_cos+0x168>)
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f7f9 f99d 	bl	800029c <__adddf3>
 8006f62:	4622      	mov	r2, r4
 8006f64:	462b      	mov	r3, r5
 8006f66:	f7f9 fb4f 	bl	8000608 <__aeabi_dmul>
 8006f6a:	4622      	mov	r2, r4
 8006f6c:	462b      	mov	r3, r5
 8006f6e:	f7f9 fb4b 	bl	8000608 <__aeabi_dmul>
 8006f72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f76:	4604      	mov	r4, r0
 8006f78:	460d      	mov	r5, r1
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	4639      	mov	r1, r7
 8006f7e:	f7f9 fb43 	bl	8000608 <__aeabi_dmul>
 8006f82:	460b      	mov	r3, r1
 8006f84:	4602      	mov	r2, r0
 8006f86:	4629      	mov	r1, r5
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f7f9 f985 	bl	8000298 <__aeabi_dsub>
 8006f8e:	4b2b      	ldr	r3, [pc, #172]	; (800703c <__kernel_cos+0x17c>)
 8006f90:	4598      	cmp	r8, r3
 8006f92:	4606      	mov	r6, r0
 8006f94:	460f      	mov	r7, r1
 8006f96:	dc10      	bgt.n	8006fba <__kernel_cos+0xfa>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4650      	mov	r0, sl
 8006f9e:	4659      	mov	r1, fp
 8006fa0:	f7f9 f97a 	bl	8000298 <__aeabi_dsub>
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4926      	ldr	r1, [pc, #152]	; (8007040 <__kernel_cos+0x180>)
 8006fa8:	4602      	mov	r2, r0
 8006faa:	2000      	movs	r0, #0
 8006fac:	f7f9 f974 	bl	8000298 <__aeabi_dsub>
 8006fb0:	ec41 0b10 	vmov	d0, r0, r1
 8006fb4:	b003      	add	sp, #12
 8006fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fba:	4b22      	ldr	r3, [pc, #136]	; (8007044 <__kernel_cos+0x184>)
 8006fbc:	4920      	ldr	r1, [pc, #128]	; (8007040 <__kernel_cos+0x180>)
 8006fbe:	4598      	cmp	r8, r3
 8006fc0:	bfcc      	ite	gt
 8006fc2:	4d21      	ldrgt	r5, [pc, #132]	; (8007048 <__kernel_cos+0x188>)
 8006fc4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006fc8:	2400      	movs	r4, #0
 8006fca:	4622      	mov	r2, r4
 8006fcc:	462b      	mov	r3, r5
 8006fce:	2000      	movs	r0, #0
 8006fd0:	f7f9 f962 	bl	8000298 <__aeabi_dsub>
 8006fd4:	4622      	mov	r2, r4
 8006fd6:	4680      	mov	r8, r0
 8006fd8:	4689      	mov	r9, r1
 8006fda:	462b      	mov	r3, r5
 8006fdc:	4650      	mov	r0, sl
 8006fde:	4659      	mov	r1, fp
 8006fe0:	f7f9 f95a 	bl	8000298 <__aeabi_dsub>
 8006fe4:	4632      	mov	r2, r6
 8006fe6:	463b      	mov	r3, r7
 8006fe8:	f7f9 f956 	bl	8000298 <__aeabi_dsub>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	e7da      	b.n	8006fac <__kernel_cos+0xec>
 8006ff6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007030 <__kernel_cos+0x170>
 8006ffa:	e7db      	b.n	8006fb4 <__kernel_cos+0xf4>
 8006ffc:	f3af 8000 	nop.w
 8007000:	be8838d4 	.word	0xbe8838d4
 8007004:	bda8fae9 	.word	0xbda8fae9
 8007008:	bdb4b1c4 	.word	0xbdb4b1c4
 800700c:	3e21ee9e 	.word	0x3e21ee9e
 8007010:	809c52ad 	.word	0x809c52ad
 8007014:	3e927e4f 	.word	0x3e927e4f
 8007018:	19cb1590 	.word	0x19cb1590
 800701c:	3efa01a0 	.word	0x3efa01a0
 8007020:	16c15177 	.word	0x16c15177
 8007024:	3f56c16c 	.word	0x3f56c16c
 8007028:	5555554c 	.word	0x5555554c
 800702c:	3fa55555 	.word	0x3fa55555
 8007030:	00000000 	.word	0x00000000
 8007034:	3ff00000 	.word	0x3ff00000
 8007038:	3fe00000 	.word	0x3fe00000
 800703c:	3fd33332 	.word	0x3fd33332
 8007040:	3ff00000 	.word	0x3ff00000
 8007044:	3fe90000 	.word	0x3fe90000
 8007048:	3fd20000 	.word	0x3fd20000
 800704c:	00000000 	.word	0x00000000

08007050 <__kernel_rem_pio2>:
 8007050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007054:	ed2d 8b02 	vpush	{d8}
 8007058:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800705c:	f112 0f14 	cmn.w	r2, #20
 8007060:	9308      	str	r3, [sp, #32]
 8007062:	9101      	str	r1, [sp, #4]
 8007064:	4bc4      	ldr	r3, [pc, #784]	; (8007378 <__kernel_rem_pio2+0x328>)
 8007066:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007068:	900b      	str	r0, [sp, #44]	; 0x2c
 800706a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800706e:	9302      	str	r3, [sp, #8]
 8007070:	9b08      	ldr	r3, [sp, #32]
 8007072:	f103 33ff 	add.w	r3, r3, #4294967295
 8007076:	bfa8      	it	ge
 8007078:	1ed4      	subge	r4, r2, #3
 800707a:	9306      	str	r3, [sp, #24]
 800707c:	bfb2      	itee	lt
 800707e:	2400      	movlt	r4, #0
 8007080:	2318      	movge	r3, #24
 8007082:	fb94 f4f3 	sdivge	r4, r4, r3
 8007086:	f06f 0317 	mvn.w	r3, #23
 800708a:	fb04 3303 	mla	r3, r4, r3, r3
 800708e:	eb03 0a02 	add.w	sl, r3, r2
 8007092:	9b02      	ldr	r3, [sp, #8]
 8007094:	9a06      	ldr	r2, [sp, #24]
 8007096:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007368 <__kernel_rem_pio2+0x318>
 800709a:	eb03 0802 	add.w	r8, r3, r2
 800709e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80070a0:	1aa7      	subs	r7, r4, r2
 80070a2:	ae22      	add	r6, sp, #136	; 0x88
 80070a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80070a8:	2500      	movs	r5, #0
 80070aa:	4545      	cmp	r5, r8
 80070ac:	dd13      	ble.n	80070d6 <__kernel_rem_pio2+0x86>
 80070ae:	9b08      	ldr	r3, [sp, #32]
 80070b0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8007368 <__kernel_rem_pio2+0x318>
 80070b4:	aa22      	add	r2, sp, #136	; 0x88
 80070b6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80070ba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80070be:	f04f 0800 	mov.w	r8, #0
 80070c2:	9b02      	ldr	r3, [sp, #8]
 80070c4:	4598      	cmp	r8, r3
 80070c6:	dc2f      	bgt.n	8007128 <__kernel_rem_pio2+0xd8>
 80070c8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80070cc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80070d0:	462f      	mov	r7, r5
 80070d2:	2600      	movs	r6, #0
 80070d4:	e01b      	b.n	800710e <__kernel_rem_pio2+0xbe>
 80070d6:	42ef      	cmn	r7, r5
 80070d8:	d407      	bmi.n	80070ea <__kernel_rem_pio2+0x9a>
 80070da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80070de:	f7f9 fa29 	bl	8000534 <__aeabi_i2d>
 80070e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80070e6:	3501      	adds	r5, #1
 80070e8:	e7df      	b.n	80070aa <__kernel_rem_pio2+0x5a>
 80070ea:	ec51 0b18 	vmov	r0, r1, d8
 80070ee:	e7f8      	b.n	80070e2 <__kernel_rem_pio2+0x92>
 80070f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80070f8:	f7f9 fa86 	bl	8000608 <__aeabi_dmul>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007104:	f7f9 f8ca 	bl	800029c <__adddf3>
 8007108:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800710c:	3601      	adds	r6, #1
 800710e:	9b06      	ldr	r3, [sp, #24]
 8007110:	429e      	cmp	r6, r3
 8007112:	f1a7 0708 	sub.w	r7, r7, #8
 8007116:	ddeb      	ble.n	80070f0 <__kernel_rem_pio2+0xa0>
 8007118:	ed9d 7b04 	vldr	d7, [sp, #16]
 800711c:	f108 0801 	add.w	r8, r8, #1
 8007120:	ecab 7b02 	vstmia	fp!, {d7}
 8007124:	3508      	adds	r5, #8
 8007126:	e7cc      	b.n	80070c2 <__kernel_rem_pio2+0x72>
 8007128:	9b02      	ldr	r3, [sp, #8]
 800712a:	aa0e      	add	r2, sp, #56	; 0x38
 800712c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007130:	930d      	str	r3, [sp, #52]	; 0x34
 8007132:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007134:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007138:	9c02      	ldr	r4, [sp, #8]
 800713a:	930c      	str	r3, [sp, #48]	; 0x30
 800713c:	00e3      	lsls	r3, r4, #3
 800713e:	930a      	str	r3, [sp, #40]	; 0x28
 8007140:	ab9a      	add	r3, sp, #616	; 0x268
 8007142:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007146:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800714a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800714e:	ab72      	add	r3, sp, #456	; 0x1c8
 8007150:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007154:	46c3      	mov	fp, r8
 8007156:	46a1      	mov	r9, r4
 8007158:	f1b9 0f00 	cmp.w	r9, #0
 800715c:	f1a5 0508 	sub.w	r5, r5, #8
 8007160:	dc77      	bgt.n	8007252 <__kernel_rem_pio2+0x202>
 8007162:	ec47 6b10 	vmov	d0, r6, r7
 8007166:	4650      	mov	r0, sl
 8007168:	f000 fc0a 	bl	8007980 <scalbn>
 800716c:	ec57 6b10 	vmov	r6, r7, d0
 8007170:	2200      	movs	r2, #0
 8007172:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007176:	ee10 0a10 	vmov	r0, s0
 800717a:	4639      	mov	r1, r7
 800717c:	f7f9 fa44 	bl	8000608 <__aeabi_dmul>
 8007180:	ec41 0b10 	vmov	d0, r0, r1
 8007184:	f000 fb7c 	bl	8007880 <floor>
 8007188:	4b7c      	ldr	r3, [pc, #496]	; (800737c <__kernel_rem_pio2+0x32c>)
 800718a:	ec51 0b10 	vmov	r0, r1, d0
 800718e:	2200      	movs	r2, #0
 8007190:	f7f9 fa3a 	bl	8000608 <__aeabi_dmul>
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	4630      	mov	r0, r6
 800719a:	4639      	mov	r1, r7
 800719c:	f7f9 f87c 	bl	8000298 <__aeabi_dsub>
 80071a0:	460f      	mov	r7, r1
 80071a2:	4606      	mov	r6, r0
 80071a4:	f7f9 fce0 	bl	8000b68 <__aeabi_d2iz>
 80071a8:	9004      	str	r0, [sp, #16]
 80071aa:	f7f9 f9c3 	bl	8000534 <__aeabi_i2d>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4630      	mov	r0, r6
 80071b4:	4639      	mov	r1, r7
 80071b6:	f7f9 f86f 	bl	8000298 <__aeabi_dsub>
 80071ba:	f1ba 0f00 	cmp.w	sl, #0
 80071be:	4606      	mov	r6, r0
 80071c0:	460f      	mov	r7, r1
 80071c2:	dd6d      	ble.n	80072a0 <__kernel_rem_pio2+0x250>
 80071c4:	1e62      	subs	r2, r4, #1
 80071c6:	ab0e      	add	r3, sp, #56	; 0x38
 80071c8:	9d04      	ldr	r5, [sp, #16]
 80071ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80071ce:	f1ca 0118 	rsb	r1, sl, #24
 80071d2:	fa40 f301 	asr.w	r3, r0, r1
 80071d6:	441d      	add	r5, r3
 80071d8:	408b      	lsls	r3, r1
 80071da:	1ac0      	subs	r0, r0, r3
 80071dc:	ab0e      	add	r3, sp, #56	; 0x38
 80071de:	9504      	str	r5, [sp, #16]
 80071e0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80071e4:	f1ca 0317 	rsb	r3, sl, #23
 80071e8:	fa40 fb03 	asr.w	fp, r0, r3
 80071ec:	f1bb 0f00 	cmp.w	fp, #0
 80071f0:	dd65      	ble.n	80072be <__kernel_rem_pio2+0x26e>
 80071f2:	9b04      	ldr	r3, [sp, #16]
 80071f4:	2200      	movs	r2, #0
 80071f6:	3301      	adds	r3, #1
 80071f8:	9304      	str	r3, [sp, #16]
 80071fa:	4615      	mov	r5, r2
 80071fc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007200:	4294      	cmp	r4, r2
 8007202:	f300 809c 	bgt.w	800733e <__kernel_rem_pio2+0x2ee>
 8007206:	f1ba 0f00 	cmp.w	sl, #0
 800720a:	dd07      	ble.n	800721c <__kernel_rem_pio2+0x1cc>
 800720c:	f1ba 0f01 	cmp.w	sl, #1
 8007210:	f000 80c0 	beq.w	8007394 <__kernel_rem_pio2+0x344>
 8007214:	f1ba 0f02 	cmp.w	sl, #2
 8007218:	f000 80c6 	beq.w	80073a8 <__kernel_rem_pio2+0x358>
 800721c:	f1bb 0f02 	cmp.w	fp, #2
 8007220:	d14d      	bne.n	80072be <__kernel_rem_pio2+0x26e>
 8007222:	4632      	mov	r2, r6
 8007224:	463b      	mov	r3, r7
 8007226:	4956      	ldr	r1, [pc, #344]	; (8007380 <__kernel_rem_pio2+0x330>)
 8007228:	2000      	movs	r0, #0
 800722a:	f7f9 f835 	bl	8000298 <__aeabi_dsub>
 800722e:	4606      	mov	r6, r0
 8007230:	460f      	mov	r7, r1
 8007232:	2d00      	cmp	r5, #0
 8007234:	d043      	beq.n	80072be <__kernel_rem_pio2+0x26e>
 8007236:	4650      	mov	r0, sl
 8007238:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007370 <__kernel_rem_pio2+0x320>
 800723c:	f000 fba0 	bl	8007980 <scalbn>
 8007240:	4630      	mov	r0, r6
 8007242:	4639      	mov	r1, r7
 8007244:	ec53 2b10 	vmov	r2, r3, d0
 8007248:	f7f9 f826 	bl	8000298 <__aeabi_dsub>
 800724c:	4606      	mov	r6, r0
 800724e:	460f      	mov	r7, r1
 8007250:	e035      	b.n	80072be <__kernel_rem_pio2+0x26e>
 8007252:	4b4c      	ldr	r3, [pc, #304]	; (8007384 <__kernel_rem_pio2+0x334>)
 8007254:	2200      	movs	r2, #0
 8007256:	4630      	mov	r0, r6
 8007258:	4639      	mov	r1, r7
 800725a:	f7f9 f9d5 	bl	8000608 <__aeabi_dmul>
 800725e:	f7f9 fc83 	bl	8000b68 <__aeabi_d2iz>
 8007262:	f7f9 f967 	bl	8000534 <__aeabi_i2d>
 8007266:	4602      	mov	r2, r0
 8007268:	460b      	mov	r3, r1
 800726a:	ec43 2b18 	vmov	d8, r2, r3
 800726e:	4b46      	ldr	r3, [pc, #280]	; (8007388 <__kernel_rem_pio2+0x338>)
 8007270:	2200      	movs	r2, #0
 8007272:	f7f9 f9c9 	bl	8000608 <__aeabi_dmul>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	4630      	mov	r0, r6
 800727c:	4639      	mov	r1, r7
 800727e:	f7f9 f80b 	bl	8000298 <__aeabi_dsub>
 8007282:	f7f9 fc71 	bl	8000b68 <__aeabi_d2iz>
 8007286:	e9d5 2300 	ldrd	r2, r3, [r5]
 800728a:	f84b 0b04 	str.w	r0, [fp], #4
 800728e:	ec51 0b18 	vmov	r0, r1, d8
 8007292:	f7f9 f803 	bl	800029c <__adddf3>
 8007296:	f109 39ff 	add.w	r9, r9, #4294967295
 800729a:	4606      	mov	r6, r0
 800729c:	460f      	mov	r7, r1
 800729e:	e75b      	b.n	8007158 <__kernel_rem_pio2+0x108>
 80072a0:	d106      	bne.n	80072b0 <__kernel_rem_pio2+0x260>
 80072a2:	1e63      	subs	r3, r4, #1
 80072a4:	aa0e      	add	r2, sp, #56	; 0x38
 80072a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80072aa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80072ae:	e79d      	b.n	80071ec <__kernel_rem_pio2+0x19c>
 80072b0:	4b36      	ldr	r3, [pc, #216]	; (800738c <__kernel_rem_pio2+0x33c>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	f7f9 fc2e 	bl	8000b14 <__aeabi_dcmpge>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	d13d      	bne.n	8007338 <__kernel_rem_pio2+0x2e8>
 80072bc:	4683      	mov	fp, r0
 80072be:	2200      	movs	r2, #0
 80072c0:	2300      	movs	r3, #0
 80072c2:	4630      	mov	r0, r6
 80072c4:	4639      	mov	r1, r7
 80072c6:	f7f9 fc07 	bl	8000ad8 <__aeabi_dcmpeq>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	f000 80c0 	beq.w	8007450 <__kernel_rem_pio2+0x400>
 80072d0:	1e65      	subs	r5, r4, #1
 80072d2:	462b      	mov	r3, r5
 80072d4:	2200      	movs	r2, #0
 80072d6:	9902      	ldr	r1, [sp, #8]
 80072d8:	428b      	cmp	r3, r1
 80072da:	da6c      	bge.n	80073b6 <__kernel_rem_pio2+0x366>
 80072dc:	2a00      	cmp	r2, #0
 80072de:	f000 8089 	beq.w	80073f4 <__kernel_rem_pio2+0x3a4>
 80072e2:	ab0e      	add	r3, sp, #56	; 0x38
 80072e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80072e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 80ad 	beq.w	800744c <__kernel_rem_pio2+0x3fc>
 80072f2:	4650      	mov	r0, sl
 80072f4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007370 <__kernel_rem_pio2+0x320>
 80072f8:	f000 fb42 	bl	8007980 <scalbn>
 80072fc:	ab9a      	add	r3, sp, #616	; 0x268
 80072fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007302:	ec57 6b10 	vmov	r6, r7, d0
 8007306:	00ec      	lsls	r4, r5, #3
 8007308:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800730c:	46aa      	mov	sl, r5
 800730e:	f1ba 0f00 	cmp.w	sl, #0
 8007312:	f280 80d6 	bge.w	80074c2 <__kernel_rem_pio2+0x472>
 8007316:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8007368 <__kernel_rem_pio2+0x318>
 800731a:	462e      	mov	r6, r5
 800731c:	2e00      	cmp	r6, #0
 800731e:	f2c0 8104 	blt.w	800752a <__kernel_rem_pio2+0x4da>
 8007322:	ab72      	add	r3, sp, #456	; 0x1c8
 8007324:	ed8d 8b06 	vstr	d8, [sp, #24]
 8007328:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007390 <__kernel_rem_pio2+0x340>
 800732c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007330:	f04f 0800 	mov.w	r8, #0
 8007334:	1baf      	subs	r7, r5, r6
 8007336:	e0ea      	b.n	800750e <__kernel_rem_pio2+0x4be>
 8007338:	f04f 0b02 	mov.w	fp, #2
 800733c:	e759      	b.n	80071f2 <__kernel_rem_pio2+0x1a2>
 800733e:	f8d8 3000 	ldr.w	r3, [r8]
 8007342:	b955      	cbnz	r5, 800735a <__kernel_rem_pio2+0x30a>
 8007344:	b123      	cbz	r3, 8007350 <__kernel_rem_pio2+0x300>
 8007346:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800734a:	f8c8 3000 	str.w	r3, [r8]
 800734e:	2301      	movs	r3, #1
 8007350:	3201      	adds	r2, #1
 8007352:	f108 0804 	add.w	r8, r8, #4
 8007356:	461d      	mov	r5, r3
 8007358:	e752      	b.n	8007200 <__kernel_rem_pio2+0x1b0>
 800735a:	1acb      	subs	r3, r1, r3
 800735c:	f8c8 3000 	str.w	r3, [r8]
 8007360:	462b      	mov	r3, r5
 8007362:	e7f5      	b.n	8007350 <__kernel_rem_pio2+0x300>
 8007364:	f3af 8000 	nop.w
	...
 8007374:	3ff00000 	.word	0x3ff00000
 8007378:	08008608 	.word	0x08008608
 800737c:	40200000 	.word	0x40200000
 8007380:	3ff00000 	.word	0x3ff00000
 8007384:	3e700000 	.word	0x3e700000
 8007388:	41700000 	.word	0x41700000
 800738c:	3fe00000 	.word	0x3fe00000
 8007390:	080085c8 	.word	0x080085c8
 8007394:	1e62      	subs	r2, r4, #1
 8007396:	ab0e      	add	r3, sp, #56	; 0x38
 8007398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800739c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80073a0:	a90e      	add	r1, sp, #56	; 0x38
 80073a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80073a6:	e739      	b.n	800721c <__kernel_rem_pio2+0x1cc>
 80073a8:	1e62      	subs	r2, r4, #1
 80073aa:	ab0e      	add	r3, sp, #56	; 0x38
 80073ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80073b4:	e7f4      	b.n	80073a0 <__kernel_rem_pio2+0x350>
 80073b6:	a90e      	add	r1, sp, #56	; 0x38
 80073b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80073bc:	3b01      	subs	r3, #1
 80073be:	430a      	orrs	r2, r1
 80073c0:	e789      	b.n	80072d6 <__kernel_rem_pio2+0x286>
 80073c2:	3301      	adds	r3, #1
 80073c4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80073c8:	2900      	cmp	r1, #0
 80073ca:	d0fa      	beq.n	80073c2 <__kernel_rem_pio2+0x372>
 80073cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073ce:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80073d2:	446a      	add	r2, sp
 80073d4:	3a98      	subs	r2, #152	; 0x98
 80073d6:	920a      	str	r2, [sp, #40]	; 0x28
 80073d8:	9a08      	ldr	r2, [sp, #32]
 80073da:	18e3      	adds	r3, r4, r3
 80073dc:	18a5      	adds	r5, r4, r2
 80073de:	aa22      	add	r2, sp, #136	; 0x88
 80073e0:	f104 0801 	add.w	r8, r4, #1
 80073e4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80073e8:	9304      	str	r3, [sp, #16]
 80073ea:	9b04      	ldr	r3, [sp, #16]
 80073ec:	4543      	cmp	r3, r8
 80073ee:	da04      	bge.n	80073fa <__kernel_rem_pio2+0x3aa>
 80073f0:	461c      	mov	r4, r3
 80073f2:	e6a3      	b.n	800713c <__kernel_rem_pio2+0xec>
 80073f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073f6:	2301      	movs	r3, #1
 80073f8:	e7e4      	b.n	80073c4 <__kernel_rem_pio2+0x374>
 80073fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073fc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007400:	f7f9 f898 	bl	8000534 <__aeabi_i2d>
 8007404:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800740a:	46ab      	mov	fp, r5
 800740c:	461c      	mov	r4, r3
 800740e:	f04f 0900 	mov.w	r9, #0
 8007412:	2600      	movs	r6, #0
 8007414:	2700      	movs	r7, #0
 8007416:	9b06      	ldr	r3, [sp, #24]
 8007418:	4599      	cmp	r9, r3
 800741a:	dd06      	ble.n	800742a <__kernel_rem_pio2+0x3da>
 800741c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800741e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007422:	f108 0801 	add.w	r8, r8, #1
 8007426:	930a      	str	r3, [sp, #40]	; 0x28
 8007428:	e7df      	b.n	80073ea <__kernel_rem_pio2+0x39a>
 800742a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800742e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007432:	f7f9 f8e9 	bl	8000608 <__aeabi_dmul>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	4630      	mov	r0, r6
 800743c:	4639      	mov	r1, r7
 800743e:	f7f8 ff2d 	bl	800029c <__adddf3>
 8007442:	f109 0901 	add.w	r9, r9, #1
 8007446:	4606      	mov	r6, r0
 8007448:	460f      	mov	r7, r1
 800744a:	e7e4      	b.n	8007416 <__kernel_rem_pio2+0x3c6>
 800744c:	3d01      	subs	r5, #1
 800744e:	e748      	b.n	80072e2 <__kernel_rem_pio2+0x292>
 8007450:	ec47 6b10 	vmov	d0, r6, r7
 8007454:	f1ca 0000 	rsb	r0, sl, #0
 8007458:	f000 fa92 	bl	8007980 <scalbn>
 800745c:	ec57 6b10 	vmov	r6, r7, d0
 8007460:	4ba0      	ldr	r3, [pc, #640]	; (80076e4 <__kernel_rem_pio2+0x694>)
 8007462:	ee10 0a10 	vmov	r0, s0
 8007466:	2200      	movs	r2, #0
 8007468:	4639      	mov	r1, r7
 800746a:	f7f9 fb53 	bl	8000b14 <__aeabi_dcmpge>
 800746e:	b1f8      	cbz	r0, 80074b0 <__kernel_rem_pio2+0x460>
 8007470:	4b9d      	ldr	r3, [pc, #628]	; (80076e8 <__kernel_rem_pio2+0x698>)
 8007472:	2200      	movs	r2, #0
 8007474:	4630      	mov	r0, r6
 8007476:	4639      	mov	r1, r7
 8007478:	f7f9 f8c6 	bl	8000608 <__aeabi_dmul>
 800747c:	f7f9 fb74 	bl	8000b68 <__aeabi_d2iz>
 8007480:	4680      	mov	r8, r0
 8007482:	f7f9 f857 	bl	8000534 <__aeabi_i2d>
 8007486:	4b97      	ldr	r3, [pc, #604]	; (80076e4 <__kernel_rem_pio2+0x694>)
 8007488:	2200      	movs	r2, #0
 800748a:	f7f9 f8bd 	bl	8000608 <__aeabi_dmul>
 800748e:	460b      	mov	r3, r1
 8007490:	4602      	mov	r2, r0
 8007492:	4639      	mov	r1, r7
 8007494:	4630      	mov	r0, r6
 8007496:	f7f8 feff 	bl	8000298 <__aeabi_dsub>
 800749a:	f7f9 fb65 	bl	8000b68 <__aeabi_d2iz>
 800749e:	1c65      	adds	r5, r4, #1
 80074a0:	ab0e      	add	r3, sp, #56	; 0x38
 80074a2:	f10a 0a18 	add.w	sl, sl, #24
 80074a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80074aa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80074ae:	e720      	b.n	80072f2 <__kernel_rem_pio2+0x2a2>
 80074b0:	4630      	mov	r0, r6
 80074b2:	4639      	mov	r1, r7
 80074b4:	f7f9 fb58 	bl	8000b68 <__aeabi_d2iz>
 80074b8:	ab0e      	add	r3, sp, #56	; 0x38
 80074ba:	4625      	mov	r5, r4
 80074bc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80074c0:	e717      	b.n	80072f2 <__kernel_rem_pio2+0x2a2>
 80074c2:	ab0e      	add	r3, sp, #56	; 0x38
 80074c4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80074c8:	f7f9 f834 	bl	8000534 <__aeabi_i2d>
 80074cc:	4632      	mov	r2, r6
 80074ce:	463b      	mov	r3, r7
 80074d0:	f7f9 f89a 	bl	8000608 <__aeabi_dmul>
 80074d4:	4b84      	ldr	r3, [pc, #528]	; (80076e8 <__kernel_rem_pio2+0x698>)
 80074d6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80074da:	2200      	movs	r2, #0
 80074dc:	4630      	mov	r0, r6
 80074de:	4639      	mov	r1, r7
 80074e0:	f7f9 f892 	bl	8000608 <__aeabi_dmul>
 80074e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074e8:	4606      	mov	r6, r0
 80074ea:	460f      	mov	r7, r1
 80074ec:	e70f      	b.n	800730e <__kernel_rem_pio2+0x2be>
 80074ee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80074f2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80074f6:	f7f9 f887 	bl	8000608 <__aeabi_dmul>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007502:	f7f8 fecb 	bl	800029c <__adddf3>
 8007506:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800750a:	f108 0801 	add.w	r8, r8, #1
 800750e:	9b02      	ldr	r3, [sp, #8]
 8007510:	4598      	cmp	r8, r3
 8007512:	dc01      	bgt.n	8007518 <__kernel_rem_pio2+0x4c8>
 8007514:	45b8      	cmp	r8, r7
 8007516:	ddea      	ble.n	80074ee <__kernel_rem_pio2+0x49e>
 8007518:	ed9d 7b06 	vldr	d7, [sp, #24]
 800751c:	ab4a      	add	r3, sp, #296	; 0x128
 800751e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007522:	ed87 7b00 	vstr	d7, [r7]
 8007526:	3e01      	subs	r6, #1
 8007528:	e6f8      	b.n	800731c <__kernel_rem_pio2+0x2cc>
 800752a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800752c:	2b02      	cmp	r3, #2
 800752e:	dc0b      	bgt.n	8007548 <__kernel_rem_pio2+0x4f8>
 8007530:	2b00      	cmp	r3, #0
 8007532:	dc35      	bgt.n	80075a0 <__kernel_rem_pio2+0x550>
 8007534:	d059      	beq.n	80075ea <__kernel_rem_pio2+0x59a>
 8007536:	9b04      	ldr	r3, [sp, #16]
 8007538:	f003 0007 	and.w	r0, r3, #7
 800753c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007540:	ecbd 8b02 	vpop	{d8}
 8007544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007548:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800754a:	2b03      	cmp	r3, #3
 800754c:	d1f3      	bne.n	8007536 <__kernel_rem_pio2+0x4e6>
 800754e:	ab4a      	add	r3, sp, #296	; 0x128
 8007550:	4423      	add	r3, r4
 8007552:	9306      	str	r3, [sp, #24]
 8007554:	461c      	mov	r4, r3
 8007556:	469a      	mov	sl, r3
 8007558:	9502      	str	r5, [sp, #8]
 800755a:	9b02      	ldr	r3, [sp, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	f1aa 0a08 	sub.w	sl, sl, #8
 8007562:	dc6b      	bgt.n	800763c <__kernel_rem_pio2+0x5ec>
 8007564:	46aa      	mov	sl, r5
 8007566:	f1ba 0f01 	cmp.w	sl, #1
 800756a:	f1a4 0408 	sub.w	r4, r4, #8
 800756e:	f300 8085 	bgt.w	800767c <__kernel_rem_pio2+0x62c>
 8007572:	9c06      	ldr	r4, [sp, #24]
 8007574:	2000      	movs	r0, #0
 8007576:	3408      	adds	r4, #8
 8007578:	2100      	movs	r1, #0
 800757a:	2d01      	cmp	r5, #1
 800757c:	f300 809d 	bgt.w	80076ba <__kernel_rem_pio2+0x66a>
 8007580:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007584:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007588:	f1bb 0f00 	cmp.w	fp, #0
 800758c:	f040 809b 	bne.w	80076c6 <__kernel_rem_pio2+0x676>
 8007590:	9b01      	ldr	r3, [sp, #4]
 8007592:	e9c3 5600 	strd	r5, r6, [r3]
 8007596:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800759a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800759e:	e7ca      	b.n	8007536 <__kernel_rem_pio2+0x4e6>
 80075a0:	3408      	adds	r4, #8
 80075a2:	ab4a      	add	r3, sp, #296	; 0x128
 80075a4:	441c      	add	r4, r3
 80075a6:	462e      	mov	r6, r5
 80075a8:	2000      	movs	r0, #0
 80075aa:	2100      	movs	r1, #0
 80075ac:	2e00      	cmp	r6, #0
 80075ae:	da36      	bge.n	800761e <__kernel_rem_pio2+0x5ce>
 80075b0:	f1bb 0f00 	cmp.w	fp, #0
 80075b4:	d039      	beq.n	800762a <__kernel_rem_pio2+0x5da>
 80075b6:	4602      	mov	r2, r0
 80075b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075bc:	9c01      	ldr	r4, [sp, #4]
 80075be:	e9c4 2300 	strd	r2, r3, [r4]
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80075ca:	f7f8 fe65 	bl	8000298 <__aeabi_dsub>
 80075ce:	ae4c      	add	r6, sp, #304	; 0x130
 80075d0:	2401      	movs	r4, #1
 80075d2:	42a5      	cmp	r5, r4
 80075d4:	da2c      	bge.n	8007630 <__kernel_rem_pio2+0x5e0>
 80075d6:	f1bb 0f00 	cmp.w	fp, #0
 80075da:	d002      	beq.n	80075e2 <__kernel_rem_pio2+0x592>
 80075dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075e0:	4619      	mov	r1, r3
 80075e2:	9b01      	ldr	r3, [sp, #4]
 80075e4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80075e8:	e7a5      	b.n	8007536 <__kernel_rem_pio2+0x4e6>
 80075ea:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80075ee:	eb0d 0403 	add.w	r4, sp, r3
 80075f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80075f6:	2000      	movs	r0, #0
 80075f8:	2100      	movs	r1, #0
 80075fa:	2d00      	cmp	r5, #0
 80075fc:	da09      	bge.n	8007612 <__kernel_rem_pio2+0x5c2>
 80075fe:	f1bb 0f00 	cmp.w	fp, #0
 8007602:	d002      	beq.n	800760a <__kernel_rem_pio2+0x5ba>
 8007604:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007608:	4619      	mov	r1, r3
 800760a:	9b01      	ldr	r3, [sp, #4]
 800760c:	e9c3 0100 	strd	r0, r1, [r3]
 8007610:	e791      	b.n	8007536 <__kernel_rem_pio2+0x4e6>
 8007612:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007616:	f7f8 fe41 	bl	800029c <__adddf3>
 800761a:	3d01      	subs	r5, #1
 800761c:	e7ed      	b.n	80075fa <__kernel_rem_pio2+0x5aa>
 800761e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007622:	f7f8 fe3b 	bl	800029c <__adddf3>
 8007626:	3e01      	subs	r6, #1
 8007628:	e7c0      	b.n	80075ac <__kernel_rem_pio2+0x55c>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	e7c5      	b.n	80075bc <__kernel_rem_pio2+0x56c>
 8007630:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007634:	f7f8 fe32 	bl	800029c <__adddf3>
 8007638:	3401      	adds	r4, #1
 800763a:	e7ca      	b.n	80075d2 <__kernel_rem_pio2+0x582>
 800763c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007640:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007644:	9b02      	ldr	r3, [sp, #8]
 8007646:	3b01      	subs	r3, #1
 8007648:	9302      	str	r3, [sp, #8]
 800764a:	4632      	mov	r2, r6
 800764c:	463b      	mov	r3, r7
 800764e:	4640      	mov	r0, r8
 8007650:	4649      	mov	r1, r9
 8007652:	f7f8 fe23 	bl	800029c <__adddf3>
 8007656:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	4640      	mov	r0, r8
 8007660:	4649      	mov	r1, r9
 8007662:	f7f8 fe19 	bl	8000298 <__aeabi_dsub>
 8007666:	4632      	mov	r2, r6
 8007668:	463b      	mov	r3, r7
 800766a:	f7f8 fe17 	bl	800029c <__adddf3>
 800766e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007672:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007676:	ed8a 7b00 	vstr	d7, [sl]
 800767a:	e76e      	b.n	800755a <__kernel_rem_pio2+0x50a>
 800767c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007680:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007684:	4640      	mov	r0, r8
 8007686:	4632      	mov	r2, r6
 8007688:	463b      	mov	r3, r7
 800768a:	4649      	mov	r1, r9
 800768c:	f7f8 fe06 	bl	800029c <__adddf3>
 8007690:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	4640      	mov	r0, r8
 800769a:	4649      	mov	r1, r9
 800769c:	f7f8 fdfc 	bl	8000298 <__aeabi_dsub>
 80076a0:	4632      	mov	r2, r6
 80076a2:	463b      	mov	r3, r7
 80076a4:	f7f8 fdfa 	bl	800029c <__adddf3>
 80076a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80076b0:	ed84 7b00 	vstr	d7, [r4]
 80076b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076b8:	e755      	b.n	8007566 <__kernel_rem_pio2+0x516>
 80076ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80076be:	f7f8 fded 	bl	800029c <__adddf3>
 80076c2:	3d01      	subs	r5, #1
 80076c4:	e759      	b.n	800757a <__kernel_rem_pio2+0x52a>
 80076c6:	9b01      	ldr	r3, [sp, #4]
 80076c8:	9a01      	ldr	r2, [sp, #4]
 80076ca:	601d      	str	r5, [r3, #0]
 80076cc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80076d0:	605c      	str	r4, [r3, #4]
 80076d2:	609f      	str	r7, [r3, #8]
 80076d4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80076d8:	60d3      	str	r3, [r2, #12]
 80076da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076de:	6110      	str	r0, [r2, #16]
 80076e0:	6153      	str	r3, [r2, #20]
 80076e2:	e728      	b.n	8007536 <__kernel_rem_pio2+0x4e6>
 80076e4:	41700000 	.word	0x41700000
 80076e8:	3e700000 	.word	0x3e700000
 80076ec:	00000000 	.word	0x00000000

080076f0 <__kernel_sin>:
 80076f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f4:	ed2d 8b04 	vpush	{d8-d9}
 80076f8:	eeb0 8a41 	vmov.f32	s16, s2
 80076fc:	eef0 8a61 	vmov.f32	s17, s3
 8007700:	ec55 4b10 	vmov	r4, r5, d0
 8007704:	b083      	sub	sp, #12
 8007706:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800770a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800770e:	9001      	str	r0, [sp, #4]
 8007710:	da06      	bge.n	8007720 <__kernel_sin+0x30>
 8007712:	ee10 0a10 	vmov	r0, s0
 8007716:	4629      	mov	r1, r5
 8007718:	f7f9 fa26 	bl	8000b68 <__aeabi_d2iz>
 800771c:	2800      	cmp	r0, #0
 800771e:	d051      	beq.n	80077c4 <__kernel_sin+0xd4>
 8007720:	4622      	mov	r2, r4
 8007722:	462b      	mov	r3, r5
 8007724:	4620      	mov	r0, r4
 8007726:	4629      	mov	r1, r5
 8007728:	f7f8 ff6e 	bl	8000608 <__aeabi_dmul>
 800772c:	4682      	mov	sl, r0
 800772e:	468b      	mov	fp, r1
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	4620      	mov	r0, r4
 8007736:	4629      	mov	r1, r5
 8007738:	f7f8 ff66 	bl	8000608 <__aeabi_dmul>
 800773c:	a341      	add	r3, pc, #260	; (adr r3, 8007844 <__kernel_sin+0x154>)
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	4680      	mov	r8, r0
 8007744:	4689      	mov	r9, r1
 8007746:	4650      	mov	r0, sl
 8007748:	4659      	mov	r1, fp
 800774a:	f7f8 ff5d 	bl	8000608 <__aeabi_dmul>
 800774e:	a33f      	add	r3, pc, #252	; (adr r3, 800784c <__kernel_sin+0x15c>)
 8007750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007754:	f7f8 fda0 	bl	8000298 <__aeabi_dsub>
 8007758:	4652      	mov	r2, sl
 800775a:	465b      	mov	r3, fp
 800775c:	f7f8 ff54 	bl	8000608 <__aeabi_dmul>
 8007760:	a33c      	add	r3, pc, #240	; (adr r3, 8007854 <__kernel_sin+0x164>)
 8007762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007766:	f7f8 fd99 	bl	800029c <__adddf3>
 800776a:	4652      	mov	r2, sl
 800776c:	465b      	mov	r3, fp
 800776e:	f7f8 ff4b 	bl	8000608 <__aeabi_dmul>
 8007772:	a33a      	add	r3, pc, #232	; (adr r3, 800785c <__kernel_sin+0x16c>)
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	f7f8 fd8e 	bl	8000298 <__aeabi_dsub>
 800777c:	4652      	mov	r2, sl
 800777e:	465b      	mov	r3, fp
 8007780:	f7f8 ff42 	bl	8000608 <__aeabi_dmul>
 8007784:	a337      	add	r3, pc, #220	; (adr r3, 8007864 <__kernel_sin+0x174>)
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	f7f8 fd87 	bl	800029c <__adddf3>
 800778e:	9b01      	ldr	r3, [sp, #4]
 8007790:	4606      	mov	r6, r0
 8007792:	460f      	mov	r7, r1
 8007794:	b9eb      	cbnz	r3, 80077d2 <__kernel_sin+0xe2>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	4650      	mov	r0, sl
 800779c:	4659      	mov	r1, fp
 800779e:	f7f8 ff33 	bl	8000608 <__aeabi_dmul>
 80077a2:	a325      	add	r3, pc, #148	; (adr r3, 8007838 <__kernel_sin+0x148>)
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	f7f8 fd76 	bl	8000298 <__aeabi_dsub>
 80077ac:	4642      	mov	r2, r8
 80077ae:	464b      	mov	r3, r9
 80077b0:	f7f8 ff2a 	bl	8000608 <__aeabi_dmul>
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	4620      	mov	r0, r4
 80077ba:	4629      	mov	r1, r5
 80077bc:	f7f8 fd6e 	bl	800029c <__adddf3>
 80077c0:	4604      	mov	r4, r0
 80077c2:	460d      	mov	r5, r1
 80077c4:	ec45 4b10 	vmov	d0, r4, r5
 80077c8:	b003      	add	sp, #12
 80077ca:	ecbd 8b04 	vpop	{d8-d9}
 80077ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d2:	4b1b      	ldr	r3, [pc, #108]	; (8007840 <__kernel_sin+0x150>)
 80077d4:	ec51 0b18 	vmov	r0, r1, d8
 80077d8:	2200      	movs	r2, #0
 80077da:	f7f8 ff15 	bl	8000608 <__aeabi_dmul>
 80077de:	4632      	mov	r2, r6
 80077e0:	ec41 0b19 	vmov	d9, r0, r1
 80077e4:	463b      	mov	r3, r7
 80077e6:	4640      	mov	r0, r8
 80077e8:	4649      	mov	r1, r9
 80077ea:	f7f8 ff0d 	bl	8000608 <__aeabi_dmul>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	ec51 0b19 	vmov	r0, r1, d9
 80077f6:	f7f8 fd4f 	bl	8000298 <__aeabi_dsub>
 80077fa:	4652      	mov	r2, sl
 80077fc:	465b      	mov	r3, fp
 80077fe:	f7f8 ff03 	bl	8000608 <__aeabi_dmul>
 8007802:	ec53 2b18 	vmov	r2, r3, d8
 8007806:	f7f8 fd47 	bl	8000298 <__aeabi_dsub>
 800780a:	a30b      	add	r3, pc, #44	; (adr r3, 8007838 <__kernel_sin+0x148>)
 800780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007810:	4606      	mov	r6, r0
 8007812:	460f      	mov	r7, r1
 8007814:	4640      	mov	r0, r8
 8007816:	4649      	mov	r1, r9
 8007818:	f7f8 fef6 	bl	8000608 <__aeabi_dmul>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	4630      	mov	r0, r6
 8007822:	4639      	mov	r1, r7
 8007824:	f7f8 fd3a 	bl	800029c <__adddf3>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4620      	mov	r0, r4
 800782e:	4629      	mov	r1, r5
 8007830:	f7f8 fd32 	bl	8000298 <__aeabi_dsub>
 8007834:	e7c4      	b.n	80077c0 <__kernel_sin+0xd0>
 8007836:	bf00      	nop
 8007838:	55555549 	.word	0x55555549
 800783c:	3fc55555 	.word	0x3fc55555
 8007840:	3fe00000 	.word	0x3fe00000
 8007844:	5acfd57c 	.word	0x5acfd57c
 8007848:	3de5d93a 	.word	0x3de5d93a
 800784c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007850:	3e5ae5e6 	.word	0x3e5ae5e6
 8007854:	57b1fe7d 	.word	0x57b1fe7d
 8007858:	3ec71de3 	.word	0x3ec71de3
 800785c:	19c161d5 	.word	0x19c161d5
 8007860:	3f2a01a0 	.word	0x3f2a01a0
 8007864:	1110f8a6 	.word	0x1110f8a6
 8007868:	3f811111 	.word	0x3f811111

0800786c <fabs>:
 800786c:	ec51 0b10 	vmov	r0, r1, d0
 8007870:	ee10 2a10 	vmov	r2, s0
 8007874:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007878:	ec43 2b10 	vmov	d0, r2, r3
 800787c:	4770      	bx	lr
	...

08007880 <floor>:
 8007880:	ec51 0b10 	vmov	r0, r1, d0
 8007884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007888:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800788c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007890:	2e13      	cmp	r6, #19
 8007892:	ee10 5a10 	vmov	r5, s0
 8007896:	ee10 8a10 	vmov	r8, s0
 800789a:	460c      	mov	r4, r1
 800789c:	dc32      	bgt.n	8007904 <floor+0x84>
 800789e:	2e00      	cmp	r6, #0
 80078a0:	da14      	bge.n	80078cc <floor+0x4c>
 80078a2:	a333      	add	r3, pc, #204	; (adr r3, 8007970 <floor+0xf0>)
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	f7f8 fcf8 	bl	800029c <__adddf3>
 80078ac:	2200      	movs	r2, #0
 80078ae:	2300      	movs	r3, #0
 80078b0:	f7f9 f93a 	bl	8000b28 <__aeabi_dcmpgt>
 80078b4:	b138      	cbz	r0, 80078c6 <floor+0x46>
 80078b6:	2c00      	cmp	r4, #0
 80078b8:	da57      	bge.n	800796a <floor+0xea>
 80078ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80078be:	431d      	orrs	r5, r3
 80078c0:	d001      	beq.n	80078c6 <floor+0x46>
 80078c2:	4c2d      	ldr	r4, [pc, #180]	; (8007978 <floor+0xf8>)
 80078c4:	2500      	movs	r5, #0
 80078c6:	4621      	mov	r1, r4
 80078c8:	4628      	mov	r0, r5
 80078ca:	e025      	b.n	8007918 <floor+0x98>
 80078cc:	4f2b      	ldr	r7, [pc, #172]	; (800797c <floor+0xfc>)
 80078ce:	4137      	asrs	r7, r6
 80078d0:	ea01 0307 	and.w	r3, r1, r7
 80078d4:	4303      	orrs	r3, r0
 80078d6:	d01f      	beq.n	8007918 <floor+0x98>
 80078d8:	a325      	add	r3, pc, #148	; (adr r3, 8007970 <floor+0xf0>)
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	f7f8 fcdd 	bl	800029c <__adddf3>
 80078e2:	2200      	movs	r2, #0
 80078e4:	2300      	movs	r3, #0
 80078e6:	f7f9 f91f 	bl	8000b28 <__aeabi_dcmpgt>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d0eb      	beq.n	80078c6 <floor+0x46>
 80078ee:	2c00      	cmp	r4, #0
 80078f0:	bfbe      	ittt	lt
 80078f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80078f6:	fa43 f606 	asrlt.w	r6, r3, r6
 80078fa:	19a4      	addlt	r4, r4, r6
 80078fc:	ea24 0407 	bic.w	r4, r4, r7
 8007900:	2500      	movs	r5, #0
 8007902:	e7e0      	b.n	80078c6 <floor+0x46>
 8007904:	2e33      	cmp	r6, #51	; 0x33
 8007906:	dd0b      	ble.n	8007920 <floor+0xa0>
 8007908:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800790c:	d104      	bne.n	8007918 <floor+0x98>
 800790e:	ee10 2a10 	vmov	r2, s0
 8007912:	460b      	mov	r3, r1
 8007914:	f7f8 fcc2 	bl	800029c <__adddf3>
 8007918:	ec41 0b10 	vmov	d0, r0, r1
 800791c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007920:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007924:	f04f 33ff 	mov.w	r3, #4294967295
 8007928:	fa23 f707 	lsr.w	r7, r3, r7
 800792c:	4207      	tst	r7, r0
 800792e:	d0f3      	beq.n	8007918 <floor+0x98>
 8007930:	a30f      	add	r3, pc, #60	; (adr r3, 8007970 <floor+0xf0>)
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f7f8 fcb1 	bl	800029c <__adddf3>
 800793a:	2200      	movs	r2, #0
 800793c:	2300      	movs	r3, #0
 800793e:	f7f9 f8f3 	bl	8000b28 <__aeabi_dcmpgt>
 8007942:	2800      	cmp	r0, #0
 8007944:	d0bf      	beq.n	80078c6 <floor+0x46>
 8007946:	2c00      	cmp	r4, #0
 8007948:	da02      	bge.n	8007950 <floor+0xd0>
 800794a:	2e14      	cmp	r6, #20
 800794c:	d103      	bne.n	8007956 <floor+0xd6>
 800794e:	3401      	adds	r4, #1
 8007950:	ea25 0507 	bic.w	r5, r5, r7
 8007954:	e7b7      	b.n	80078c6 <floor+0x46>
 8007956:	2301      	movs	r3, #1
 8007958:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800795c:	fa03 f606 	lsl.w	r6, r3, r6
 8007960:	4435      	add	r5, r6
 8007962:	4545      	cmp	r5, r8
 8007964:	bf38      	it	cc
 8007966:	18e4      	addcc	r4, r4, r3
 8007968:	e7f2      	b.n	8007950 <floor+0xd0>
 800796a:	2500      	movs	r5, #0
 800796c:	462c      	mov	r4, r5
 800796e:	e7aa      	b.n	80078c6 <floor+0x46>
 8007970:	8800759c 	.word	0x8800759c
 8007974:	7e37e43c 	.word	0x7e37e43c
 8007978:	bff00000 	.word	0xbff00000
 800797c:	000fffff 	.word	0x000fffff

08007980 <scalbn>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	ec55 4b10 	vmov	r4, r5, d0
 8007986:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800798a:	4606      	mov	r6, r0
 800798c:	462b      	mov	r3, r5
 800798e:	b99a      	cbnz	r2, 80079b8 <scalbn+0x38>
 8007990:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007994:	4323      	orrs	r3, r4
 8007996:	d036      	beq.n	8007a06 <scalbn+0x86>
 8007998:	4b39      	ldr	r3, [pc, #228]	; (8007a80 <scalbn+0x100>)
 800799a:	4629      	mov	r1, r5
 800799c:	ee10 0a10 	vmov	r0, s0
 80079a0:	2200      	movs	r2, #0
 80079a2:	f7f8 fe31 	bl	8000608 <__aeabi_dmul>
 80079a6:	4b37      	ldr	r3, [pc, #220]	; (8007a84 <scalbn+0x104>)
 80079a8:	429e      	cmp	r6, r3
 80079aa:	4604      	mov	r4, r0
 80079ac:	460d      	mov	r5, r1
 80079ae:	da10      	bge.n	80079d2 <scalbn+0x52>
 80079b0:	a32b      	add	r3, pc, #172	; (adr r3, 8007a60 <scalbn+0xe0>)
 80079b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b6:	e03a      	b.n	8007a2e <scalbn+0xae>
 80079b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80079bc:	428a      	cmp	r2, r1
 80079be:	d10c      	bne.n	80079da <scalbn+0x5a>
 80079c0:	ee10 2a10 	vmov	r2, s0
 80079c4:	4620      	mov	r0, r4
 80079c6:	4629      	mov	r1, r5
 80079c8:	f7f8 fc68 	bl	800029c <__adddf3>
 80079cc:	4604      	mov	r4, r0
 80079ce:	460d      	mov	r5, r1
 80079d0:	e019      	b.n	8007a06 <scalbn+0x86>
 80079d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80079d6:	460b      	mov	r3, r1
 80079d8:	3a36      	subs	r2, #54	; 0x36
 80079da:	4432      	add	r2, r6
 80079dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80079e0:	428a      	cmp	r2, r1
 80079e2:	dd08      	ble.n	80079f6 <scalbn+0x76>
 80079e4:	2d00      	cmp	r5, #0
 80079e6:	a120      	add	r1, pc, #128	; (adr r1, 8007a68 <scalbn+0xe8>)
 80079e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079ec:	da1c      	bge.n	8007a28 <scalbn+0xa8>
 80079ee:	a120      	add	r1, pc, #128	; (adr r1, 8007a70 <scalbn+0xf0>)
 80079f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079f4:	e018      	b.n	8007a28 <scalbn+0xa8>
 80079f6:	2a00      	cmp	r2, #0
 80079f8:	dd08      	ble.n	8007a0c <scalbn+0x8c>
 80079fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80079fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a06:	ec45 4b10 	vmov	d0, r4, r5
 8007a0a:	bd70      	pop	{r4, r5, r6, pc}
 8007a0c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007a10:	da19      	bge.n	8007a46 <scalbn+0xc6>
 8007a12:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007a16:	429e      	cmp	r6, r3
 8007a18:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007a1c:	dd0a      	ble.n	8007a34 <scalbn+0xb4>
 8007a1e:	a112      	add	r1, pc, #72	; (adr r1, 8007a68 <scalbn+0xe8>)
 8007a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e2      	bne.n	80079ee <scalbn+0x6e>
 8007a28:	a30f      	add	r3, pc, #60	; (adr r3, 8007a68 <scalbn+0xe8>)
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	f7f8 fdeb 	bl	8000608 <__aeabi_dmul>
 8007a32:	e7cb      	b.n	80079cc <scalbn+0x4c>
 8007a34:	a10a      	add	r1, pc, #40	; (adr r1, 8007a60 <scalbn+0xe0>)
 8007a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0b8      	beq.n	80079b0 <scalbn+0x30>
 8007a3e:	a10e      	add	r1, pc, #56	; (adr r1, 8007a78 <scalbn+0xf8>)
 8007a40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a44:	e7b4      	b.n	80079b0 <scalbn+0x30>
 8007a46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a4a:	3236      	adds	r2, #54	; 0x36
 8007a4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007a54:	4620      	mov	r0, r4
 8007a56:	4b0c      	ldr	r3, [pc, #48]	; (8007a88 <scalbn+0x108>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	e7e8      	b.n	8007a2e <scalbn+0xae>
 8007a5c:	f3af 8000 	nop.w
 8007a60:	c2f8f359 	.word	0xc2f8f359
 8007a64:	01a56e1f 	.word	0x01a56e1f
 8007a68:	8800759c 	.word	0x8800759c
 8007a6c:	7e37e43c 	.word	0x7e37e43c
 8007a70:	8800759c 	.word	0x8800759c
 8007a74:	fe37e43c 	.word	0xfe37e43c
 8007a78:	c2f8f359 	.word	0xc2f8f359
 8007a7c:	81a56e1f 	.word	0x81a56e1f
 8007a80:	43500000 	.word	0x43500000
 8007a84:	ffff3cb0 	.word	0xffff3cb0
 8007a88:	3c900000 	.word	0x3c900000

08007a8c <_init>:
 8007a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8e:	bf00      	nop
 8007a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a92:	bc08      	pop	{r3}
 8007a94:	469e      	mov	lr, r3
 8007a96:	4770      	bx	lr

08007a98 <_fini>:
 8007a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9a:	bf00      	nop
 8007a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a9e:	bc08      	pop	{r3}
 8007aa0:	469e      	mov	lr, r3
 8007aa2:	4770      	bx	lr
