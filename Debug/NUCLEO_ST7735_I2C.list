
NUCLEO_ST7735_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c38  08008a68  08008a68  00018a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096a0  080096a0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  080096a0  080096a0  000196a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096a8  080096a8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096a8  080096a8  000196a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096ac  080096ac  000196ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080096b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  200001f4  080098a4  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080098a4  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000745f  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000189e  00000000  00000000  00027683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  00028f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000115fb  00000000  00000000  00029670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00007ae9  00000000  00000000  0003ac6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00057e3a  00000000  00000000  00042754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0009a58e  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000658  00000000  00000000  0009a5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003144  00000000  00000000  0009ac38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a4c 	.word	0x08008a4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	08008a4c 	.word	0x08008a4c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <i2c_activate_pb89>:
	// LIDAR
	bool enableLIDAR = false;


void i2c_activate_pb89(I2C_TypeDef *i2c)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

    GPIO_TypeDef  *portB = GPIOB;
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <i2c_activate_pb89+0x70>)
 8000f66:	60fb      	str	r3, [r7, #12]

    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB8/PB9 (I2C).
    i2cSelectI2C(i2c);                           // I2C1: Bustakt aktivieren
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f002 fbe5 	bl	8003738 <i2cSelectI2C>
    //i2cDisableDevice(i2c);
    gpioInitPort(portB);
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f002 f8ee 	bl	8003150 <gpioInitPort>
    gpioSelectPinMode(portB, PIN8, ALTFUNC);
 8000f74:	2202      	movs	r2, #2
 8000f76:	2108      	movs	r1, #8
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f002 f9af 	bl	80032dc <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN8, AF4);         // PB8 : I2C1 SCL
 8000f7e:	2204      	movs	r2, #4
 8000f80:	2108      	movs	r1, #8
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f002 fa4c 	bl	8003420 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN9, ALTFUNC);
 8000f88:	2202      	movs	r2, #2
 8000f8a:	2109      	movs	r1, #9
 8000f8c:	68f8      	ldr	r0, [r7, #12]
 8000f8e:	f002 f9a5 	bl	80032dc <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN9, AF4);         // PB9 : I2C1 SDA
 8000f92:	2204      	movs	r2, #4
 8000f94:	2109      	movs	r1, #9
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f002 fa42 	bl	8003420 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN8, OPENDRAIN);   // Immer externe Pull-up-
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f002 faa6 	bl	80034f2 <gpioSetOutputType>
    gpioSetOutputType(portB, PIN9, OPENDRAIN);   // Widerstaende verwenden!!!
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2109      	movs	r1, #9
 8000faa:	68f8      	ldr	r0, [r7, #12]
 8000fac:	f002 faa1 	bl	80034f2 <gpioSetOutputType>
    // Initialisierung des I2C-Controllers

    i2cInitI2C(i2c, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	2211      	movs	r2, #17
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f002 fc70 	bl	800389c <i2cInitI2C>

    i2cEnableDevice(i2c);                        // MCAL I2C1 activ
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f002 fed5 	bl	8003d6c <i2cEnableDevice>
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40020400 	.word	0x40020400

08000fd0 <convDecByteToHex>:




uint8_t *convDecByteToHex(uint8_t byte)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
    static  uint8_t hex[2] = { 0 };

    uint8_t temp;

    temp = byte % 16;
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 030f 	and.w	r3, r3, #15
 8000fe0:	73fb      	strb	r3, [r7, #15]
    if (temp < 10)
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	2b09      	cmp	r3, #9
 8000fe6:	d803      	bhi.n	8000ff0 <convDecByteToHex+0x20>
    {
        temp += '0';
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	3330      	adds	r3, #48	; 0x30
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	e002      	b.n	8000ff6 <convDecByteToHex+0x26>
    }
    else
    {
        temp += '7';
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	3337      	adds	r3, #55	; 0x37
 8000ff4:	73fb      	strb	r3, [r7, #15]
    }
    hex[1] = temp;
 8000ff6:	4a0d      	ldr	r2, [pc, #52]	; (800102c <convDecByteToHex+0x5c>)
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	7053      	strb	r3, [r2, #1]

    temp = byte / 16;
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	091b      	lsrs	r3, r3, #4
 8001000:	73fb      	strb	r3, [r7, #15]
    if (temp < 10)
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	2b09      	cmp	r3, #9
 8001006:	d803      	bhi.n	8001010 <convDecByteToHex+0x40>
    {
        temp += '0';
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	3330      	adds	r3, #48	; 0x30
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	e002      	b.n	8001016 <convDecByteToHex+0x46>
    }
    else
    {
        temp += '7';
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	3337      	adds	r3, #55	; 0x37
 8001014:	73fb      	strb	r3, [r7, #15]
    }
    hex[0] = temp;
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <convDecByteToHex+0x5c>)
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	7013      	strb	r3, [r2, #0]

    return hex;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <convDecByteToHex+0x5c>)
}
 800101e:	4618      	mov	r0, r3
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000214 	.word	0x20000214

08001030 <i2cLIS3DH_presCheck>:

int8_t i2cLIS3DH_presCheck(I2C_TypeDef *i2c)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	uint8_t ret;

	i2cReadByteFromSlaveReg(i2c, i2cAddr_LIS3DH, DummyReg, &ret);
 8001038:	f107 030f 	add.w	r3, r7, #15
 800103c:	220f      	movs	r2, #15
 800103e:	2118      	movs	r1, #24
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f002 fd26 	bl	8003a92 <i2cReadByteFromSlaveReg>
	//spiReadRegBurst(spi, LIS3DH_CS_PORT, LIS3DH_CS, (DummyReg|spiRead), ret, 2);
	if (dummyVal == ret)
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	2b33      	cmp	r3, #51	; 0x33
 800104a:	d101      	bne.n	8001050 <i2cLIS3DH_presCheck+0x20>
	{return 1;}
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <i2cLIS3DH_presCheck+0x22>
	else
	{return 0;}
 8001050:	2300      	movs	r3, #0

}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <i2cLIS3DH_init>:


int8_t i2cLIS3DH_init(I2C_TypeDef *i2c, int8_t restart)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	70fb      	strb	r3, [r7, #3]
	#define stepStart -7
	static int8_t step = stepStart ;

	if ((restart != 0) && (step == stepStart))  {step = stepStart+1;}
 8001068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d008      	beq.n	8001082 <i2cLIS3DH_init+0x26>
 8001070:	4b38      	ldr	r3, [pc, #224]	; (8001154 <i2cLIS3DH_init+0xf8>)
 8001072:	f993 3000 	ldrsb.w	r3, [r3]
 8001076:	f113 0f07 	cmn.w	r3, #7
 800107a:	d102      	bne.n	8001082 <i2cLIS3DH_init+0x26>
 800107c:	4b35      	ldr	r3, [pc, #212]	; (8001154 <i2cLIS3DH_init+0xf8>)
 800107e:	22fa      	movs	r2, #250	; 0xfa
 8001080:	701a      	strb	r2, [r3, #0]
	switch (step)
 8001082:	4b34      	ldr	r3, [pc, #208]	; (8001154 <i2cLIS3DH_init+0xf8>)
 8001084:	f993 3000 	ldrsb.w	r3, [r3]
 8001088:	3307      	adds	r3, #7
 800108a:	2b06      	cmp	r3, #6
 800108c:	d858      	bhi.n	8001140 <i2cLIS3DH_init+0xe4>
 800108e:	a201      	add	r2, pc, #4	; (adr r2, 8001094 <i2cLIS3DH_init+0x38>)
 8001090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001094:	080010b1 	.word	0x080010b1
 8001098:	080010c1 	.word	0x080010c1
 800109c:	080010d9 	.word	0x080010d9
 80010a0:	080010ed 	.word	0x080010ed
 80010a4:	08001101 	.word	0x08001101
 80010a8:	08001115 	.word	0x08001115
 80010ac:	0800112d 	.word	0x0800112d
		case -7:
		{
			//i2cResetDevice(i2c);
			//i2cInitI2C(i2c, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_400);

			i2cSetClkSpd(i2c,  I2C_CLOCK_1Mz); //set I2C Clock 1000kHz fast Mode
 80010b0:	2104      	movs	r1, #4
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f002 fb74 	bl	80037a0 <i2cSetClkSpd>
			//i2cEnableDevice(i2c);
			step = -6;
 80010b8:	4b26      	ldr	r3, [pc, #152]	; (8001154 <i2cLIS3DH_init+0xf8>)
 80010ba:	22fa      	movs	r2, #250	; 0xfa
 80010bc:	701a      	strb	r2, [r3, #0]
			break;
 80010be:	e042      	b.n	8001146 <i2cLIS3DH_init+0xea>
		}
		case -6:
		{
			if (1 == i2cLIS3DH_presCheck(i2c))
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ffb5 	bl	8001030 <i2cLIS3DH_presCheck>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d103      	bne.n	80010d4 <i2cLIS3DH_init+0x78>
			{
				step = -5;
 80010cc:	4b21      	ldr	r3, [pc, #132]	; (8001154 <i2cLIS3DH_init+0xf8>)
 80010ce:	22fb      	movs	r2, #251	; 0xfb
 80010d0:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				return 1;		//1 = failure
			}
			break;
 80010d2:	e038      	b.n	8001146 <i2cLIS3DH_init+0xea>
				return 1;		//1 = failure
 80010d4:	2301      	movs	r3, #1
 80010d6:	e039      	b.n	800114c <i2cLIS3DH_init+0xf0>
		}
		case -5:
		{
			i2cSendByteToSlaveReg(i2c, i2cAddr_LIS3DH, CtrlReg5,   0b10000000); // reboot memory content
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	2224      	movs	r2, #36	; 0x24
 80010dc:	2118      	movs	r1, #24
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f002 fc2c 	bl	800393c <i2cSendByteToSlaveReg>
			step = -4;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <i2cLIS3DH_init+0xf8>)
 80010e6:	22fc      	movs	r2, #252	; 0xfc
 80010e8:	701a      	strb	r2, [r3, #0]
			break;
 80010ea:	e02c      	b.n	8001146 <i2cLIS3DH_init+0xea>
		}
		case -4:
		{
			i2cSendByteToSlaveReg(i2c, i2cAddr_LIS3DH, CtrlReg4,   0b10001100); // BDU BLE FS1 FS0 HR ST1 ST0 SIM
 80010ec:	238c      	movs	r3, #140	; 0x8c
 80010ee:	2223      	movs	r2, #35	; 0x23
 80010f0:	2118      	movs	r1, #24
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f002 fc22 	bl	800393c <i2cSendByteToSlaveReg>
			step = -3;
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <i2cLIS3DH_init+0xf8>)
 80010fa:	22fd      	movs	r2, #253	; 0xfd
 80010fc:	701a      	strb	r2, [r3, #0]
			break;
 80010fe:	e022      	b.n	8001146 <i2cLIS3DH_init+0xea>
		}
		case -3:
		{
			i2cSendByteToSlaveReg(i2c, i2cAddr_LIS3DH, CtrlReg1,  (uint8_t) 0b10010111); //
 8001100:	2397      	movs	r3, #151	; 0x97
 8001102:	2220      	movs	r2, #32
 8001104:	2118      	movs	r1, #24
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f002 fc18 	bl	800393c <i2cSendByteToSlaveReg>
			step = -2;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <i2cLIS3DH_init+0xf8>)
 800110e:	22fe      	movs	r2, #254	; 0xfe
 8001110:	701a      	strb	r2, [r3, #0]
			break;
 8001112:	e018      	b.n	8001146 <i2cLIS3DH_init+0xea>
		}
		case -2:
		{
			uint8_t LIS3DH_Reg4 = 0b10001000;			// BDU BLE FS1 FS0 HR ST1 ST0 SIM
 8001114:	2388      	movs	r3, #136	; 0x88
 8001116:	73fb      	strb	r3, [r7, #15]
#ifdef XYZopt
//			LIS3DH_Reg4 |=        0b01000000;			// enable to switch High and Low Byte order. special Hint: High Byte first for a fast read sequence to array of int16
#endif
			i2cSendByteToSlaveReg(i2c, i2cAddr_LIS3DH, CtrlReg4,  LIS3DH_Reg4); // BDU BLE FS1 FS0 HR ST1 ST0 SIM
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2223      	movs	r2, #35	; 0x23
 800111c:	2118      	movs	r1, #24
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f002 fc0c 	bl	800393c <i2cSendByteToSlaveReg>
			step = -1;
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <i2cLIS3DH_init+0xf8>)
 8001126:	22ff      	movs	r2, #255	; 0xff
 8001128:	701a      	strb	r2, [r3, #0]
			break;
 800112a:	e00c      	b.n	8001146 <i2cLIS3DH_init+0xea>
		}
		case -1:
		{
			i2cSendByteToSlaveReg(i2c, i2cAddr_LIS3DH, ADCConfReg,(uint8_t) 0b11000000); // ADC Temp 0 0 0 0 0 0
 800112c:	23c0      	movs	r3, #192	; 0xc0
 800112e:	221f      	movs	r2, #31
 8001130:	2118      	movs	r1, #24
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f002 fc02 	bl	800393c <i2cSendByteToSlaveReg>

			step = 0;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <i2cLIS3DH_init+0xf8>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
			break;
 800113e:	e002      	b.n	8001146 <i2cLIS3DH_init+0xea>
		}
		default:
		{
			step = -7;
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <i2cLIS3DH_init+0xf8>)
 8001142:	22f9      	movs	r2, #249	; 0xf9
 8001144:	701a      	strb	r2, [r3, #0]
		}
	}
	return step;
 8001146:	4b03      	ldr	r3, [pc, #12]	; (8001154 <i2cLIS3DH_init+0xf8>)
 8001148:	f993 3000 	ldrsb.w	r3, [r3]

}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000000e 	.word	0x2000000e

08001158 <i2cLIS3DH_XYZ>:




int16_t i2cLIS3DH_XYZ(I2C_TypeDef *i2c, int16_t *xyz)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af02      	add	r7, sp, #8
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
#ifdef XYZopt
	i2cBurstRegRead(i2c, i2cAddr_LIS3DH, (OUTxyz|I2Crepeat),(uint8_t *) xyz, 6);
 8001162:	2306      	movs	r3, #6
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	22a8      	movs	r2, #168	; 0xa8
 800116a:	2118      	movs	r1, #24
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f002 fcfc 	bl	8003b6a <i2cBurstRegRead>
	xyz++;
	*xyz = (readBuffer[3]<<8) + readBuffer[2];
	xyz++;
	*xyz = (readBuffer[5]<<8) + readBuffer[4];
#endif
	return 0;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <i2cLIS3DH_Temp>:
- read both the ADC output 3 registers (because of BDU enabled): OUT_ADC_3_L(0x0C) and OUT_ADC_3_H(0x0D).
Useful bits: 8, left aligned, hence useful data in OUT_ADC_3_H.
Temperature sensor output change vs temperature: 1digit/degrCelsius
*/
int8_t i2cLIS3DH_Temp(I2C_TypeDef *i2c)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af02      	add	r7, sp, #8
 8001182:	6078      	str	r0, [r7, #4]
	uint8_t readBuffer[2];
	//i2cReadByteFromSlaveReg(i2c, i2cAddr_LIS3DH, (ADC3Temp+1), (uint8_t *) &readBuffer[1]);  	// only Hihg byte with data
	i2cBurstRegRead(i2c, i2cAddr_LIS3DH, (ADC3Temp|I2Crepeat), readBuffer, 2);					// but BDU =1 required for update data to read both, high and low Byte
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2202      	movs	r2, #2
 800118a:	9200      	str	r2, [sp, #0]
 800118c:	228c      	movs	r2, #140	; 0x8c
 800118e:	2118      	movs	r1, #24
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f002 fcea 	bl	8003b6a <i2cBurstRegRead>
	return ((int8_t) readBuffer[1]);					// send a delta Temp Value
 8001196:	7b7b      	ldrb	r3, [r7, #13]
 8001198:	b25b      	sxtb	r3, r3
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <RFID_LED>:


void RFID_LED(I2C_TypeDef *i2c, bool LEDon)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	70fb      	strb	r3, [r7, #3]
	if (LEDon == 1)
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d006      	beq.n	80011c4 <RFID_LED+0x20>
	{
		i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_LEDon, 3);
 80011b6:	2303      	movs	r3, #3
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <RFID_LED+0x34>)
 80011ba:	2150      	movs	r1, #80	; 0x50
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f002 fc0b 	bl	80039d8 <i2cBurstWrite>
	}
	else
	{
		i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_LEDoff, 3);
	}
}
 80011c2:	e005      	b.n	80011d0 <RFID_LED+0x2c>
		i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_LEDoff, 3);
 80011c4:	2303      	movs	r3, #3
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <RFID_LED+0x38>)
 80011c8:	2150      	movs	r1, #80	; 0x50
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f002 fc04 	bl	80039d8 <i2cBurstWrite>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000004 	.word	0x20000004

080011e0 <RFID_readCard>:

int8_t RFID_readCard(I2C_TypeDef *i2c, char *CardID)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	static  uint8_t step = 1;
	uint8_t readBuffer[14];
	uint8_t len, i, j = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	77bb      	strb	r3, [r7, #30]
	int8_t typeCard = -1;
 80011ee:	23ff      	movs	r3, #255	; 0xff
 80011f0:	777b      	strb	r3, [r7, #29]
	static int8_t RFID_Status;
	char *p_out;

	switch (step)
 80011f2:	4b45      	ldr	r3, [pc, #276]	; (8001308 <RFID_readCard+0x128>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d002      	beq.n	8001200 <RFID_readCard+0x20>
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d00a      	beq.n	8001214 <RFID_readCard+0x34>
 80011fe:	e078      	b.n	80012f2 <RFID_readCard+0x112>
	{
		case 1:
		{
			i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_getMifareUID, 2);
 8001200:	2302      	movs	r3, #2
 8001202:	4a42      	ldr	r2, [pc, #264]	; (800130c <RFID_readCard+0x12c>)
 8001204:	2150      	movs	r1, #80	; 0x50
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f002 fbe6 	bl	80039d8 <i2cBurstWrite>
			step = 2;
 800120c:	4b3e      	ldr	r3, [pc, #248]	; (8001308 <RFID_readCard+0x128>)
 800120e:	2202      	movs	r2, #2
 8001210:	701a      	strb	r2, [r3, #0]
			break;
 8001212:	e073      	b.n	80012fc <RFID_readCard+0x11c>
		}
		case 2:
		{
			i2cBurstRead(i2c, i2cAddr_RFID, readBuffer, 0xC);
 8001214:	f107 0208 	add.w	r2, r7, #8
 8001218:	230c      	movs	r3, #12
 800121a:	2150      	movs	r1, #80	; 0x50
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f002 fd3c 	bl	8003c9a <i2cBurstRead>
			len = readBuffer[0]-2;
 8001222:	7a3b      	ldrb	r3, [r7, #8]
 8001224:	3b02      	subs	r3, #2
 8001226:	773b      	strb	r3, [r7, #28]
			step = 1;
 8001228:	4b37      	ldr	r3, [pc, #220]	; (8001308 <RFID_readCard+0x128>)
 800122a:	2201      	movs	r2, #1
 800122c:	701a      	strb	r2, [r3, #0]
			if (RFID_Status != readBuffer[2])
 800122e:	4b38      	ldr	r3, [pc, #224]	; (8001310 <RFID_readCard+0x130>)
 8001230:	f993 3000 	ldrsb.w	r3, [r3]
 8001234:	461a      	mov	r2, r3
 8001236:	7abb      	ldrb	r3, [r7, #10]
 8001238:	429a      	cmp	r2, r3
 800123a:	d05e      	beq.n	80012fa <RFID_readCard+0x11a>
			{
				typeCard = readBuffer[len];
 800123c:	7f3b      	ldrb	r3, [r7, #28]
 800123e:	3320      	adds	r3, #32
 8001240:	443b      	add	r3, r7
 8001242:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001246:	777b      	strb	r3, [r7, #29]
				j = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	77bb      	strb	r3, [r7, #30]
				for (i = 0; i< 8; i++ )
 800124c:	2300      	movs	r3, #0
 800124e:	77fb      	strb	r3, [r7, #31]
 8001250:	e042      	b.n	80012d8 <RFID_readCard+0xf8>
				{
					if (i < len)
 8001252:	7ffa      	ldrb	r2, [r7, #31]
 8001254:	7f3b      	ldrb	r3, [r7, #28]
 8001256:	429a      	cmp	r2, r3
 8001258:	d22b      	bcs.n	80012b2 <RFID_readCard+0xd2>
					{
						if (i == len-1) { CardID[j++]='-'; }					// add the Type number after this  -
 800125a:	7ffa      	ldrb	r2, [r7, #31]
 800125c:	7f3b      	ldrb	r3, [r7, #28]
 800125e:	3b01      	subs	r3, #1
 8001260:	429a      	cmp	r2, r3
 8001262:	d107      	bne.n	8001274 <RFID_readCard+0x94>
 8001264:	7fbb      	ldrb	r3, [r7, #30]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	77ba      	strb	r2, [r7, #30]
 800126a:	461a      	mov	r2, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	4413      	add	r3, r2
 8001270:	222d      	movs	r2, #45	; 0x2d
 8001272:	701a      	strb	r2, [r3, #0]
						p_out =	(char *) convDecByteToHex(readBuffer[i+3]);
 8001274:	7ffb      	ldrb	r3, [r7, #31]
 8001276:	3303      	adds	r3, #3
 8001278:	3320      	adds	r3, #32
 800127a:	443b      	add	r3, r7
 800127c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fea5 	bl	8000fd0 <convDecByteToHex>
 8001286:	61b8      	str	r0, [r7, #24]
						CardID[j++]  = (char)*(p_out++);
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	61ba      	str	r2, [r7, #24]
 800128e:	7fba      	ldrb	r2, [r7, #30]
 8001290:	1c51      	adds	r1, r2, #1
 8001292:	77b9      	strb	r1, [r7, #30]
 8001294:	4611      	mov	r1, r2
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	440a      	add	r2, r1
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	7013      	strb	r3, [r2, #0]
						CardID[j++] =(char)*p_out;
 800129e:	7fbb      	ldrb	r3, [r7, #30]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	77ba      	strb	r2, [r7, #30]
 80012a4:	461a      	mov	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	4413      	add	r3, r2
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	7812      	ldrb	r2, [r2, #0]
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	e00f      	b.n	80012d2 <RFID_readCard+0xf2>
					}
					else
					{CardID[j++]='.'; CardID[j++]='.';}
 80012b2:	7fbb      	ldrb	r3, [r7, #30]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	77ba      	strb	r2, [r7, #30]
 80012b8:	461a      	mov	r2, r3
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	4413      	add	r3, r2
 80012be:	222e      	movs	r2, #46	; 0x2e
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	7fbb      	ldrb	r3, [r7, #30]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	77ba      	strb	r2, [r7, #30]
 80012c8:	461a      	mov	r2, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	4413      	add	r3, r2
 80012ce:	222e      	movs	r2, #46	; 0x2e
 80012d0:	701a      	strb	r2, [r3, #0]
				for (i = 0; i< 8; i++ )
 80012d2:	7ffb      	ldrb	r3, [r7, #31]
 80012d4:	3301      	adds	r3, #1
 80012d6:	77fb      	strb	r3, [r7, #31]
 80012d8:	7ffb      	ldrb	r3, [r7, #31]
 80012da:	2b07      	cmp	r3, #7
 80012dc:	d9b9      	bls.n	8001252 <RFID_readCard+0x72>

				}
				CardID[j]='.';
 80012de:	7fbb      	ldrb	r3, [r7, #30]
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	222e      	movs	r2, #46	; 0x2e
 80012e6:	701a      	strb	r2, [r3, #0]
				RFID_Status = readBuffer[2];
 80012e8:	7abb      	ldrb	r3, [r7, #10]
 80012ea:	b25a      	sxtb	r2, r3
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <RFID_readCard+0x130>)
 80012ee:	701a      	strb	r2, [r3, #0]
			}
			break;
 80012f0:	e003      	b.n	80012fa <RFID_readCard+0x11a>
		}
		default:
		{
			step = 1;
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <RFID_readCard+0x128>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
 80012f8:	e000      	b.n	80012fc <RFID_readCard+0x11c>
			break;
 80012fa:	bf00      	nop
		}
	}
	return typeCard;
 80012fc:	f997 301d 	ldrsb.w	r3, [r7, #29]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3720      	adds	r7, #32
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2000000f 	.word	0x2000000f
 800130c:	2000000c 	.word	0x2000000c
 8001310:	20000216 	.word	0x20000216

08001314 <RFID_readFWVersion>:

int8_t RFID_readFWVersion(I2C_TypeDef *i2c, char *strFirmware)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	static  uint8_t step = 1;
		uint8_t readBuffer[16];
		uint8_t i, len;
		int8_t status = -1;
 800131e:	23ff      	movs	r3, #255	; 0xff
 8001320:	77bb      	strb	r3, [r7, #30]

		switch (step)
 8001322:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <RFID_readFWVersion+0xbc>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	3b01      	subs	r3, #1
 8001328:	2b03      	cmp	r3, #3
 800132a:	d848      	bhi.n	80013be <RFID_readFWVersion+0xaa>
 800132c:	a201      	add	r2, pc, #4	; (adr r2, 8001334 <RFID_readFWVersion+0x20>)
 800132e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001332:	bf00      	nop
 8001334:	08001345 	.word	0x08001345
 8001338:	08001355 	.word	0x08001355
 800133c:	08001369 	.word	0x08001369
 8001340:	080013af 	.word	0x080013af
		{
			case 1:
			{
				RFID_LED(i2c,0);
 8001344:	2100      	movs	r1, #0
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ff2c 	bl	80011a4 <RFID_LED>
				step = 2;
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <RFID_readFWVersion+0xbc>)
 800134e:	2202      	movs	r2, #2
 8001350:	701a      	strb	r2, [r3, #0]
				break;
 8001352:	e037      	b.n	80013c4 <RFID_readFWVersion+0xb0>
			}
			case 2:
			{
				i2cBurstWrite(i2c, i2cAddr_RFID, RFIDcmd_getFirmwareVersion, 2);
 8001354:	2302      	movs	r3, #2
 8001356:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <RFID_readFWVersion+0xc0>)
 8001358:	2150      	movs	r1, #80	; 0x50
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f002 fb3c 	bl	80039d8 <i2cBurstWrite>
				step = 3;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <RFID_readFWVersion+0xbc>)
 8001362:	2203      	movs	r2, #3
 8001364:	701a      	strb	r2, [r3, #0]
				break;
 8001366:	e02d      	b.n	80013c4 <RFID_readFWVersion+0xb0>
			}
			case 3:
			{
				i2cBurstRead(i2c, i2cAddr_RFID, readBuffer, 0xF);
 8001368:	f107 020c 	add.w	r2, r7, #12
 800136c:	230f      	movs	r3, #15
 800136e:	2150      	movs	r1, #80	; 0x50
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f002 fc92 	bl	8003c9a <i2cBurstRead>
				len = readBuffer[0];
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	777b      	strb	r3, [r7, #29]
				status = readBuffer[2];
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	77bb      	strb	r3, [r7, #30]
				step = 4;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <RFID_readFWVersion+0xbc>)
 8001380:	2204      	movs	r2, #4
 8001382:	701a      	strb	r2, [r3, #0]
				for (i = 0; i<= len; i++ )
 8001384:	2300      	movs	r3, #0
 8001386:	77fb      	strb	r3, [r7, #31]
 8001388:	e00c      	b.n	80013a4 <RFID_readFWVersion+0x90>
				{
				 strFirmware[i] = readBuffer[i+3];
 800138a:	7ffb      	ldrb	r3, [r7, #31]
 800138c:	1cda      	adds	r2, r3, #3
 800138e:	7ffb      	ldrb	r3, [r7, #31]
 8001390:	6839      	ldr	r1, [r7, #0]
 8001392:	440b      	add	r3, r1
 8001394:	3220      	adds	r2, #32
 8001396:	443a      	add	r2, r7
 8001398:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800139c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i<= len; i++ )
 800139e:	7ffb      	ldrb	r3, [r7, #31]
 80013a0:	3301      	adds	r3, #1
 80013a2:	77fb      	strb	r3, [r7, #31]
 80013a4:	7ffa      	ldrb	r2, [r7, #31]
 80013a6:	7f7b      	ldrb	r3, [r7, #29]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d9ee      	bls.n	800138a <RFID_readFWVersion+0x76>
				}

				break;
 80013ac:	e00a      	b.n	80013c4 <RFID_readFWVersion+0xb0>
			}
			case 4:
			{
				RFID_LED(i2c,0);
 80013ae:	2100      	movs	r1, #0
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff fef7 	bl	80011a4 <RFID_LED>
				step = 1;
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <RFID_readFWVersion+0xbc>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
				break;
 80013bc:	e002      	b.n	80013c4 <RFID_readFWVersion+0xb0>
			}

			default:
			{
				step = 1;
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <RFID_readFWVersion+0xbc>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
			}
		}
		return status;
 80013c4:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3720      	adds	r7, #32
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000010 	.word	0x20000010
 80013d4:	20000008 	.word	0x20000008

080013d8 <commandList>:
static uint16_t _fg = ST7735_GREEN;
static uint16_t _bg = ST7735_BLACK;

// Companion code to the above tables.  Reads and issues
// a series of LCD commands stored in PROGMEM byte array.
static void commandList(const uint8_t *addr) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;   // Number of commands to follow
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {                 // For each command...
 80013ea:	e033      	b.n	8001454 <commandList+0x7c>
		lcd7735_sendCmd(*addr++); //   Read, issue command
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fd6b 	bl	8001ed0 <lcd7735_sendCmd>
		numArgs  = *addr++;    //   Number of args to follow
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	73bb      	strb	r3, [r7, #14]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 8001404:	7bbb      	ldrb	r3, [r7, #14]
 8001406:	b29b      	uxth	r3, r3
 8001408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140c:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;                   //   Mask out delay bit
 800140e:	7bbb      	ldrb	r3, [r7, #14]
 8001410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001414:	73bb      	strb	r3, [r7, #14]
		while(numArgs--) {                   //   For each argument...
 8001416:	e006      	b.n	8001426 <commandList+0x4e>
			lcd7735_sendData(*addr++);  //     Read, issue argument
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f000 fd69 	bl	8001ef8 <lcd7735_sendData>
		while(numArgs--) {                   //   For each argument...
 8001426:	7bbb      	ldrb	r3, [r7, #14]
 8001428:	1e5a      	subs	r2, r3, #1
 800142a:	73ba      	strb	r2, [r7, #14]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f3      	bne.n	8001418 <commandList+0x40>
		}

		if(ms) {
 8001430:	89bb      	ldrh	r3, [r7, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00e      	beq.n	8001454 <commandList+0x7c>
			ms = *addr++; // Read post-command delay time (ms)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8001440:	89bb      	ldrh	r3, [r7, #12]
 8001442:	2bff      	cmp	r3, #255	; 0xff
 8001444:	d102      	bne.n	800144c <commandList+0x74>
 8001446:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800144a:	81bb      	strh	r3, [r7, #12]
			delay_ms(ms);
 800144c:	89bb      	ldrh	r3, [r7, #12]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 fd12 	bl	8001e78 <delay_ms>
	while(numCommands--) {                 // For each command...
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	1e5a      	subs	r2, r3, #1
 8001458:	73fa      	strb	r2, [r7, #15]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1c6      	bne.n	80013ec <commandList+0x14>
		}
	}
}
 800145e:	bf00      	nop
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <commonInit>:

// Initialization code common to both 'B' and 'R' type displays
static void commonInit(const uint8_t *cmdList) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	// toggle RST low to reset; CS low so it'll listen to us
	ST7735_CS0;
 8001470:	2106      	movs	r1, #6
 8001472:	480c      	ldr	r0, [pc, #48]	; (80014a4 <commonInit+0x3c>)
 8001474:	f001 ffa8 	bl	80033c8 <gpioResetPin>
	lcd7735_sendCmd(ST7735_SWRESET);
	delay_ms(500);
#else
	//ST7735_RST1;
	//delay_ms(500);
	ST7735_RST0;
 8001478:	2109      	movs	r1, #9
 800147a:	480b      	ldr	r0, [pc, #44]	; (80014a8 <commonInit+0x40>)
 800147c:	f001 ffa4 	bl	80033c8 <gpioResetPin>
	delay_ms(50);  //default value 500
 8001480:	2032      	movs	r0, #50	; 0x32
 8001482:	f000 fcf9 	bl	8001e78 <delay_ms>
	ST7735_RST1;
 8001486:	2109      	movs	r1, #9
 8001488:	4807      	ldr	r0, [pc, #28]	; (80014a8 <commonInit+0x40>)
 800148a:	f001 ff72 	bl	8003372 <gpioSetPin>
	//delay_ms(500);
#endif    
	if(cmdList) commandList(cmdList);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <commonInit+0x32>
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff9f 	bl	80013d8 <commandList>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40020000 	.word	0x40020000

080014ac <lcd7735_initR>:
	commonInit(Bcmd);
}


// Initialization for ST7735R screens (green or red tabs)
void lcd7735_initR(uint8_t options) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
	delay_ms(50);
 80014b6:	2032      	movs	r0, #50	; 0x32
 80014b8:	f000 fcde 	bl	8001e78 <delay_ms>
	commonInit(Rcmd1);
 80014bc:	4811      	ldr	r0, [pc, #68]	; (8001504 <lcd7735_initR+0x58>)
 80014be:	f7ff ffd3 	bl	8001468 <commonInit>
	if(options == INITR_GREENTAB) {
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d109      	bne.n	80014dc <lcd7735_initR+0x30>
		commandList(Rcmd2green);
 80014c8:	480f      	ldr	r0, [pc, #60]	; (8001508 <lcd7735_initR+0x5c>)
 80014ca:	f7ff ff85 	bl	80013d8 <commandList>
		colstart = 2;
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <lcd7735_initR+0x60>)
 80014d0:	2202      	movs	r2, #2
 80014d2:	601a      	str	r2, [r3, #0]
		rowstart = 1;
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <lcd7735_initR+0x64>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	e002      	b.n	80014e2 <lcd7735_initR+0x36>
	} else {
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
 80014dc:	480d      	ldr	r0, [pc, #52]	; (8001514 <lcd7735_initR+0x68>)
 80014de:	f7ff ff7b 	bl	80013d8 <commandList>
	}
	commandList(Rcmd3);
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <lcd7735_initR+0x6c>)
 80014e4:	f7ff ff78 	bl	80013d8 <commandList>

	// if black, change MADCTL color filter
	if (options == INITR_BLACKTAB) {
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d105      	bne.n	80014fa <lcd7735_initR+0x4e>
		lcd7735_sendCmd(ST7735_MADCTL);
 80014ee:	2036      	movs	r0, #54	; 0x36
 80014f0:	f000 fcee 	bl	8001ed0 <lcd7735_sendCmd>
		lcd7735_sendData(0xC0);
 80014f4:	20c0      	movs	r0, #192	; 0xc0
 80014f6:	f000 fcff 	bl	8001ef8 <lcd7735_sendData>
	}

	//  tabcolor = options;
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	08008fe8 	.word	0x08008fe8
 8001508:	08009024 	.word	0x08009024
 800150c:	20000218 	.word	0x20000218
 8001510:	2000021c 	.word	0x2000021c
 8001514:	08009034 	.word	0x08009034
 8001518:	08009044 	.word	0x08009044

0800151c <lcd7735_setAddrWindow>:


void lcd7735_setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4604      	mov	r4, r0
 8001524:	4608      	mov	r0, r1
 8001526:	4611      	mov	r1, r2
 8001528:	461a      	mov	r2, r3
 800152a:	4623      	mov	r3, r4
 800152c:	71fb      	strb	r3, [r7, #7]
 800152e:	4603      	mov	r3, r0
 8001530:	71bb      	strb	r3, [r7, #6]
 8001532:	460b      	mov	r3, r1
 8001534:	717b      	strb	r3, [r7, #5]
 8001536:	4613      	mov	r3, r2
 8001538:	713b      	strb	r3, [r7, #4]
	lcd7735_sendCmd(ST7735_CASET);		// Column addr set
 800153a:	202a      	movs	r0, #42	; 0x2a
 800153c:	f000 fcc8 	bl	8001ed0 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);
 8001540:	2000      	movs	r0, #0
 8001542:	f000 fcd9 	bl	8001ef8 <lcd7735_sendData>
	lcd7735_sendData(x0+colstart);     // XSTART 
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <lcd7735_setAddrWindow+0x98>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	4413      	add	r3, r2
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fcd0 	bl	8001ef8 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8001558:	2000      	movs	r0, #0
 800155a:	f000 fccd 	bl	8001ef8 <lcd7735_sendData>
	lcd7735_sendData(x1+colstart);     // XEND
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <lcd7735_setAddrWindow+0x98>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	797b      	ldrb	r3, [r7, #5]
 8001566:	4413      	add	r3, r2
 8001568:	b2db      	uxtb	r3, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f000 fcc4 	bl	8001ef8 <lcd7735_sendData>

	lcd7735_sendCmd(ST7735_RASET); // Row addr set
 8001570:	202b      	movs	r0, #43	; 0x2b
 8001572:	f000 fcad 	bl	8001ed0 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);
 8001576:	2000      	movs	r0, #0
 8001578:	f000 fcbe 	bl	8001ef8 <lcd7735_sendData>
	lcd7735_sendData(y0+rowstart);     // YSTART
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <lcd7735_setAddrWindow+0x9c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	b2da      	uxtb	r2, r3
 8001582:	79bb      	ldrb	r3, [r7, #6]
 8001584:	4413      	add	r3, r2
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fcb5 	bl	8001ef8 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 800158e:	2000      	movs	r0, #0
 8001590:	f000 fcb2 	bl	8001ef8 <lcd7735_sendData>
	lcd7735_sendData(y1+rowstart);     // YEND
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <lcd7735_setAddrWindow+0x9c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	793b      	ldrb	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fca9 	bl	8001ef8 <lcd7735_sendData>

	lcd7735_sendCmd(ST7735_RAMWR); // write to RAM
 80015a6:	202c      	movs	r0, #44	; 0x2c
 80015a8:	f000 fc92 	bl	8001ed0 <lcd7735_sendCmd>
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd90      	pop	{r4, r7, pc}
 80015b4:	20000218 	.word	0x20000218
 80015b8:	2000021c 	.word	0x2000021c

080015bc <lcd7735_pushColor>:
void lcd7735_pushColor(uint16_t color) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	80fb      	strh	r3, [r7, #6]
	ST7735_DC1;
 80015c6:	2107      	movs	r1, #7
 80015c8:	4809      	ldr	r0, [pc, #36]	; (80015f0 <lcd7735_pushColor+0x34>)
 80015ca:	f001 fed2 	bl	8003372 <gpioSetPin>
	putpix(color);
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 fc66 	bl	8001ea8 <lcd7735_senddata>
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 fc61 	bl	8001ea8 <lcd7735_senddata>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40020800 	.word	0x40020800

080015f4 <lcd7735_drawPixel>:

// draw color pixel on screen
void lcd7735_drawPixel(int16_t x, int16_t y, uint16_t color) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	80fb      	strh	r3, [r7, #6]
 80015fe:	460b      	mov	r3, r1
 8001600:	80bb      	strh	r3, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	807b      	strh	r3, [r7, #2]

	if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
 8001606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160a:	2b00      	cmp	r3, #0
 800160c:	db22      	blt.n	8001654 <lcd7735_drawPixel+0x60>
 800160e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <lcd7735_drawPixel+0x68>)
 8001614:	8812      	ldrh	r2, [r2, #0]
 8001616:	4293      	cmp	r3, r2
 8001618:	da1c      	bge.n	8001654 <lcd7735_drawPixel+0x60>
 800161a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	db18      	blt.n	8001654 <lcd7735_drawPixel+0x60>
 8001622:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001626:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <lcd7735_drawPixel+0x6c>)
 8001628:	8812      	ldrh	r2, [r2, #0]
 800162a:	4293      	cmp	r3, r2
 800162c:	da12      	bge.n	8001654 <lcd7735_drawPixel+0x60>

	lcd7735_setAddrWindow(x,y,x+1,y+1);
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	b2d8      	uxtb	r0, r3
 8001632:	88bb      	ldrh	r3, [r7, #4]
 8001634:	b2d9      	uxtb	r1, r3
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	3301      	adds	r3, #1
 800163c:	b2da      	uxtb	r2, r3
 800163e:	88bb      	ldrh	r3, [r7, #4]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	3301      	adds	r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	f7ff ff69 	bl	800151c <lcd7735_setAddrWindow>
	lcd7735_pushColor(color);
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ffb5 	bl	80015bc <lcd7735_pushColor>
 8001652:	e000      	b.n	8001656 <lcd7735_drawPixel+0x62>
	if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
 8001654:	bf00      	nop
}
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000012 	.word	0x20000012
 8001660:	20000014 	.word	0x20000014

08001664 <lcd7735_fillRect>:

// fill a rectangle
void lcd7735_fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {	
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4604      	mov	r4, r0
 800166c:	4608      	mov	r0, r1
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	4623      	mov	r3, r4
 8001674:	80fb      	strh	r3, [r7, #6]
 8001676:	4603      	mov	r3, r0
 8001678:	80bb      	strh	r3, [r7, #4]
 800167a:	460b      	mov	r3, r1
 800167c:	807b      	strh	r3, [r7, #2]
 800167e:	4613      	mov	r3, r2
 8001680:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= _width) || (y >= _height)) return;
 8001682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001686:	4a37      	ldr	r2, [pc, #220]	; (8001764 <lcd7735_fillRect+0x100>)
 8001688:	8812      	ldrh	r2, [r2, #0]
 800168a:	4293      	cmp	r3, r2
 800168c:	da65      	bge.n	800175a <lcd7735_fillRect+0xf6>
 800168e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001692:	4a35      	ldr	r2, [pc, #212]	; (8001768 <lcd7735_fillRect+0x104>)
 8001694:	8812      	ldrh	r2, [r2, #0]
 8001696:	4293      	cmp	r3, r2
 8001698:	da5f      	bge.n	800175a <lcd7735_fillRect+0xf6>
	if((x + w - 1) >= _width)  w = _width  - x;
 800169a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800169e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a2f      	ldr	r2, [pc, #188]	; (8001764 <lcd7735_fillRect+0x100>)
 80016a6:	8812      	ldrh	r2, [r2, #0]
 80016a8:	4293      	cmp	r3, r2
 80016aa:	dd05      	ble.n	80016b8 <lcd7735_fillRect+0x54>
 80016ac:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <lcd7735_fillRect+0x100>)
 80016ae:	881a      	ldrh	r2, [r3, #0]
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= _height) h = _height - y;
 80016b8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016bc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016c0:	4413      	add	r3, r2
 80016c2:	4a29      	ldr	r2, [pc, #164]	; (8001768 <lcd7735_fillRect+0x104>)
 80016c4:	8812      	ldrh	r2, [r2, #0]
 80016c6:	4293      	cmp	r3, r2
 80016c8:	dd05      	ble.n	80016d6 <lcd7735_fillRect+0x72>
 80016ca:	4b27      	ldr	r3, [pc, #156]	; (8001768 <lcd7735_fillRect+0x104>)
 80016cc:	881a      	ldrh	r2, [r3, #0]
 80016ce:	88bb      	ldrh	r3, [r7, #4]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	803b      	strh	r3, [r7, #0]

	lcd7735_setAddrWindow(x, y, x+w-1, y+h-1);
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	b2d8      	uxtb	r0, r3
 80016da:	88bb      	ldrh	r3, [r7, #4]
 80016dc:	b2d9      	uxtb	r1, r3
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	887b      	ldrh	r3, [r7, #2]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	3b01      	subs	r3, #1
 80016ec:	b2dc      	uxtb	r4, r3
 80016ee:	88bb      	ldrh	r3, [r7, #4]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	883b      	ldrh	r3, [r7, #0]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	4622      	mov	r2, r4
 8001700:	f7ff ff0c 	bl	800151c <lcd7735_setAddrWindow>

	ST7735_DC1;
 8001704:	2107      	movs	r1, #7
 8001706:	4819      	ldr	r0, [pc, #100]	; (800176c <lcd7735_fillRect+0x108>)
 8001708:	f001 fe33 	bl	8003372 <gpioSetPin>
	for(y=h; y>0; y--) {
 800170c:	883b      	ldrh	r3, [r7, #0]
 800170e:	80bb      	strh	r3, [r7, #4]
 8001710:	e01e      	b.n	8001750 <lcd7735_fillRect+0xec>
		for(x=w; x>0; x--) {
 8001712:	887b      	ldrh	r3, [r7, #2]
 8001714:	80fb      	strh	r3, [r7, #6]
 8001716:	e011      	b.n	800173c <lcd7735_fillRect+0xd8>
			putpix(color);
 8001718:	8b3b      	ldrh	r3, [r7, #24]
 800171a:	0a1b      	lsrs	r3, r3, #8
 800171c:	b29b      	uxth	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fbc1 	bl	8001ea8 <lcd7735_senddata>
 8001726:	8b3b      	ldrh	r3, [r7, #24]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f000 fbbc 	bl	8001ea8 <lcd7735_senddata>
		for(x=w; x>0; x--) {
 8001730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001734:	b29b      	uxth	r3, r3
 8001736:	3b01      	subs	r3, #1
 8001738:	b29b      	uxth	r3, r3
 800173a:	80fb      	strh	r3, [r7, #6]
 800173c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001740:	2b00      	cmp	r3, #0
 8001742:	dce9      	bgt.n	8001718 <lcd7735_fillRect+0xb4>
	for(y=h; y>0; y--) {
 8001744:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001748:	b29b      	uxth	r3, r3
 800174a:	3b01      	subs	r3, #1
 800174c:	b29b      	uxth	r3, r3
 800174e:	80bb      	strh	r3, [r7, #4]
 8001750:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	dcdc      	bgt.n	8001712 <lcd7735_fillRect+0xae>
 8001758:	e000      	b.n	800175c <lcd7735_fillRect+0xf8>
	if((x >= _width) || (y >= _height)) return;
 800175a:	bf00      	nop
		}
	}
}
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bd90      	pop	{r4, r7, pc}
 8001762:	bf00      	nop
 8001764:	20000012 	.word	0x20000012
 8001768:	20000014 	.word	0x20000014
 800176c:	40020800 	.word	0x40020800

08001770 <lcd7735_drawFastVLine>:
//
// for optimize code size if graphics features not need
//
#ifndef ONLY_TERMINAL_EMULATOR

void lcd7735_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4604      	mov	r4, r0
 8001778:	4608      	mov	r0, r1
 800177a:	4611      	mov	r1, r2
 800177c:	461a      	mov	r2, r3
 800177e:	4623      	mov	r3, r4
 8001780:	80fb      	strh	r3, [r7, #6]
 8001782:	4603      	mov	r3, r0
 8001784:	80bb      	strh	r3, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	807b      	strh	r3, [r7, #2]
 800178a:	4613      	mov	r3, r2
 800178c:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= _width) || (y >= _height)) return;
 800178e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001792:	4a24      	ldr	r2, [pc, #144]	; (8001824 <lcd7735_drawFastVLine+0xb4>)
 8001794:	8812      	ldrh	r2, [r2, #0]
 8001796:	4293      	cmp	r3, r2
 8001798:	da3f      	bge.n	800181a <lcd7735_drawFastVLine+0xaa>
 800179a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800179e:	4a22      	ldr	r2, [pc, #136]	; (8001828 <lcd7735_drawFastVLine+0xb8>)
 80017a0:	8812      	ldrh	r2, [r2, #0]
 80017a2:	4293      	cmp	r3, r2
 80017a4:	da39      	bge.n	800181a <lcd7735_drawFastVLine+0xaa>
	if((y+h-1) >= _height) h = _height-y;
 80017a6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017ae:	4413      	add	r3, r2
 80017b0:	4a1d      	ldr	r2, [pc, #116]	; (8001828 <lcd7735_drawFastVLine+0xb8>)
 80017b2:	8812      	ldrh	r2, [r2, #0]
 80017b4:	4293      	cmp	r3, r2
 80017b6:	dd05      	ble.n	80017c4 <lcd7735_drawFastVLine+0x54>
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <lcd7735_drawFastVLine+0xb8>)
 80017ba:	881a      	ldrh	r2, [r3, #0]
 80017bc:	88bb      	ldrh	r3, [r7, #4]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	807b      	strh	r3, [r7, #2]
	lcd7735_setAddrWindow(x, y, x, y+h-1);
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	b2d8      	uxtb	r0, r3
 80017c8:	88bb      	ldrh	r3, [r7, #4]
 80017ca:	b2d9      	uxtb	r1, r3
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	b2dc      	uxtb	r4, r3
 80017d0:	88bb      	ldrh	r3, [r7, #4]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	887b      	ldrh	r3, [r7, #2]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	4413      	add	r3, r2
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	3b01      	subs	r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	4622      	mov	r2, r4
 80017e2:	f7ff fe9b 	bl	800151c <lcd7735_setAddrWindow>

	ST7735_DC1;
 80017e6:	2107      	movs	r1, #7
 80017e8:	4810      	ldr	r0, [pc, #64]	; (800182c <lcd7735_drawFastVLine+0xbc>)
 80017ea:	f001 fdc2 	bl	8003372 <gpioSetPin>
	while (h--) {
 80017ee:	e00b      	b.n	8001808 <lcd7735_drawFastVLine+0x98>
		putpix(color);
 80017f0:	883b      	ldrh	r3, [r7, #0]
 80017f2:	0a1b      	lsrs	r3, r3, #8
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 fb55 	bl	8001ea8 <lcd7735_senddata>
 80017fe:	883b      	ldrh	r3, [r7, #0]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f000 fb50 	bl	8001ea8 <lcd7735_senddata>
	while (h--) {
 8001808:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800180c:	b29a      	uxth	r2, r3
 800180e:	3a01      	subs	r2, #1
 8001810:	b292      	uxth	r2, r2
 8001812:	807a      	strh	r2, [r7, #2]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1eb      	bne.n	80017f0 <lcd7735_drawFastVLine+0x80>
 8001818:	e000      	b.n	800181c <lcd7735_drawFastVLine+0xac>
	if((x >= _width) || (y >= _height)) return;
 800181a:	bf00      	nop
	}
}
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bd90      	pop	{r4, r7, pc}
 8001822:	bf00      	nop
 8001824:	20000012 	.word	0x20000012
 8001828:	20000014 	.word	0x20000014
 800182c:	40020800 	.word	0x40020800

08001830 <lcd7735_setFont>:
				lcd7735_pushColor(data[(ty*sx)+tx]);
			}
	}
}

void lcd7735_setFont(uint8_t* font) {
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <lcd7735_setFont+0x40>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
	cfont.x_size=font[0];
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <lcd7735_setFont+0x40>)
 8001844:	711a      	strb	r2, [r3, #4]
	cfont.y_size=font[1];
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	785a      	ldrb	r2, [r3, #1]
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <lcd7735_setFont+0x40>)
 800184c:	715a      	strb	r2, [r3, #5]
	cfont.offset=font[2];
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	789a      	ldrb	r2, [r3, #2]
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <lcd7735_setFont+0x40>)
 8001854:	719a      	strb	r2, [r3, #6]
	cfont.numchars=font[3];
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3303      	adds	r3, #3
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b29a      	uxth	r2, r3
 800185e:	4b04      	ldr	r3, [pc, #16]	; (8001870 <lcd7735_setFont+0x40>)
 8001860:	811a      	strh	r2, [r3, #8]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000224 	.word	0x20000224

08001874 <printChar>:

void printChar(uint8_t c, int x, int y) {
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch,fz;
	uint16_t j;
	uint16_t temp; 
	int zz;

	if( cfont.x_size < 8 ) 
 8001882:	4b74      	ldr	r3, [pc, #464]	; (8001a54 <printChar+0x1e0>)
 8001884:	791b      	ldrb	r3, [r3, #4]
 8001886:	2b07      	cmp	r3, #7
 8001888:	d803      	bhi.n	8001892 <printChar+0x1e>
		fz = cfont.x_size;
 800188a:	4b72      	ldr	r3, [pc, #456]	; (8001a54 <printChar+0x1e0>)
 800188c:	791b      	ldrb	r3, [r3, #4]
 800188e:	77bb      	strb	r3, [r7, #30]
 8001890:	e003      	b.n	800189a <printChar+0x26>
	else
		fz = cfont.x_size/8;
 8001892:	4b70      	ldr	r3, [pc, #448]	; (8001a54 <printChar+0x1e0>)
 8001894:	791b      	ldrb	r3, [r3, #4]
 8001896:	08db      	lsrs	r3, r3, #3
 8001898:	77bb      	strb	r3, [r7, #30]
	if (!_transparent) {
 800189a:	4b6f      	ldr	r3, [pc, #444]	; (8001a58 <printChar+0x1e4>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d15e      	bne.n	8001960 <printChar+0xec>
		lcd7735_setAddrWindow(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	b2d8      	uxtb	r0, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	b2d9      	uxtb	r1, r3
 80018aa:	4b6a      	ldr	r3, [pc, #424]	; (8001a54 <printChar+0x1e0>)
 80018ac:	791a      	ldrb	r2, [r3, #4]
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	3b01      	subs	r3, #1
 80018b8:	b2dc      	uxtb	r4, r3
 80018ba:	4b66      	ldr	r3, [pc, #408]	; (8001a54 <printChar+0x1e0>)
 80018bc:	795a      	ldrb	r2, [r3, #5]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	4622      	mov	r2, r4
 80018cc:	f7ff fe26 	bl	800151c <lcd7735_setAddrWindow>

		temp=((c-cfont.offset)*((fz)*cfont.y_size))+4;
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	4a60      	ldr	r2, [pc, #384]	; (8001a54 <printChar+0x1e0>)
 80018d4:	7992      	ldrb	r2, [r2, #6]
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	b29a      	uxth	r2, r3
 80018da:	7fbb      	ldrb	r3, [r7, #30]
 80018dc:	b299      	uxth	r1, r3
 80018de:	4b5d      	ldr	r3, [pc, #372]	; (8001a54 <printChar+0x1e0>)
 80018e0:	795b      	ldrb	r3, [r3, #5]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	fb11 f303 	smulbb	r3, r1, r3
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	fb12 f303 	smulbb	r3, r2, r3
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	3304      	adds	r3, #4
 80018f2:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++) {
 80018f4:	2300      	movs	r3, #0
 80018f6:	83bb      	strh	r3, [r7, #28]
 80018f8:	e029      	b.n	800194e <printChar+0xda>
			ch = cfont.font[temp];
 80018fa:	4b56      	ldr	r3, [pc, #344]	; (8001a54 <printChar+0x1e0>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	8b7b      	ldrh	r3, [r7, #26]
 8001900:	4413      	add	r3, r2
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	74fb      	strb	r3, [r7, #19]
			for(i=0;i<8;i++) {   
 8001906:	2300      	movs	r3, #0
 8001908:	77fb      	strb	r3, [r7, #31]
 800190a:	e017      	b.n	800193c <printChar+0xc8>
				if((ch&(1<<(7-i)))!=0)   
 800190c:	7cfa      	ldrb	r2, [r7, #19]
 800190e:	7ffb      	ldrb	r3, [r7, #31]
 8001910:	f1c3 0307 	rsb	r3, r3, #7
 8001914:	fa42 f303 	asr.w	r3, r2, r3
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <printChar+0xb8>
				{
					lcd7735_pushColor(_fg);
 8001920:	4b4e      	ldr	r3, [pc, #312]	; (8001a5c <printChar+0x1e8>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fe49 	bl	80015bc <lcd7735_pushColor>
 800192a:	e004      	b.n	8001936 <printChar+0xc2>
				} 
				else
				{
					lcd7735_pushColor(_bg);
 800192c:	4b4c      	ldr	r3, [pc, #304]	; (8001a60 <printChar+0x1ec>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fe43 	bl	80015bc <lcd7735_pushColor>
			for(i=0;i<8;i++) {   
 8001936:	7ffb      	ldrb	r3, [r7, #31]
 8001938:	3301      	adds	r3, #1
 800193a:	77fb      	strb	r3, [r7, #31]
 800193c:	7ffb      	ldrb	r3, [r7, #31]
 800193e:	2b07      	cmp	r3, #7
 8001940:	d9e4      	bls.n	800190c <printChar+0x98>
				}   
			}
			temp++;
 8001942:	8b7b      	ldrh	r3, [r7, #26]
 8001944:	3301      	adds	r3, #1
 8001946:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++) {
 8001948:	8bbb      	ldrh	r3, [r7, #28]
 800194a:	3301      	adds	r3, #1
 800194c:	83bb      	strh	r3, [r7, #28]
 800194e:	8bba      	ldrh	r2, [r7, #28]
 8001950:	7fbb      	ldrb	r3, [r7, #30]
 8001952:	4940      	ldr	r1, [pc, #256]	; (8001a54 <printChar+0x1e0>)
 8001954:	7949      	ldrb	r1, [r1, #5]
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	429a      	cmp	r2, r3
 800195c:	dbcd      	blt.n	80018fa <printChar+0x86>
				}
			}
			temp+=(fz);
		}
	}
}
 800195e:	e075      	b.n	8001a4c <printChar+0x1d8>
		temp=((c-cfont.offset)*((fz)*cfont.y_size))+4;
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	4a3c      	ldr	r2, [pc, #240]	; (8001a54 <printChar+0x1e0>)
 8001964:	7992      	ldrb	r2, [r2, #6]
 8001966:	1a9b      	subs	r3, r3, r2
 8001968:	b29a      	uxth	r2, r3
 800196a:	7fbb      	ldrb	r3, [r7, #30]
 800196c:	b299      	uxth	r1, r3
 800196e:	4b39      	ldr	r3, [pc, #228]	; (8001a54 <printChar+0x1e0>)
 8001970:	795b      	ldrb	r3, [r3, #5]
 8001972:	b29b      	uxth	r3, r3
 8001974:	fb11 f303 	smulbb	r3, r1, r3
 8001978:	b29b      	uxth	r3, r3
 800197a:	fb12 f303 	smulbb	r3, r2, r3
 800197e:	b29b      	uxth	r3, r3
 8001980:	3304      	adds	r3, #4
 8001982:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++) 
 8001984:	2300      	movs	r3, #0
 8001986:	83bb      	strh	r3, [r7, #28]
 8001988:	e05a      	b.n	8001a40 <printChar+0x1cc>
			for (zz=0; zz<(fz); zz++)
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	e04b      	b.n	8001a28 <printChar+0x1b4>
				ch = cfont.font[temp+zz]; 
 8001990:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <printChar+0x1e0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	8b79      	ldrh	r1, [r7, #26]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	440a      	add	r2, r1
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	77fb      	strb	r3, [r7, #31]
 80019a4:	e03a      	b.n	8001a1c <printChar+0x1a8>
					lcd7735_setAddrWindow(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	7ffb      	ldrb	r3, [r7, #31]
 80019ac:	4413      	add	r3, r2
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	4413      	add	r3, r2
 80019ba:	b2d8      	uxtb	r0, r3
 80019bc:	8bbb      	ldrh	r3, [r7, #28]
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	b2d9      	uxtb	r1, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	7ffb      	ldrb	r3, [r7, #31]
 80019ce:	4413      	add	r3, r2
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	4413      	add	r3, r2
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	3301      	adds	r3, #1
 80019e0:	b2dc      	uxtb	r4, r3
 80019e2:	8bbb      	ldrh	r3, [r7, #28]
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	4622      	mov	r2, r4
 80019f4:	f7ff fd92 	bl	800151c <lcd7735_setAddrWindow>
					if((ch&(1<<(7-i)))!=0)   
 80019f8:	7cfa      	ldrb	r2, [r7, #19]
 80019fa:	7ffb      	ldrb	r3, [r7, #31]
 80019fc:	f1c3 0307 	rsb	r3, r3, #7
 8001a00:	fa42 f303 	asr.w	r3, r2, r3
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d004      	beq.n	8001a16 <printChar+0x1a2>
						lcd7735_pushColor(_fg);
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <printChar+0x1e8>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fdd3 	bl	80015bc <lcd7735_pushColor>
				for(i=0;i<8;i++)
 8001a16:	7ffb      	ldrb	r3, [r7, #31]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	77fb      	strb	r3, [r7, #31]
 8001a1c:	7ffb      	ldrb	r3, [r7, #31]
 8001a1e:	2b07      	cmp	r3, #7
 8001a20:	d9c1      	bls.n	80019a6 <printChar+0x132>
			for (zz=0; zz<(fz); zz++)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	7fbb      	ldrb	r3, [r7, #30]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbaf      	blt.n	8001990 <printChar+0x11c>
			temp+=(fz);
 8001a30:	7fbb      	ldrb	r3, [r7, #30]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	8b7b      	ldrh	r3, [r7, #26]
 8001a36:	4413      	add	r3, r2
 8001a38:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++) 
 8001a3a:	8bbb      	ldrh	r3, [r7, #28]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	83bb      	strh	r3, [r7, #28]
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <printChar+0x1e0>)
 8001a42:	795b      	ldrb	r3, [r3, #5]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	8bba      	ldrh	r2, [r7, #28]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d39e      	bcc.n	800198a <printChar+0x116>
}
 8001a4c:	bf00      	nop
 8001a4e:	3724      	adds	r7, #36	; 0x24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd90      	pop	{r4, r7, pc}
 8001a54:	20000224 	.word	0x20000224
 8001a58:	20000230 	.word	0x20000230
 8001a5c:	20000016 	.word	0x20000016
 8001a60:	20000232 	.word	0x20000232
 8001a64:	00000000 	.word	0x00000000

08001a68 <rotateChar>:

void rotateChar(uint8_t c, int x, int y, int pos, int deg) {
 8001a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a6c:	b08e      	sub	sp, #56	; 0x38
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	4603      	mov	r3, r0
 8001a78:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch,fz;
	uint16_t temp; 
	int newx,newy;
	double radian = deg*0.0175;
 8001a7a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001a7c:	f7fe fd5a 	bl	8000534 <__aeabi_i2d>
 8001a80:	a395      	add	r3, pc, #596	; (adr r3, 8001cd8 <rotateChar+0x270>)
 8001a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a86:	f7fe fdbf 	bl	8000608 <__aeabi_dmul>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int zz;

	if( cfont.x_size < 8 ) 
 8001a92:	4b8d      	ldr	r3, [pc, #564]	; (8001cc8 <rotateChar+0x260>)
 8001a94:	791b      	ldrb	r3, [r3, #4]
 8001a96:	2b07      	cmp	r3, #7
 8001a98:	d804      	bhi.n	8001aa4 <rotateChar+0x3c>
		fz = cfont.x_size;
 8001a9a:	4b8b      	ldr	r3, [pc, #556]	; (8001cc8 <rotateChar+0x260>)
 8001a9c:	791b      	ldrb	r3, [r3, #4]
 8001a9e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001aa2:	e004      	b.n	8001aae <rotateChar+0x46>
	else
		fz = cfont.x_size/8;	
 8001aa4:	4b88      	ldr	r3, [pc, #544]	; (8001cc8 <rotateChar+0x260>)
 8001aa6:	791b      	ldrb	r3, [r3, #4]
 8001aa8:	08db      	lsrs	r3, r3, #3
 8001aaa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	temp=((c-cfont.offset)*((fz)*cfont.y_size))+4;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	4a85      	ldr	r2, [pc, #532]	; (8001cc8 <rotateChar+0x260>)
 8001ab2:	7992      	ldrb	r2, [r2, #6]
 8001ab4:	1a9b      	subs	r3, r3, r2
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001abc:	b299      	uxth	r1, r3
 8001abe:	4b82      	ldr	r3, [pc, #520]	; (8001cc8 <rotateChar+0x260>)
 8001ac0:	795b      	ldrb	r3, [r3, #5]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	fb11 f303 	smulbb	r3, r1, r3
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	fb12 f303 	smulbb	r3, r2, r3
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0;j<cfont.y_size;j++) {
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001ada:	e0e6      	b.n	8001caa <rotateChar+0x242>
		for (zz=0; zz<(fz); zz++) {
 8001adc:	2300      	movs	r3, #0
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae0:	e0d2      	b.n	8001c88 <rotateChar+0x220>
			ch = cfont.font[temp+zz]; 
 8001ae2:	4b79      	ldr	r3, [pc, #484]	; (8001cc8 <rotateChar+0x260>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aea:	440a      	add	r2, r1
 8001aec:	4413      	add	r3, r2
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	77fb      	strb	r3, [r7, #31]
			for(i=0;i<8;i++) {   
 8001af2:	2300      	movs	r3, #0
 8001af4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001af8:	e0be      	b.n	8001c78 <rotateChar+0x210>
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 8001afa:	68b8      	ldr	r0, [r7, #8]
 8001afc:	f7fe fd1a 	bl	8000534 <__aeabi_i2d>
 8001b00:	4604      	mov	r4, r0
 8001b02:	460d      	mov	r5, r1
 8001b04:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	441a      	add	r2, r3
 8001b0e:	4b6e      	ldr	r3, [pc, #440]	; (8001cc8 <rotateChar+0x260>)
 8001b10:	791b      	ldrb	r3, [r3, #4]
 8001b12:	4619      	mov	r1, r3
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	fb01 f303 	mul.w	r3, r1, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd09 	bl	8000534 <__aeabi_i2d>
 8001b22:	4680      	mov	r8, r0
 8001b24:	4689      	mov	r9, r1
 8001b26:	ed97 0b08 	vldr	d0, [r7, #32]
 8001b2a:	f005 fea9 	bl	8007880 <cos>
 8001b2e:	ec53 2b10 	vmov	r2, r3, d0
 8001b32:	4640      	mov	r0, r8
 8001b34:	4649      	mov	r1, r9
 8001b36:	f7fe fd67 	bl	8000608 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4692      	mov	sl, r2
 8001b40:	469b      	mov	fp, r3
 8001b42:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fcf4 	bl	8000534 <__aeabi_i2d>
 8001b4c:	4680      	mov	r8, r0
 8001b4e:	4689      	mov	r9, r1
 8001b50:	ed97 0b08 	vldr	d0, [r7, #32]
 8001b54:	f005 ff38 	bl	80079c8 <sin>
 8001b58:	ec53 2b10 	vmov	r2, r3, d0
 8001b5c:	4640      	mov	r0, r8
 8001b5e:	4649      	mov	r1, r9
 8001b60:	f7fe fd52 	bl	8000608 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4650      	mov	r0, sl
 8001b6a:	4659      	mov	r1, fp
 8001b6c:	f7fe fb94 	bl	8000298 <__aeabi_dsub>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4620      	mov	r0, r4
 8001b76:	4629      	mov	r1, r5
 8001b78:	f7fe fb90 	bl	800029c <__adddf3>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f7fe fff0 	bl	8000b68 <__aeabi_d2iz>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7fe fcd1 	bl	8000534 <__aeabi_i2d>
 8001b92:	4604      	mov	r4, r0
 8001b94:	460d      	mov	r5, r1
 8001b96:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fcca 	bl	8000534 <__aeabi_i2d>
 8001ba0:	4680      	mov	r8, r0
 8001ba2:	4689      	mov	r9, r1
 8001ba4:	ed97 0b08 	vldr	d0, [r7, #32]
 8001ba8:	f005 fe6a 	bl	8007880 <cos>
 8001bac:	ec53 2b10 	vmov	r2, r3, d0
 8001bb0:	4640      	mov	r0, r8
 8001bb2:	4649      	mov	r1, r9
 8001bb4:	f7fe fd28 	bl	8000608 <__aeabi_dmul>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4692      	mov	sl, r2
 8001bbe:	469b      	mov	fp, r3
 8001bc0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	441a      	add	r2, r3
 8001bca:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <rotateChar+0x260>)
 8001bcc:	791b      	ldrb	r3, [r3, #4]
 8001bce:	4619      	mov	r1, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fcab 	bl	8000534 <__aeabi_i2d>
 8001bde:	4680      	mov	r8, r0
 8001be0:	4689      	mov	r9, r1
 8001be2:	ed97 0b08 	vldr	d0, [r7, #32]
 8001be6:	f005 feef 	bl	80079c8 <sin>
 8001bea:	ec53 2b10 	vmov	r2, r3, d0
 8001bee:	4640      	mov	r0, r8
 8001bf0:	4649      	mov	r1, r9
 8001bf2:	f7fe fd09 	bl	8000608 <__aeabi_dmul>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4650      	mov	r0, sl
 8001bfc:	4659      	mov	r1, fp
 8001bfe:	f7fe fb4d 	bl	800029c <__adddf3>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4620      	mov	r0, r4
 8001c08:	4629      	mov	r1, r5
 8001c0a:	f7fe fb47 	bl	800029c <__adddf3>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4610      	mov	r0, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	f7fe ffa7 	bl	8000b68 <__aeabi_d2iz>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	617b      	str	r3, [r7, #20]

				lcd7735_setAddrWindow(newx,newy,newx+1,newy+1);
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	b2d8      	uxtb	r0, r3
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	b2d9      	uxtb	r1, r3
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	f7ff fc71 	bl	800151c <lcd7735_setAddrWindow>

				if((ch&(1<<(7-i)))!=0) {
 8001c3a:	7ffa      	ldrb	r2, [r7, #31]
 8001c3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c40:	f1c3 0307 	rsb	r3, r3, #7
 8001c44:	fa42 f303 	asr.w	r3, r2, r3
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <rotateChar+0x1f4>
					lcd7735_pushColor(_fg);
 8001c50:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <rotateChar+0x264>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fcb1 	bl	80015bc <lcd7735_pushColor>
 8001c5a:	e008      	b.n	8001c6e <rotateChar+0x206>
				} else  {
					if (!_transparent)
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <rotateChar+0x268>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d104      	bne.n	8001c6e <rotateChar+0x206>
						lcd7735_pushColor(_bg);
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <rotateChar+0x26c>)
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fca7 	bl	80015bc <lcd7735_pushColor>
			for(i=0;i<8;i++) {   
 8001c6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c72:	3301      	adds	r3, #1
 8001c74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c7c:	2b07      	cmp	r3, #7
 8001c7e:	f67f af3c 	bls.w	8001afa <rotateChar+0x92>
		for (zz=0; zz<(fz); zz++) {
 8001c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c84:	3301      	adds	r3, #1
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c88:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	f6ff af27 	blt.w	8001ae2 <rotateChar+0x7a>
				}   
			}
		}
		temp+=(fz);
 8001c94:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001c9c:	4413      	add	r3, r2
 8001c9e:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0;j<cfont.y_size;j++) {
 8001ca0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <rotateChar+0x260>)
 8001cac:	795b      	ldrb	r3, [r3, #5]
 8001cae:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	f4ff af12 	bcc.w	8001adc <rotateChar+0x74>
	}
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3738      	adds	r7, #56	; 0x38
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cc4:	f3af 8000 	nop.w
 8001cc8:	20000224 	.word	0x20000224
 8001ccc:	20000016 	.word	0x20000016
 8001cd0:	20000230 	.word	0x20000230
 8001cd4:	20000232 	.word	0x20000232
 8001cd8:	1eb851ec 	.word	0x1eb851ec
 8001cdc:	3f91eb85 	.word	0x3f91eb85

08001ce0 <lcd7735_print>:

void lcd7735_print(char *st, int x, int y, int deg) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
	int stl, i;

	stl = strlen(st);
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f7fe fa76 	bl	80001e0 <strlen>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	613b      	str	r3, [r7, #16]

	if (x==RIGHT)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f113 0f02 	cmn.w	r3, #2
 8001cfe:	d10a      	bne.n	8001d16 <lcd7735_print+0x36>
		x=(_width+1)-(stl*cfont.x_size);
 8001d00:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <lcd7735_print+0xb8>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <lcd7735_print+0xbc>)
 8001d08:	791b      	ldrb	r3, [r3, #4]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	60bb      	str	r3, [r7, #8]
	if (x==CENTER)
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d10d      	bne.n	8001d3a <lcd7735_print+0x5a>
		x=((_height+1)-(stl*cfont.x_size))/2;
 8001d1e:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <lcd7735_print+0xc0>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <lcd7735_print+0xbc>)
 8001d26:	791b      	ldrb	r3, [r3, #4]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	fb01 f303 	mul.w	r3, r1, r3
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	0fda      	lsrs	r2, r3, #31
 8001d34:	4413      	add	r3, r2
 8001d36:	105b      	asrs	r3, r3, #1
 8001d38:	60bb      	str	r3, [r7, #8]

	for (i=0; i<stl; i++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	e021      	b.n	8001d84 <lcd7735_print+0xa4>
		if (deg==0)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d110      	bne.n	8001d68 <lcd7735_print+0x88>
			printChar(*st++, x + (i*(cfont.x_size)), y);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1c5a      	adds	r2, r3, #1
 8001d4a:	60fa      	str	r2, [r7, #12]
 8001d4c:	7818      	ldrb	r0, [r3, #0]
 8001d4e:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <lcd7735_print+0xbc>)
 8001d50:	791b      	ldrb	r3, [r3, #4]
 8001d52:	461a      	mov	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fb03 f202 	mul.w	r2, r3, r2
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7ff fd87 	bl	8001874 <printChar>
 8001d66:	e00a      	b.n	8001d7e <lcd7735_print+0x9e>
		else
			rotateChar(*st++, x, y, i, deg);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	60fa      	str	r2, [r7, #12]
 8001d6e:	7818      	ldrb	r0, [r3, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	f7ff fe75 	bl	8001a68 <rotateChar>
	for (i=0; i<stl; i++)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	dbd9      	blt.n	8001d40 <lcd7735_print+0x60>
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000012 	.word	0x20000012
 8001d9c:	20000224 	.word	0x20000224
 8001da0:	20000014 	.word	0x20000014

08001da4 <lcd7735_fillScreen>:
*********************************************************************
*********************** Service functions ***************************
*********************************************************************
*********************************************************************/

void lcd7735_fillScreen(uint16_t color) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	4603      	mov	r3, r0
 8001dac:	80fb      	strh	r3, [r7, #6]
	lcd7735_fillRect(0, 0,  _width, _height, color);
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <lcd7735_fillScreen+0x2c>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	b21a      	sxth	r2, r3
 8001db4:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <lcd7735_fillScreen+0x30>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	b219      	sxth	r1, r3
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7ff fc4e 	bl	8001664 <lcd7735_fillRect>
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000012 	.word	0x20000012
 8001dd4:	20000014 	.word	0x20000014

08001dd8 <lcd7735_setRotation>:
// Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t lcd7735_Color565(uint8_t r, uint8_t g, uint8_t b) {
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

void lcd7735_setRotation(uint8_t m) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation = m % 4; // can't be higher than 3
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	73fb      	strb	r3, [r7, #15]

	lcd7735_sendCmd(ST7735_MADCTL);
 8001dea:	2036      	movs	r0, #54	; 0x36
 8001dec:	f000 f870 	bl	8001ed0 <lcd7735_sendCmd>
	switch (rotation) {
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d836      	bhi.n	8001e64 <lcd7735_setRotation+0x8c>
 8001df6:	a201      	add	r2, pc, #4	; (adr r2, 8001dfc <lcd7735_setRotation+0x24>)
 8001df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfc:	08001e0d 	.word	0x08001e0d
 8001e00:	08001e21 	.word	0x08001e21
 8001e04:	08001e35 	.word	0x08001e35
 8001e08:	08001e49 	.word	0x08001e49
   case PORTRAIT:
	   lcd7735_sendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 8001e0c:	20c0      	movs	r0, #192	; 0xc0
 8001e0e:	f000 f873 	bl	8001ef8 <lcd7735_sendData>
	   _width  = ST7735_TFTWIDTH;
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <lcd7735_setRotation+0x94>)
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	801a      	strh	r2, [r3, #0]
	   _height = ST7735_TFTHEIGHT;
 8001e18:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <lcd7735_setRotation+0x98>)
 8001e1a:	22a0      	movs	r2, #160	; 0xa0
 8001e1c:	801a      	strh	r2, [r3, #0]
	   break;
 8001e1e:	e01d      	b.n	8001e5c <lcd7735_setRotation+0x84>
   case LANDSCAPE:
	   lcd7735_sendData(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 8001e20:	20a0      	movs	r0, #160	; 0xa0
 8001e22:	f000 f869 	bl	8001ef8 <lcd7735_sendData>
	   _width  = ST7735_TFTHEIGHT;
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <lcd7735_setRotation+0x94>)
 8001e28:	22a0      	movs	r2, #160	; 0xa0
 8001e2a:	801a      	strh	r2, [r3, #0]
	   _height = ST7735_TFTWIDTH;
 8001e2c:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <lcd7735_setRotation+0x98>)
 8001e2e:	2280      	movs	r2, #128	; 0x80
 8001e30:	801a      	strh	r2, [r3, #0]
	   break;
 8001e32:	e013      	b.n	8001e5c <lcd7735_setRotation+0x84>
   case PORTRAIT_FLIP:
	   lcd7735_sendData(MADCTL_RGB);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f000 f85f 	bl	8001ef8 <lcd7735_sendData>
	   _width  = ST7735_TFTWIDTH;
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <lcd7735_setRotation+0x94>)
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	801a      	strh	r2, [r3, #0]
	   _height = ST7735_TFTHEIGHT;
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <lcd7735_setRotation+0x98>)
 8001e42:	22a0      	movs	r2, #160	; 0xa0
 8001e44:	801a      	strh	r2, [r3, #0]
	   break;
 8001e46:	e009      	b.n	8001e5c <lcd7735_setRotation+0x84>
   case LANDSCAPE_FLIP:
	   lcd7735_sendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 8001e48:	2060      	movs	r0, #96	; 0x60
 8001e4a:	f000 f855 	bl	8001ef8 <lcd7735_sendData>
	   _width  = ST7735_TFTHEIGHT;
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <lcd7735_setRotation+0x94>)
 8001e50:	22a0      	movs	r2, #160	; 0xa0
 8001e52:	801a      	strh	r2, [r3, #0]
	   _height = ST7735_TFTWIDTH;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <lcd7735_setRotation+0x98>)
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	801a      	strh	r2, [r3, #0]
	   break;
 8001e5a:	bf00      	nop
   default:
	   return;
	}
	orientation = m;
 8001e5c:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <lcd7735_setRotation+0x9c>)
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	7013      	strb	r3, [r2, #0]
 8001e62:	e000      	b.n	8001e66 <lcd7735_setRotation+0x8e>
	   return;
 8001e64:	bf00      	nop
}
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000012 	.word	0x20000012
 8001e70:	20000014 	.word	0x20000014
 8001e74:	20000220 	.word	0x20000220

08001e78 <delay_ms>:
#include <mcalSPI.h>
#include "hw_config.h"

static SPI_TypeDef  *spi  = SPI1;

void delay_ms(uint32_t delay_value) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
    //TimingDelay = delay_value;
	LED_blue_on;		// for Debug only
 8001e80:	210a      	movs	r1, #10
 8001e82:	4807      	ldr	r0, [pc, #28]	; (8001ea0 <delay_ms+0x28>)
 8001e84:	f001 faa0 	bl	80033c8 <gpioResetPin>
	//systickSetTicktime(&ST7735_Timer, delay_value);
	//while ((isSystickExpired(ST7735_Timer))== 0) { }
	systickDelay(&ST7735_Timer, delay_value);
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4806      	ldr	r0, [pc, #24]	; (8001ea4 <delay_ms+0x2c>)
 8001e8c:	f002 fc20 	bl	80046d0 <systickDelay>
	LED_blue_off;			//for Debug only
 8001e90:	210a      	movs	r1, #10
 8001e92:	4803      	ldr	r0, [pc, #12]	; (8001ea0 <delay_ms+0x28>)
 8001e94:	f001 fa6d 	bl	8003372 <gpioSetPin>
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40020400 	.word	0x40020400
 8001ea4:	2000023c 	.word	0x2000023c

08001ea8 <lcd7735_senddata>:

// Send byte via SPI to controller
void lcd7735_senddata(const uint8_t data)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(spi, ST7735_CS_PORT, ST7735_CS, data);
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <lcd7735_senddata+0x20>)
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	2206      	movs	r2, #6
 8001eba:	4904      	ldr	r1, [pc, #16]	; (8001ecc <lcd7735_senddata+0x24>)
 8001ebc:	f002 faf9 	bl	80044b2 <spiWriteByte>
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000018 	.word	0x20000018
 8001ecc:	40020400 	.word	0x40020400

08001ed0 <lcd7735_sendCmd>:
	spiWriteWord(spi, ST7735_CS_PORT, ST7735_CS, data);
}

// Send control command to controller
void lcd7735_sendCmd(const uint8_t cmd)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
	ST7735_DC0;
 8001eda:	2107      	movs	r1, #7
 8001edc:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <lcd7735_sendCmd+0x24>)
 8001ede:	f001 fa73 	bl	80033c8 <gpioResetPin>
    lcd7735_senddata(cmd);
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ffdf 	bl	8001ea8 <lcd7735_senddata>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40020800 	.word	0x40020800

08001ef8 <lcd7735_sendData>:

// Send parameters o command to controller
void lcd7735_sendData(const uint8_t data)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
    ST7735_DC1;
 8001f02:	2107      	movs	r1, #7
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <lcd7735_sendData+0x24>)
 8001f06:	f001 fa34 	bl	8003372 <gpioSetPin>
    lcd7735_senddata(data);
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ffcb 	bl	8001ea8 <lcd7735_senddata>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40020800 	.word	0x40020800

08001f20 <lcd7735_setup>:

// Init hardware
void lcd7735_setup(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af04      	add	r7, sp, #16
    // Configuration LED Pin
    gpioSelectPort(LED_GPIO);
 8001f26:	4843      	ldr	r0, [pc, #268]	; (8002034 <lcd7735_setup+0x114>)
 8001f28:	f001 f974 	bl	8003214 <gpioSelectPort>
    gpioSelectPinMode(LED_GPIO, LED_red, OUTPUT);
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	2103      	movs	r1, #3
 8001f30:	4840      	ldr	r0, [pc, #256]	; (8002034 <lcd7735_setup+0x114>)
 8001f32:	f001 f9d3 	bl	80032dc <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_red	, PUSHPULL);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2103      	movs	r1, #3
 8001f3a:	483e      	ldr	r0, [pc, #248]	; (8002034 <lcd7735_setup+0x114>)
 8001f3c:	f001 fad9 	bl	80034f2 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_red, PULLUP);
 8001f40:	2201      	movs	r2, #1
 8001f42:	2103      	movs	r1, #3
 8001f44:	483b      	ldr	r0, [pc, #236]	; (8002034 <lcd7735_setup+0x114>)
 8001f46:	f001 fb1d 	bl	8003584 <gpioSelectPushPullMode>
    LED_red_off;
 8001f4a:	2103      	movs	r1, #3
 8001f4c:	4839      	ldr	r0, [pc, #228]	; (8002034 <lcd7735_setup+0x114>)
 8001f4e:	f001 fa10 	bl	8003372 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_green, OUTPUT);
 8001f52:	2201      	movs	r2, #1
 8001f54:	2104      	movs	r1, #4
 8001f56:	4837      	ldr	r0, [pc, #220]	; (8002034 <lcd7735_setup+0x114>)
 8001f58:	f001 f9c0 	bl	80032dc <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_green, PUSHPULL);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2104      	movs	r1, #4
 8001f60:	4834      	ldr	r0, [pc, #208]	; (8002034 <lcd7735_setup+0x114>)
 8001f62:	f001 fac6 	bl	80034f2 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_green, PULLUP);
 8001f66:	2201      	movs	r2, #1
 8001f68:	2104      	movs	r1, #4
 8001f6a:	4832      	ldr	r0, [pc, #200]	; (8002034 <lcd7735_setup+0x114>)
 8001f6c:	f001 fb0a 	bl	8003584 <gpioSelectPushPullMode>
    LED_green_off;
 8001f70:	2104      	movs	r1, #4
 8001f72:	4830      	ldr	r0, [pc, #192]	; (8002034 <lcd7735_setup+0x114>)
 8001f74:	f001 f9fd 	bl	8003372 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_blue, OUTPUT);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	210a      	movs	r1, #10
 8001f7c:	482d      	ldr	r0, [pc, #180]	; (8002034 <lcd7735_setup+0x114>)
 8001f7e:	f001 f9ad 	bl	80032dc <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_blue, PUSHPULL);
 8001f82:	2200      	movs	r2, #0
 8001f84:	210a      	movs	r1, #10
 8001f86:	482b      	ldr	r0, [pc, #172]	; (8002034 <lcd7735_setup+0x114>)
 8001f88:	f001 fab3 	bl	80034f2 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_blue, PULLUP);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	210a      	movs	r1, #10
 8001f90:	4828      	ldr	r0, [pc, #160]	; (8002034 <lcd7735_setup+0x114>)
 8001f92:	f001 faf7 	bl	8003584 <gpioSelectPushPullMode>
    LED_blue_off;
 8001f96:	210a      	movs	r1, #10
 8001f98:	4826      	ldr	r0, [pc, #152]	; (8002034 <lcd7735_setup+0x114>)
 8001f9a:	f001 f9ea 	bl	8003372 <gpioSetPin>
    /* Declartion of SPI & IO Pins für ST7735-Port
     *
     *
     */

    gpioSelectPort(ST7735_RST_PORT);
 8001f9e:	4826      	ldr	r0, [pc, #152]	; (8002038 <lcd7735_setup+0x118>)
 8001fa0:	f001 f938 	bl	8003214 <gpioSelectPort>
    gpioSelectPinMode(ST7735_RST_PORT, ST7735_RST, OUTPUT);		// RESET
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2109      	movs	r1, #9
 8001fa8:	4823      	ldr	r0, [pc, #140]	; (8002038 <lcd7735_setup+0x118>)
 8001faa:	f001 f997 	bl	80032dc <gpioSelectPinMode>
    gpioSelectPort(ST7735_DC_PORT);
 8001fae:	4823      	ldr	r0, [pc, #140]	; (800203c <lcd7735_setup+0x11c>)
 8001fb0:	f001 f930 	bl	8003214 <gpioSelectPort>
    gpioSelectPinMode(ST7735_DC_PORT, ST7735_DC, OUTPUT);		// DATA/Command
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	2107      	movs	r1, #7
 8001fb8:	4820      	ldr	r0, [pc, #128]	; (800203c <lcd7735_setup+0x11c>)
 8001fba:	f001 f98f 	bl	80032dc <gpioSelectPinMode>

    gpioInitPort(ST7735_CS_PORT);
 8001fbe:	481d      	ldr	r0, [pc, #116]	; (8002034 <lcd7735_setup+0x114>)
 8001fc0:	f001 f8c6 	bl	8003150 <gpioInitPort>
    gpioSelectPinMode(ST7735_CS_PORT,ST7735_CS, OUTPUT);        // CS
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2106      	movs	r1, #6
 8001fc8:	481a      	ldr	r0, [pc, #104]	; (8002034 <lcd7735_setup+0x114>)
 8001fca:	f001 f987 	bl	80032dc <gpioSelectPinMode>
    gpioSelectPushPullMode(ST7735_CS_PORT, ST7735_CS, PULLUP);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	2106      	movs	r1, #6
 8001fd2:	4818      	ldr	r0, [pc, #96]	; (8002034 <lcd7735_setup+0x114>)
 8001fd4:	f001 fad6 	bl	8003584 <gpioSelectPushPullMode>

    gpioInitPort(ST7735_SPI_PORT);
 8001fd8:	4817      	ldr	r0, [pc, #92]	; (8002038 <lcd7735_setup+0x118>)
 8001fda:	f001 f8b9 	bl	8003150 <gpioInitPort>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_CLK, ALTFUNC);     // SPI1 Clock
 8001fde:	2202      	movs	r2, #2
 8001fe0:	2105      	movs	r1, #5
 8001fe2:	4815      	ldr	r0, [pc, #84]	; (8002038 <lcd7735_setup+0x118>)
 8001fe4:	f001 f97a 	bl	80032dc <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_CLK, AF5);
 8001fe8:	2205      	movs	r2, #5
 8001fea:	2105      	movs	r1, #5
 8001fec:	4812      	ldr	r0, [pc, #72]	; (8002038 <lcd7735_setup+0x118>)
 8001fee:	f001 fa17 	bl	8003420 <gpioSelectAltFunc>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_MOSI, ALTFUNC);    // SPI1 MOSI
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	2107      	movs	r1, #7
 8001ff6:	4810      	ldr	r0, [pc, #64]	; (8002038 <lcd7735_setup+0x118>)
 8001ff8:	f001 f970 	bl	80032dc <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_MOSI, AF5);
 8001ffc:	2205      	movs	r2, #5
 8001ffe:	2107      	movs	r1, #7
 8002000:	480d      	ldr	r0, [pc, #52]	; (8002038 <lcd7735_setup+0x118>)
 8002002:	f001 fa0d 	bl	8003420 <gpioSelectAltFunc>

    // Init SPI1
    spiSelectSPI(spi);
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <lcd7735_setup+0x120>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f002 f9f6 	bl	80043fc <spiSelectSPI>

    spiInitSPI(spi, CLK_DIV_16, SPI_DATA_8_BIT, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_1, SPI_IDLE_LOW);
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <lcd7735_setup+0x120>)
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	2300      	movs	r3, #0
 8002016:	9303      	str	r3, [sp, #12]
 8002018:	2300      	movs	r3, #0
 800201a:	9302      	str	r3, [sp, #8]
 800201c:	2300      	movs	r3, #0
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	2301      	movs	r3, #1
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	2301      	movs	r3, #1
 8002026:	2200      	movs	r2, #0
 8002028:	2103      	movs	r1, #3
 800202a:	f002 f8f9 	bl	8004220 <spiInitSPI>

}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40020400 	.word	0x40020400
 8002038:	40020000 	.word	0x40020000
 800203c:	40020800 	.word	0x40020800
 8002040:	20000018 	.word	0x20000018

08002044 <main>:
uint8_t I2C_SCAN(uint8_t scanAddr);



int main(void)
{
 8002044:	b5b0      	push	{r4, r5, r7, lr}
 8002046:	b0a2      	sub	sp, #136	; 0x88
 8002048:	af00      	add	r7, sp, #0
/*  I2C Variables  */

	uint8_t        scanAddr = 0x7F;  //7Bit Adresse
 800204a:	237f      	movs	r3, #127	; 0x7f
 800204c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	I2C_TypeDef   *i2c  = I2C1;
 8002050:	4bba      	ldr	r3, [pc, #744]	; (800233c <main+0x2f8>)
 8002052:	67bb      	str	r3, [r7, #120]	; 0x78

	uint32_t   i2cTaskTime = 50UL;
 8002054:	2332      	movs	r3, #50	; 0x32
 8002056:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

/*  End I2C Variables  */

	char strCardID[]   = ".  .  .  .  .  .  .\0";
 800205a:	4bb9      	ldr	r3, [pc, #740]	; (8002340 <main+0x2fc>)
 800205c:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8002060:	461d      	mov	r5, r3
 8002062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002066:	e895 0003 	ldmia.w	r5, {r0, r1}
 800206a:	6020      	str	r0, [r4, #0]
 800206c:	3404      	adds	r4, #4
 800206e:	7021      	strb	r1, [r4, #0]
	char strFirmware[] = ". . .          \0";  // dummyString with NULL
 8002070:	4bb4      	ldr	r3, [pc, #720]	; (8002344 <main+0x300>)
 8002072:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002076:	461d      	mov	r5, r3
 8002078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800207a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800207c:	682b      	ldr	r3, [r5, #0]
 800207e:	7023      	strb	r3, [r4, #0]
	//int testmode = 1;
   	//unsigned int r = 0;

       // Dies ist das Array, das die Adressen aller Timer-Variablen enthaelt.
       // Auch die Groesse des Arrays wird berechnet.
       uint32_t *timerList[] = { &Timer1, &ST7735_Timer, &I2C_Timer /*, weitere Timer */ };
 8002080:	4ab1      	ldr	r2, [pc, #708]	; (8002348 <main+0x304>)
 8002082:	463b      	mov	r3, r7
 8002084:	ca07      	ldmia	r2, {r0, r1, r2}
 8002086:	e883 0007 	stmia.w	r3, {r0, r1, r2}
       size_t    arraySize = sizeof(timerList)/sizeof(timerList[0]);
 800208a:	2303      	movs	r3, #3
 800208c:	677b      	str	r3, [r7, #116]	; 0x74


    // Initialisiert den Systick-Timer
    systickInit(SYSTICK_1MS);
 800208e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002092:	f002 fa9b 	bl	80045cc <systickInit>

    systickSetMillis(&Timer1, 100);
 8002096:	2164      	movs	r1, #100	; 0x64
 8002098:	48ac      	ldr	r0, [pc, #688]	; (800234c <main+0x308>)
 800209a:	f002 fa89 	bl	80045b0 <systickSetMillis>
    systickSetMillis(&I2C_Timer, i2cTaskTime);
 800209e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80020a2:	48ab      	ldr	r0, [pc, #684]	; (8002350 <main+0x30c>)
 80020a4:	f002 fa84 	bl	80045b0 <systickSetMillis>
    //lcd7735_initR(0);
    LED_red_on;
 80020a8:	2103      	movs	r1, #3
 80020aa:	48aa      	ldr	r0, [pc, #680]	; (8002354 <main+0x310>)
 80020ac:	f001 f98c 	bl	80033c8 <gpioResetPin>

    lcd7735_setup();
 80020b0:	f7ff ff36 	bl	8001f20 <lcd7735_setup>
      lcd7735_initR(INITR_REDTAB);
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7ff f9f9 	bl	80014ac <lcd7735_initR>
    lcd7735_setRotation(LANDSCAPE);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f7ff fe8c 	bl	8001dd8 <lcd7735_setRotation>
    lcd7735_setFont((uint8_t *)&SmallFont[0]);
 80020c0:	48a5      	ldr	r0, [pc, #660]	; (8002358 <main+0x314>)
 80020c2:	f7ff fbb5 	bl	8001830 <lcd7735_setFont>
    lcd7735_fillScreen(ST7735_BLACK);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7ff fe6c 	bl	8001da4 <lcd7735_fillScreen>

    LED_red_off;
 80020cc:	2103      	movs	r1, #3
 80020ce:	48a1      	ldr	r0, [pc, #644]	; (8002354 <main+0x310>)
 80020d0:	f001 f94f 	bl	8003372 <gpioSetPin>

    i2c_activate_pb89(i2c);
 80020d4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80020d6:	f7fe ff41 	bl	8000f5c <i2c_activate_pb89>

    lcd7735_print((char *)"I2C Scanner running \0",0,0,0);
 80020da:	2300      	movs	r3, #0
 80020dc:	2200      	movs	r2, #0
 80020de:	2100      	movs	r1, #0
 80020e0:	489e      	ldr	r0, [pc, #632]	; (800235c <main+0x318>)
 80020e2:	f7ff fdfd 	bl	8001ce0 <lcd7735_print>


    while (1)
    {
	   if (true == timerTrigger)
 80020e6:	4b9e      	ldr	r3, [pc, #632]	; (8002360 <main+0x31c>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d006      	beq.n	80020fc <main+0xb8>
	   {
			systickUpdateTimerList((uint32_t *) timerList, arraySize);
 80020ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	463b      	mov	r3, r7
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f002 fac0 	bl	800467c <systickUpdateTimerList>
	   }

	   if (isSystickExpired(I2C_Timer))
 80020fc:	4b94      	ldr	r3, [pc, #592]	; (8002350 <main+0x30c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f002 fa85 	bl	8004610 <isSystickExpired>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 820d 	beq.w	8002528 <main+0x4e4>
	   {
		   systickSetTicktime(&I2C_Timer, i2cTaskTime);
 800210e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002112:	488f      	ldr	r0, [pc, #572]	; (8002350 <main+0x30c>)
 8002114:	f002 fa6e 	bl	80045f4 <systickSetTicktime>
		   LED_green_off;
 8002118:	2104      	movs	r1, #4
 800211a:	488e      	ldr	r0, [pc, #568]	; (8002354 <main+0x310>)
 800211c:	f001 f929 	bl	8003372 <gpioSetPin>


		   switch (testmode)
 8002120:	4b90      	ldr	r3, [pc, #576]	; (8002364 <main+0x320>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b06      	cmp	r3, #6
 8002126:	f200 81fb 	bhi.w	8002520 <main+0x4dc>
 800212a:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <main+0xec>)
 800212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002130:	0800214d 	.word	0x0800214d
 8002134:	08002167 	.word	0x08002167
 8002138:	08002275 	.word	0x08002275
 800213c:	080022b7 	.word	0x080022b7
 8002140:	080022db 	.word	0x080022db
 8002144:	080023a1 	.word	0x080023a1
 8002148:	080024c9 	.word	0x080024c9
		   {
		   	   case 0:  //I2C Scan
		   	   {
		   		   //lcd7735_setForeground(ST7735_YELLOW);
		   		   i2cSetClkSpd(i2c,  I2C_CLOCK_50);
 800214c:	2100      	movs	r1, #0
 800214e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002150:	f001 fb26 	bl	80037a0 <i2cSetClkSpd>
		   		   lcd7735_print((char *)".  .  .  .  . \0",66,14,0);
 8002154:	2300      	movs	r3, #0
 8002156:	220e      	movs	r2, #14
 8002158:	2142      	movs	r1, #66	; 0x42
 800215a:	4883      	ldr	r0, [pc, #524]	; (8002368 <main+0x324>)
 800215c:	f7ff fdc0 	bl	8001ce0 <lcd7735_print>
		   		   testmode  = 1;
 8002160:	4b80      	ldr	r3, [pc, #512]	; (8002364 <main+0x320>)
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
		   	   }
		   	   case 1:  //I2C Scan
		   	   {
		   		   LED_red_on;
 8002166:	2103      	movs	r1, #3
 8002168:	487a      	ldr	r0, [pc, #488]	; (8002354 <main+0x310>)
 800216a:	f001 f92d 	bl	80033c8 <gpioResetPin>
		   		   if ( I2C_SCAN(scanAddr) != 0)
 800216e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f9f0 	bl	8002558 <I2C_SCAN>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d046      	beq.n	800220c <main+0x1c8>
				   {
					   LED_red_off;
 800217e:	2103      	movs	r1, #3
 8002180:	4874      	ldr	r0, [pc, #464]	; (8002354 <main+0x310>)
 8002182:	f001 f8f6 	bl	8003372 <gpioSetPin>
					   switch (scanAddr)
 8002186:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800218a:	2b50      	cmp	r3, #80	; 0x50
 800218c:	d006      	beq.n	800219c <main+0x158>
 800218e:	2b50      	cmp	r3, #80	; 0x50
 8002190:	dc3d      	bgt.n	800220e <main+0x1ca>
 8002192:	2b18      	cmp	r3, #24
 8002194:	d014      	beq.n	80021c0 <main+0x17c>
 8002196:	2b29      	cmp	r3, #41	; 0x29
 8002198:	d00e      	beq.n	80021b8 <main+0x174>
 800219a:	e038      	b.n	800220e <main+0x1ca>
					   {
						   case i2cAddr_RFID:
						   {
							   enableRFID = true;
 800219c:	4b73      	ldr	r3, [pc, #460]	; (800236c <main+0x328>)
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
							   lcd7735_print((char *)"RFID connected \0",0,28,0);
 80021a2:	2300      	movs	r3, #0
 80021a4:	221c      	movs	r2, #28
 80021a6:	2100      	movs	r1, #0
 80021a8:	4871      	ldr	r0, [pc, #452]	; (8002370 <main+0x32c>)
 80021aa:	f7ff fd99 	bl	8001ce0 <lcd7735_print>
							   RFID_LED(i2c,true);
 80021ae:	2101      	movs	r1, #1
 80021b0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80021b2:	f7fe fff7 	bl	80011a4 <RFID_LED>
							   break;
 80021b6:	e02a      	b.n	800220e <main+0x1ca>
						   }
						   case i2cAddr_LIDAR:
						   {
							   enableLIDAR = true;
 80021b8:	4b6e      	ldr	r3, [pc, #440]	; (8002374 <main+0x330>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	701a      	strb	r2, [r3, #0]
							   //lcd7735_print((char *)"TOF/LIADR connected \0",0,28,0);
							   break;
 80021be:	e026      	b.n	800220e <main+0x1ca>
						   }
						   case i2cAddr_LIS3DH:
						   {
							   enableLIS3DH = true;
 80021c0:	4b6d      	ldr	r3, [pc, #436]	; (8002378 <main+0x334>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	701a      	strb	r2, [r3, #0]
							   lcd7735_print((char *)"LIS3DH connected \0",0,28,0);
 80021c6:	2300      	movs	r3, #0
 80021c8:	221c      	movs	r2, #28
 80021ca:	2100      	movs	r1, #0
 80021cc:	486b      	ldr	r0, [pc, #428]	; (800237c <main+0x338>)
 80021ce:	f7ff fd87 	bl	8001ce0 <lcd7735_print>

							   lcd7735_print((char *)"Temp:\0",0,40,0);
 80021d2:	2300      	movs	r3, #0
 80021d4:	2228      	movs	r2, #40	; 0x28
 80021d6:	2100      	movs	r1, #0
 80021d8:	4869      	ldr	r0, [pc, #420]	; (8002380 <main+0x33c>)
 80021da:	f7ff fd81 	bl	8001ce0 <lcd7735_print>
							   lcd7735_print((char *)"X:\0",0,50,0);
 80021de:	2300      	movs	r3, #0
 80021e0:	2232      	movs	r2, #50	; 0x32
 80021e2:	2100      	movs	r1, #0
 80021e4:	4867      	ldr	r0, [pc, #412]	; (8002384 <main+0x340>)
 80021e6:	f7ff fd7b 	bl	8001ce0 <lcd7735_print>
							   lcd7735_print((char *)"Y:\0",0,60,0);
 80021ea:	2300      	movs	r3, #0
 80021ec:	223c      	movs	r2, #60	; 0x3c
 80021ee:	2100      	movs	r1, #0
 80021f0:	4865      	ldr	r0, [pc, #404]	; (8002388 <main+0x344>)
 80021f2:	f7ff fd75 	bl	8001ce0 <lcd7735_print>
							   lcd7735_print((char *)"Z:\0",0,70,0);
 80021f6:	2300      	movs	r3, #0
 80021f8:	2246      	movs	r2, #70	; 0x46
 80021fa:	2100      	movs	r1, #0
 80021fc:	4863      	ldr	r0, [pc, #396]	; (800238c <main+0x348>)
 80021fe:	f7ff fd6f 	bl	8001ce0 <lcd7735_print>
							   LED_blue_on;
 8002202:	210a      	movs	r1, #10
 8002204:	4853      	ldr	r0, [pc, #332]	; (8002354 <main+0x310>)
 8002206:	f001 f8df 	bl	80033c8 <gpioResetPin>
							   break;
 800220a:	e000      	b.n	800220e <main+0x1ca>
						   }
					   }
				   }
 800220c:	bf00      	nop

				   if ((scanAddr == 0) && (enableRFID))
 800220e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10c      	bne.n	8002230 <main+0x1ec>
 8002216:	4b55      	ldr	r3, [pc, #340]	; (800236c <main+0x328>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <main+0x1ec>
				   {
					   scanAddr = 0x7F;
 800221e:	237f      	movs	r3, #127	; 0x7f
 8002220:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					   i2cTaskTime = 200UL;
 8002224:	23c8      	movs	r3, #200	; 0xc8
 8002226:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					   		// SL018 only works with 100kHz
					   testmode = 2;
 800222a:	4b4e      	ldr	r3, [pc, #312]	; (8002364 <main+0x320>)
 800222c:	2202      	movs	r2, #2
 800222e:	701a      	strb	r2, [r3, #0]
				   }
				   if ((scanAddr == 0) && (enableLIS3DH))
 8002230:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10c      	bne.n	8002252 <main+0x20e>
 8002238:	4b4f      	ldr	r3, [pc, #316]	; (8002378 <main+0x334>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <main+0x20e>
				   {
					   scanAddr = 0x7F;
 8002240:	237f      	movs	r3, #127	; 0x7f
 8002242:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					   testmode = 4;
 8002246:	4b47      	ldr	r3, [pc, #284]	; (8002364 <main+0x320>)
 8002248:	2204      	movs	r2, #4
 800224a:	701a      	strb	r2, [r3, #0]
					   i2cTaskTime = 200;
 800224c:	23c8      	movs	r3, #200	; 0xc8
 800224e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

				   }
				   if ((scanAddr == 0))
 8002252:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002256:	2b00      	cmp	r3, #0
 8002258:	d106      	bne.n	8002268 <main+0x224>
				   {
					   scanAddr = 0x7F;
 800225a:	237f      	movs	r3, #127	; 0x7f
 800225c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				       testmode = 0;
 8002260:	4b40      	ldr	r3, [pc, #256]	; (8002364 <main+0x320>)
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
				   }
				   else
				   {
					   scanAddr -=1;
				   }
				   break;
 8002266:	e16a      	b.n	800253e <main+0x4fa>
					   scanAddr -=1;
 8002268:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800226c:	3b01      	subs	r3, #1
 800226e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				   break;
 8002272:	e164      	b.n	800253e <main+0x4fa>
				}
		   	   	case 2:  // read RFID Firmware
				{
					if (RFID_readFWVersion(i2c, (char *)strFirmware) >= 0)
 8002274:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002278:	4619      	mov	r1, r3
 800227a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800227c:	f7ff f84a 	bl	8001314 <RFID_readFWVersion>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	f2c0 8152 	blt.w	800252c <main+0x4e8>
					{
						lcd7735_print((char *)"FW: \0",0,48,0);
 8002288:	2300      	movs	r3, #0
 800228a:	2230      	movs	r2, #48	; 0x30
 800228c:	2100      	movs	r1, #0
 800228e:	4840      	ldr	r0, [pc, #256]	; (8002390 <main+0x34c>)
 8002290:	f7ff fd26 	bl	8001ce0 <lcd7735_print>
						lcd7735_print((char *)strFirmware,24,48,0);
 8002294:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002298:	2300      	movs	r3, #0
 800229a:	2230      	movs	r2, #48	; 0x30
 800229c:	2118      	movs	r1, #24
 800229e:	f7ff fd1f 	bl	8001ce0 <lcd7735_print>
						testmode = 3;
 80022a2:	4b30      	ldr	r3, [pc, #192]	; (8002364 <main+0x320>)
 80022a4:	2203      	movs	r2, #3
 80022a6:	701a      	strb	r2, [r3, #0]
						lcd7735_print((char *)"ID:\0",0,70,0);
 80022a8:	2300      	movs	r3, #0
 80022aa:	2246      	movs	r2, #70	; 0x46
 80022ac:	2100      	movs	r1, #0
 80022ae:	4839      	ldr	r0, [pc, #228]	; (8002394 <main+0x350>)
 80022b0:	f7ff fd16 	bl	8001ce0 <lcd7735_print>
					else
					{
						;
					}
				}
				break;
 80022b4:	e13a      	b.n	800252c <main+0x4e8>
		   	   	case 3:  // read RFID ID
		   		{
		   			if (RFID_readCard(i2c, strCardID)> 0)
 80022b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022ba:	4619      	mov	r1, r3
 80022bc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80022be:	f7fe ff8f 	bl	80011e0 <RFID_readCard>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f340 8133 	ble.w	8002530 <main+0x4ec>
		   			{
		   				lcd7735_print((char *)strCardID,24,70,0);
 80022ca:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80022ce:	2300      	movs	r3, #0
 80022d0:	2246      	movs	r2, #70	; 0x46
 80022d2:	2118      	movs	r1, #24
 80022d4:	f7ff fd04 	bl	8001ce0 <lcd7735_print>
		   			}
		   		}
		   		break;
 80022d8:	e12a      	b.n	8002530 <main+0x4ec>

// LIS3DH function
		   	 	case 4:  // LIS3DH Init		   			   		{
		   	 	{
		   			LED_red_off;
 80022da:	2103      	movs	r1, #3
 80022dc:	481d      	ldr	r0, [pc, #116]	; (8002354 <main+0x310>)
 80022de:	f001 f848 	bl	8003372 <gpioSetPin>
		   	 		int8_t ret = i2cLIS3DH_init(i2c, 0);
 80022e2:	2100      	movs	r1, #0
 80022e4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80022e6:	f7fe feb9 	bl	800105c <i2cLIS3DH_init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
					if (ret > 0)										// no LIS3DH Sensor present
 80022f0:	f997 3072 	ldrsb.w	r3, [r7, #114]	; 0x72
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	dd0c      	ble.n	8002312 <main+0x2ce>
					{
						lcd7735_print("LIS3DH not Present ",0,0,0);
 80022f8:	2300      	movs	r3, #0
 80022fa:	2200      	movs	r2, #0
 80022fc:	2100      	movs	r1, #0
 80022fe:	4826      	ldr	r0, [pc, #152]	; (8002398 <main+0x354>)
 8002300:	f7ff fcee 	bl	8001ce0 <lcd7735_print>
						i2cTaskTime = 500;
 8002304:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002308:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						testmode = 1;
 800230c:	4b15      	ldr	r3, [pc, #84]	; (8002364 <main+0x320>)
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
					}
					if (ret == 0)										// LIS3DH init-procedure finished
 8002312:	f997 3072 	ldrsb.w	r3, [r7, #114]	; 0x72
 8002316:	2b00      	cmp	r3, #0
 8002318:	f040 810c 	bne.w	8002534 <main+0x4f0>
					{
						lcd7735_print("(C)23Fl I2C LIS3DH ",0,0,0);
 800231c:	2300      	movs	r3, #0
 800231e:	2200      	movs	r2, #0
 8002320:	2100      	movs	r1, #0
 8002322:	481e      	ldr	r0, [pc, #120]	; (800239c <main+0x358>)
 8002324:	f7ff fcdc 	bl	8001ce0 <lcd7735_print>
						i2cTaskTime = 70;									// Tasktime for display 70ms
 8002328:	2346      	movs	r3, #70	; 0x46
 800232a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						testmode = 5;
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <main+0x320>)
 8002330:	2205      	movs	r2, #5
 8002332:	701a      	strb	r2, [r3, #0]
						timeTMode5 = 10;							// count of cycles in Mode5
 8002334:	230a      	movs	r3, #10
 8002336:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
					}
				}
				break;
 800233a:	e0fb      	b.n	8002534 <main+0x4f0>
 800233c:	40005400 	.word	0x40005400
 8002340:	08008b2c 	.word	0x08008b2c
 8002344:	08008b44 	.word	0x08008b44
 8002348:	08008b58 	.word	0x08008b58
 800234c:	20000238 	.word	0x20000238
 8002350:	20000240 	.word	0x20000240
 8002354:	40020400 	.word	0x40020400
 8002358:	08008b70 	.word	0x08008b70
 800235c:	08008a68 	.word	0x08008a68
 8002360:	20000234 	.word	0x20000234
 8002364:	2000001c 	.word	0x2000001c
 8002368:	08008a80 	.word	0x08008a80
 800236c:	20000210 	.word	0x20000210
 8002370:	08008a90 	.word	0x08008a90
 8002374:	20000212 	.word	0x20000212
 8002378:	20000211 	.word	0x20000211
 800237c:	08008aa4 	.word	0x08008aa4
 8002380:	08008ab8 	.word	0x08008ab8
 8002384:	08008ac0 	.word	0x08008ac0
 8002388:	08008ac4 	.word	0x08008ac4
 800238c:	08008ac8 	.word	0x08008ac8
 8002390:	08008acc 	.word	0x08008acc
 8002394:	08008ad4 	.word	0x08008ad4
 8002398:	08008adc 	.word	0x08008adc
 800239c:	08008af0 	.word	0x08008af0
		   		case 5:  // read LIS3DH Data
		   		{
		   			LED_blue_on;
 80023a0:	210a      	movs	r1, #10
 80023a2:	4867      	ldr	r0, [pc, #412]	; (8002540 <main+0x4fc>)
 80023a4:	f001 f810 	bl	80033c8 <gpioResetPin>

		   			Temp = i2cLIS3DH_Temp(i2c);
 80023a8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80023aa:	f7fe fee7 	bl	800117c <i2cLIS3DH_Temp>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		   			sprintf(strT, "%+3i", Temp);
 80023b4:	f997 2073 	ldrsb.w	r2, [r7, #115]	; 0x73
 80023b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023bc:	4961      	ldr	r1, [pc, #388]	; (8002544 <main+0x500>)
 80023be:	4618      	mov	r0, r3
 80023c0:	f002 ff3e 	bl	8005240 <siprintf>
		   			lcd7735_print((char *)strT,40,40,0);
 80023c4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80023c8:	2300      	movs	r3, #0
 80023ca:	2228      	movs	r2, #40	; 0x28
 80023cc:	2128      	movs	r1, #40	; 0x28
 80023ce:	f7ff fc87 	bl	8001ce0 <lcd7735_print>

		   			i2cLIS3DH_XYZ(i2c,(int16_t *) XYZraw);
 80023d2:	f107 0320 	add.w	r3, r7, #32
 80023d6:	4619      	mov	r1, r3
 80023d8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80023da:	f7fe febd 	bl	8001158 <i2cLIS3DH_XYZ>
  					XYZ[0] = (float) XYZraw[0]/0x3FFF;  //skalierung 1mg/digit at +-2g
 80023de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80023e2:	ee07 3a90 	vmov	s15, r3
 80023e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ea:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002548 <main+0x504>
 80023ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023f2:	edc7 7a05 	vstr	s15, [r7, #20]
		   			XYZ[1] = (float) XYZraw[1]/0x3FFF;
 80023f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80023fa:	ee07 3a90 	vmov	s15, r3
 80023fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002402:	eddf 6a51 	vldr	s13, [pc, #324]	; 8002548 <main+0x504>
 8002406:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800240a:	edc7 7a06 	vstr	s15, [r7, #24]
		   			XYZ[2] = (float) XYZraw[2]/0x3FFF;
 800240e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002412:	ee07 3a90 	vmov	s15, r3
 8002416:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800241a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8002548 <main+0x504>
 800241e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002422:	edc7 7a07 	vstr	s15, [r7, #28]
		   			sprintf(strX, "%+6.3f", XYZ[0]);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe f895 	bl	8000558 <__aeabi_f2d>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002436:	4945      	ldr	r1, [pc, #276]	; (800254c <main+0x508>)
 8002438:	f002 ff02 	bl	8005240 <siprintf>
		   			lcd7735_print((char *)strX,20,50,0);
 800243c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002440:	2300      	movs	r3, #0
 8002442:	2232      	movs	r2, #50	; 0x32
 8002444:	2114      	movs	r1, #20
 8002446:	f7ff fc4b 	bl	8001ce0 <lcd7735_print>
		   			sprintf(strY, "%+6.3f", XYZ[1]);
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f883 	bl	8000558 <__aeabi_f2d>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800245a:	493c      	ldr	r1, [pc, #240]	; (800254c <main+0x508>)
 800245c:	f002 fef0 	bl	8005240 <siprintf>
		   			lcd7735_print((char *)strY,20,60,0);
 8002460:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002464:	2300      	movs	r3, #0
 8002466:	223c      	movs	r2, #60	; 0x3c
 8002468:	2114      	movs	r1, #20
 800246a:	f7ff fc39 	bl	8001ce0 <lcd7735_print>
		   			sprintf(strZ, "%+6.3f", XYZ[2]);
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe f871 	bl	8000558 <__aeabi_f2d>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800247e:	4933      	ldr	r1, [pc, #204]	; (800254c <main+0x508>)
 8002480:	f002 fede 	bl	8005240 <siprintf>
		   			lcd7735_print((char *)strZ,20,70,0);
 8002484:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002488:	2300      	movs	r3, #0
 800248a:	2246      	movs	r2, #70	; 0x46
 800248c:	2114      	movs	r1, #20
 800248e:	f7ff fc27 	bl	8001ce0 <lcd7735_print>
					if ((timeTMode5--) > 0)
 8002492:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	f8a7 207e 	strh.w	r2, [r7, #126]	; 0x7e
 800249c:	2b00      	cmp	r3, #0
 800249e:	d04b      	beq.n	8002538 <main+0x4f4>
					{
						testmode = 6;
 80024a0:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <main+0x50c>)
 80024a2:	2206      	movs	r2, #6
 80024a4:	701a      	strb	r2, [r3, #0]
						lcd7735_fillScreen(ST7735_BLACK);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7ff fc7c 	bl	8001da4 <lcd7735_fillScreen>
						lcd7735_print("T:    LIS3DH (C)23Fl",0,0,0);
 80024ac:	2300      	movs	r3, #0
 80024ae:	2200      	movs	r2, #0
 80024b0:	2100      	movs	r1, #0
 80024b2:	4828      	ldr	r0, [pc, #160]	; (8002554 <main+0x510>)
 80024b4:	f7ff fc14 	bl	8001ce0 <lcd7735_print>
						i2cTaskTime = 20;
 80024b8:	2314      	movs	r3, #20
 80024ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						LED_blue_off;
 80024be:	210a      	movs	r1, #10
 80024c0:	481f      	ldr	r0, [pc, #124]	; (8002540 <main+0x4fc>)
 80024c2:	f000 ff56 	bl	8003372 <gpioSetPin>

					}
				    break;
 80024c6:	e037      	b.n	8002538 <main+0x4f4>
				}
		   		case 6:  // Scope display the LIS3DH Data
				{
					i2cLIS3DH_XYZ(i2c, XYZraw);
 80024c8:	f107 0320 	add.w	r3, r7, #32
 80024cc:	4619      	mov	r1, r3
 80024ce:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80024d0:	f7fe fe42 	bl	8001158 <i2cLIS3DH_XYZ>
					XYZ2AlphaBeta(XYZraw, AlphaBeta);
 80024d4:	f107 020c 	add.w	r2, r7, #12
 80024d8:	f107 0320 	add.w	r3, r7, #32
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f9dc 	bl	800289c <XYZ2AlphaBeta>
					if (AlBeScreen(AlphaBeta) == 0)
 80024e4:	f107 030c 	add.w	r3, r7, #12
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fa89 	bl	8002a00 <AlBeScreen>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d123      	bne.n	800253c <main+0x4f8>
					{
						Temp = i2cLIS3DH_Temp(i2c);
 80024f4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80024f6:	f7fe fe41 	bl	800117c <i2cLIS3DH_Temp>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
						sprintf(strT, "%+3i", Temp);
 8002500:	f997 2073 	ldrsb.w	r2, [r7, #115]	; 0x73
 8002504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002508:	490e      	ldr	r1, [pc, #56]	; (8002544 <main+0x500>)
 800250a:	4618      	mov	r0, r3
 800250c:	f002 fe98 	bl	8005240 <siprintf>
						lcd7735_print((char *)strT,12,0,0);
 8002510:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002514:	2300      	movs	r3, #0
 8002516:	2200      	movs	r2, #0
 8002518:	210c      	movs	r1, #12
 800251a:	f7ff fbe1 	bl	8001ce0 <lcd7735_print>
					}
					//testmode = 2;
					break;
 800251e:	e00d      	b.n	800253c <main+0x4f8>
				}

//end LIS3DH function
		   	   default:
				{
					testmode = 0;
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <main+0x50c>)
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	e5de      	b.n	80020e6 <main+0xa2>
				}
		   }  //end switch (testmode)
	   } // end if systickexp
 8002528:	bf00      	nop
 800252a:	e5dc      	b.n	80020e6 <main+0xa2>
				break;
 800252c:	bf00      	nop
 800252e:	e5da      	b.n	80020e6 <main+0xa2>
		   		break;
 8002530:	bf00      	nop
 8002532:	e5d8      	b.n	80020e6 <main+0xa2>
				break;
 8002534:	bf00      	nop
 8002536:	e5d6      	b.n	80020e6 <main+0xa2>
				    break;
 8002538:	bf00      	nop
 800253a:	e5d4      	b.n	80020e6 <main+0xa2>
					break;
 800253c:	bf00      	nop
	   if (true == timerTrigger)
 800253e:	e5d2      	b.n	80020e6 <main+0xa2>
 8002540:	40020400 	.word	0x40020400
 8002544:	08008b04 	.word	0x08008b04
 8002548:	467ffc00 	.word	0x467ffc00
 800254c:	08008b0c 	.word	0x08008b0c
 8002550:	2000001c 	.word	0x2000001c
 8002554:	08008b14 	.word	0x08008b14

08002558 <I2C_SCAN>:
 */



uint8_t I2C_SCAN(uint8_t scanAddr)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
	I2C_TypeDef *i2c  = I2C1;
 8002562:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <I2C_SCAN+0x80>)
 8002564:	617b      	str	r3, [r7, #20]
	uint8_t 	*outString2 = (uint8_t *) "Addr at: \0";
 8002566:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <I2C_SCAN+0x84>)
 8002568:	613b      	str	r3, [r7, #16]
	uint8_t     *result;

	uint8_t foundAddr = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	73fb      	strb	r3, [r7, #15]
	static int xPos = 0;

	foundAddr = i2cFindSlaveAddr(i2c, scanAddr);
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	4619      	mov	r1, r3
 8002572:	6978      	ldr	r0, [r7, #20]
 8002574:	f001 fc0b 	bl	8003d8e <i2cFindSlaveAddr>
 8002578:	4603      	mov	r3, r0
 800257a:	73fb      	strb	r3, [r7, #15]
	if (xPos == 0)
 800257c:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <I2C_SCAN+0x88>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d108      	bne.n	8002596 <I2C_SCAN+0x3e>
	{
		lcd7735_print((char *)outString2,0,14,0);
 8002584:	2300      	movs	r3, #0
 8002586:	220e      	movs	r2, #14
 8002588:	2100      	movs	r1, #0
 800258a:	6938      	ldr	r0, [r7, #16]
 800258c:	f7ff fba8 	bl	8001ce0 <lcd7735_print>
		xPos = 66;
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <I2C_SCAN+0x88>)
 8002592:	2242      	movs	r2, #66	; 0x42
 8002594:	601a      	str	r2, [r3, #0]
	}
	result = convDecByteToHex(scanAddr);
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe fd19 	bl	8000fd0 <convDecByteToHex>
 800259e:	60b8      	str	r0, [r7, #8]
	if (foundAddr != 0)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d012      	beq.n	80025cc <I2C_SCAN+0x74>
	{
		//outString = outString2;
		lcd7735_print((char *)result,xPos,14,0);
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <I2C_SCAN+0x88>)
 80025a8:	6819      	ldr	r1, [r3, #0]
 80025aa:	2300      	movs	r3, #0
 80025ac:	220e      	movs	r2, #14
 80025ae:	68b8      	ldr	r0, [r7, #8]
 80025b0:	f7ff fb96 	bl	8001ce0 <lcd7735_print>
		xPos = (int) 20 + xPos;
 80025b4:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <I2C_SCAN+0x88>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	3314      	adds	r3, #20
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <I2C_SCAN+0x88>)
 80025bc:	6013      	str	r3, [r2, #0]
		if (xPos > 140)
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <I2C_SCAN+0x88>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b8c      	cmp	r3, #140	; 0x8c
 80025c4:	dd02      	ble.n	80025cc <I2C_SCAN+0x74>
		{
			xPos = 66;
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <I2C_SCAN+0x88>)
 80025c8:	2242      	movs	r2, #66	; 0x42
 80025ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
	//	lcd7735_print((char *)result,xPos,14,0);
	}
	return foundAddr;
 80025cc:	7bfb      	ldrb	r3, [r7, #15]

}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40005400 	.word	0x40005400
 80025dc:	08008b64 	.word	0x08008b64
 80025e0:	20000244 	.word	0x20000244

080025e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
	return 1;
 80025e8:	2301      	movs	r3, #1
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <_kill>:

int _kill(int pid, int sig)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025fe:	f002 f88b 	bl	8004718 <__errno>
 8002602:	4603      	mov	r3, r0
 8002604:	2216      	movs	r2, #22
 8002606:	601a      	str	r2, [r3, #0]
	return -1;
 8002608:	f04f 33ff 	mov.w	r3, #4294967295
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <_exit>:

void _exit (int status)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800261c:	f04f 31ff 	mov.w	r1, #4294967295
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ffe7 	bl	80025f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002626:	e7fe      	b.n	8002626 <_exit+0x12>

08002628 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e00a      	b.n	8002650 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800263a:	f3af 8000 	nop.w
 800263e:	4601      	mov	r1, r0
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	60ba      	str	r2, [r7, #8]
 8002646:	b2ca      	uxtb	r2, r1
 8002648:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3301      	adds	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	429a      	cmp	r2, r3
 8002656:	dbf0      	blt.n	800263a <_read+0x12>
	}

return len;
 8002658:	687b      	ldr	r3, [r7, #4]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	e009      	b.n	8002688 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	60ba      	str	r2, [r7, #8]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3301      	adds	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	429a      	cmp	r2, r3
 800268e:	dbf1      	blt.n	8002674 <_write+0x12>
	}
	return len;
 8002690:	687b      	ldr	r3, [r7, #4]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_close>:

int _close(int file)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
	return -1;
 80026a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026c2:	605a      	str	r2, [r3, #4]
	return 0;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <_isatty>:

int _isatty(int file)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
	return 1;
 80026da:	2301      	movs	r3, #1
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
	return 0;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800270c:	4a14      	ldr	r2, [pc, #80]	; (8002760 <_sbrk+0x5c>)
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <_sbrk+0x60>)
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <_sbrk+0x64>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d102      	bne.n	8002726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <_sbrk+0x64>)
 8002722:	4a12      	ldr	r2, [pc, #72]	; (800276c <_sbrk+0x68>)
 8002724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <_sbrk+0x64>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	429a      	cmp	r2, r3
 8002732:	d207      	bcs.n	8002744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002734:	f001 fff0 	bl	8004718 <__errno>
 8002738:	4603      	mov	r3, r0
 800273a:	220c      	movs	r2, #12
 800273c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800273e:	f04f 33ff 	mov.w	r3, #4294967295
 8002742:	e009      	b.n	8002758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <_sbrk+0x64>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <_sbrk+0x64>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	4a05      	ldr	r2, [pc, #20]	; (8002768 <_sbrk+0x64>)
 8002754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002756:	68fb      	ldr	r3, [r7, #12]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20018000 	.word	0x20018000
 8002764:	00000400 	.word	0x00000400
 8002768:	20000248 	.word	0x20000248
 800276c:	200002b0 	.word	0x200002b0

08002770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002774:	4b08      	ldr	r3, [pc, #32]	; (8002798 <SystemInit+0x28>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277a:	4a07      	ldr	r2, [pc, #28]	; (8002798 <SystemInit+0x28>)
 800277c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <SystemInit+0x28>)
 8002786:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800278a:	609a      	str	r2, [r3, #8]
#endif
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	2302      	movs	r3, #2
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	2302      	movs	r3, #2
 80027b4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80027b6:	4b34      	ldr	r3, [pc, #208]	; (8002888 <SystemCoreClockUpdate+0xec>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d011      	beq.n	80027ea <SystemCoreClockUpdate+0x4e>
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d844      	bhi.n	8002856 <SystemCoreClockUpdate+0xba>
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <SystemCoreClockUpdate+0x3e>
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d004      	beq.n	80027e2 <SystemCoreClockUpdate+0x46>
 80027d8:	e03d      	b.n	8002856 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80027da:	4b2c      	ldr	r3, [pc, #176]	; (800288c <SystemCoreClockUpdate+0xf0>)
 80027dc:	4a2c      	ldr	r2, [pc, #176]	; (8002890 <SystemCoreClockUpdate+0xf4>)
 80027de:	601a      	str	r2, [r3, #0]
      break;
 80027e0:	e03d      	b.n	800285e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80027e2:	4b2a      	ldr	r3, [pc, #168]	; (800288c <SystemCoreClockUpdate+0xf0>)
 80027e4:	4a2b      	ldr	r2, [pc, #172]	; (8002894 <SystemCoreClockUpdate+0xf8>)
 80027e6:	601a      	str	r2, [r3, #0]
      break;
 80027e8:	e039      	b.n	800285e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80027ea:	4b27      	ldr	r3, [pc, #156]	; (8002888 <SystemCoreClockUpdate+0xec>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	0d9b      	lsrs	r3, r3, #22
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027f6:	4b24      	ldr	r3, [pc, #144]	; (8002888 <SystemCoreClockUpdate+0xec>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027fe:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00c      	beq.n	8002820 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002806:	4a23      	ldr	r2, [pc, #140]	; (8002894 <SystemCoreClockUpdate+0xf8>)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4a1e      	ldr	r2, [pc, #120]	; (8002888 <SystemCoreClockUpdate+0xec>)
 8002810:	6852      	ldr	r2, [r2, #4]
 8002812:	0992      	lsrs	r2, r2, #6
 8002814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002818:	fb02 f303 	mul.w	r3, r2, r3
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	e00b      	b.n	8002838 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002820:	4a1b      	ldr	r2, [pc, #108]	; (8002890 <SystemCoreClockUpdate+0xf4>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	4a17      	ldr	r2, [pc, #92]	; (8002888 <SystemCoreClockUpdate+0xec>)
 800282a:	6852      	ldr	r2, [r2, #4]
 800282c:	0992      	lsrs	r2, r2, #6
 800282e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002838:	4b13      	ldr	r3, [pc, #76]	; (8002888 <SystemCoreClockUpdate+0xec>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	0c1b      	lsrs	r3, r3, #16
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	3301      	adds	r3, #1
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002850:	4a0e      	ldr	r2, [pc, #56]	; (800288c <SystemCoreClockUpdate+0xf0>)
 8002852:	6013      	str	r3, [r2, #0]
      break;
 8002854:	e003      	b.n	800285e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002856:	4b0d      	ldr	r3, [pc, #52]	; (800288c <SystemCoreClockUpdate+0xf0>)
 8002858:	4a0d      	ldr	r2, [pc, #52]	; (8002890 <SystemCoreClockUpdate+0xf4>)
 800285a:	601a      	str	r2, [r3, #0]
      break;
 800285c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <SystemCoreClockUpdate+0xec>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <SystemCoreClockUpdate+0xfc>)
 800286a:	5cd3      	ldrb	r3, [r2, r3]
 800286c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800286e:	4b07      	ldr	r3, [pc, #28]	; (800288c <SystemCoreClockUpdate+0xf0>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
 8002878:	4a04      	ldr	r2, [pc, #16]	; (800288c <SystemCoreClockUpdate+0xf0>)
 800287a:	6013      	str	r3, [r2, #0]
}
 800287c:	bf00      	nop
 800287e:	371c      	adds	r7, #28
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	40023800 	.word	0x40023800
 800288c:	20000020 	.word	0x20000020
 8002890:	00f42400 	.word	0x00f42400
 8002894:	007a1200 	.word	0x007a1200
 8002898:	08009070 	.word	0x08009070

0800289c <XYZ2AlphaBeta>:
#include "ST7735.h"
#include "xyzScope.h"


void XYZ2AlphaBeta(int16_t *XYZ_raw, float *AlphaBeta)
{
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
		float X = (float) XYZ_raw[0]/160;  //Skalierung 10mg/digit at +-2g
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ac:	ee07 3a90 	vmov	s15, r3
 80028b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028b4:	eddf 6a50 	vldr	s13, [pc, #320]	; 80029f8 <XYZ2AlphaBeta+0x15c>
 80028b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028bc:	edc7 7a05 	vstr	s15, [r7, #20]
		float Y = (float) XYZ_raw[1]/160;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3302      	adds	r3, #2
 80028c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028c8:	ee07 3a90 	vmov	s15, r3
 80028cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028d0:	eddf 6a49 	vldr	s13, [pc, #292]	; 80029f8 <XYZ2AlphaBeta+0x15c>
 80028d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028d8:	edc7 7a04 	vstr	s15, [r7, #16]
		float Z = (float) XYZ_raw[2]/160;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3304      	adds	r3, #4
 80028e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e4:	ee07 3a90 	vmov	s15, r3
 80028e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028ec:	eddf 6a42 	vldr	s13, [pc, #264]	; 80029f8 <XYZ2AlphaBeta+0x15c>
 80028f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028f4:	edc7 7a03 	vstr	s15, [r7, #12]

		AlphaBeta[0] = atan(X/Z);
 80028f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80028fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002900:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002904:	ee16 0a90 	vmov	r0, s13
 8002908:	f7fd fe26 	bl	8000558 <__aeabi_f2d>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	ec43 2b10 	vmov	d0, r2, r3
 8002914:	f004 fe14 	bl	8007540 <atan>
 8002918:	ec53 2b10 	vmov	r2, r3, d0
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	f7fe f94a 	bl	8000bb8 <__aeabi_d2f>
 8002924:	4602      	mov	r2, r0
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	601a      	str	r2, [r3, #0]
		if (Z<0)
 800292a:	edd7 7a03 	vldr	s15, [r7, #12]
 800292e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002936:	d51b      	bpl.n	8002970 <XYZ2AlphaBeta+0xd4>
		{
			if (X<0)  {AlphaBeta[0] -=_pi;}
 8002938:	edd7 7a05 	vldr	s15, [r7, #20]
 800293c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002944:	d50a      	bpl.n	800295c <XYZ2AlphaBeta+0xc0>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	edd3 7a00 	vldr	s15, [r3]
 800294c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80029fc <XYZ2AlphaBeta+0x160>
 8002950:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	edc3 7a00 	vstr	s15, [r3]
 800295a:	e009      	b.n	8002970 <XYZ2AlphaBeta+0xd4>
			else {AlphaBeta[0] +=_pi;}
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	edd3 7a00 	vldr	s15, [r3]
 8002962:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80029fc <XYZ2AlphaBeta+0x160>
 8002966:	ee77 7a87 	vadd.f32	s15, s15, s14
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	edc3 7a00 	vstr	s15, [r3]
		}

		AlphaBeta[1] = atan(Y/Z);
 8002970:	ed97 7a04 	vldr	s14, [r7, #16]
 8002974:	edd7 7a03 	vldr	s15, [r7, #12]
 8002978:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800297c:	ee16 0a90 	vmov	r0, s13
 8002980:	f7fd fdea 	bl	8000558 <__aeabi_f2d>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	ec43 2b10 	vmov	d0, r2, r3
 800298c:	f004 fdd8 	bl	8007540 <atan>
 8002990:	ec51 0b10 	vmov	r0, r1, d0
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	1d1c      	adds	r4, r3, #4
 8002998:	f7fe f90e 	bl	8000bb8 <__aeabi_d2f>
 800299c:	4603      	mov	r3, r0
 800299e:	6023      	str	r3, [r4, #0]
		if (Z<0)
 80029a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80029a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ac:	d400      	bmi.n	80029b0 <XYZ2AlphaBeta+0x114>
		{
			if (Y<0)  {AlphaBeta[1] -=_pi;}
			else {AlphaBeta[1] +=_pi;}
		}
}
 80029ae:	e01f      	b.n	80029f0 <XYZ2AlphaBeta+0x154>
			if (Y<0)  {AlphaBeta[1] -=_pi;}
 80029b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80029b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029bc:	d50c      	bpl.n	80029d8 <XYZ2AlphaBeta+0x13c>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	3304      	adds	r3, #4
 80029c2:	edd3 7a00 	vldr	s15, [r3]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	3304      	adds	r3, #4
 80029ca:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80029fc <XYZ2AlphaBeta+0x160>
 80029ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029d2:	edc3 7a00 	vstr	s15, [r3]
}
 80029d6:	e00b      	b.n	80029f0 <XYZ2AlphaBeta+0x154>
			else {AlphaBeta[1] +=_pi;}
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	3304      	adds	r3, #4
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	3304      	adds	r3, #4
 80029e4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80029fc <XYZ2AlphaBeta+0x160>
 80029e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029ec:	edc3 7a00 	vstr	s15, [r3]
}
 80029f0:	bf00      	nop
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd90      	pop	{r4, r7, pc}
 80029f8:	43200000 	.word	0x43200000
 80029fc:	40490625 	.word	0x40490625

08002a00 <AlBeScreen>:

uint16_t AlBeScreen(float *AlphaBeta)
{
 8002a00:	b5b0      	push	{r4, r5, r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
#define bDots 12

	//const float _pi=3.141;
	const int16_t a_midxyl[3] = {30,40,14};			// alpha circle xpos, ypos ,length
	const int16_t b_midxyl[3] = {100,40,38};		// beta circle xpos, ypos ,length
	const uint16_t aColor = ST7735_YELLOW;
 8002a08:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002a0c:	83fb      	strh	r3, [r7, #30]
	const uint16_t bColor = ST7735_MAGENTA;
 8002a0e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002a12:	83bb      	strh	r3, [r7, #28]
	static int16_t j, XYa[2][aDots], XYb[2][bDots];								// aDots Wertepaare für Winkeldarstellung alpha
	float xgrad, ygrad;

	// Variables for Oszi Function
	const int16_t oszi[3] = {92,28,159};			//oszi ypos-Zero Level, y-amplitude, t_lenght
	const uint16_t osziColor = ST7735_GREY;
 8002a14:	f641 1323 	movw	r3, #6435	; 0x1923
 8002a18:	837b      	strh	r3, [r7, #26]

	static int16_t timepos = 0;


	xgrad = cos(AlphaBeta[0])*a_midxyl[2];
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd fd9a 	bl	8000558 <__aeabi_f2d>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	ec43 2b10 	vmov	d0, r2, r3
 8002a2c:	f004 ff28 	bl	8007880 <cos>
 8002a30:	ec55 4b10 	vmov	r4, r5, d0
 8002a34:	4b8d      	ldr	r3, [pc, #564]	; (8002c6c <AlBeScreen+0x26c>)
 8002a36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fd fd7a 	bl	8000534 <__aeabi_i2d>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4620      	mov	r0, r4
 8002a46:	4629      	mov	r1, r5
 8002a48:	f7fd fdde 	bl	8000608 <__aeabi_dmul>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	f7fe f8b0 	bl	8000bb8 <__aeabi_d2f>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	617b      	str	r3, [r7, #20]
	ygrad = sin(AlphaBeta[0])*a_midxyl[2];
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fd79 	bl	8000558 <__aeabi_f2d>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	ec43 2b10 	vmov	d0, r2, r3
 8002a6e:	f004 ffab 	bl	80079c8 <sin>
 8002a72:	ec55 4b10 	vmov	r4, r5, d0
 8002a76:	4b7d      	ldr	r3, [pc, #500]	; (8002c6c <AlBeScreen+0x26c>)
 8002a78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fd59 	bl	8000534 <__aeabi_i2d>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4620      	mov	r0, r4
 8002a88:	4629      	mov	r1, r5
 8002a8a:	f7fd fdbd 	bl	8000608 <__aeabi_dmul>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	f7fe f88f 	bl	8000bb8 <__aeabi_d2f>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	613b      	str	r3, [r7, #16]
	for (j = 0; j<aDots; j++ )
 8002a9e:	4b74      	ldr	r3, [pc, #464]	; (8002c70 <AlBeScreen+0x270>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	801a      	strh	r2, [r3, #0]
 8002aa4:	e094      	b.n	8002bd0 <AlBeScreen+0x1d0>
	{
		lcd7735_drawPixel(XYa[0][j],XYa[1][j],ST7735_BLACK);
 8002aa6:	4b72      	ldr	r3, [pc, #456]	; (8002c70 <AlBeScreen+0x270>)
 8002aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aac:	461a      	mov	r2, r3
 8002aae:	4b71      	ldr	r3, [pc, #452]	; (8002c74 <AlBeScreen+0x274>)
 8002ab0:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8002ab4:	4b6e      	ldr	r3, [pc, #440]	; (8002c70 <AlBeScreen+0x270>)
 8002ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aba:	4a6e      	ldr	r2, [pc, #440]	; (8002c74 <AlBeScreen+0x274>)
 8002abc:	3306      	adds	r3, #6
 8002abe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f7fe fd95 	bl	80015f4 <lcd7735_drawPixel>
		XYa[0][j] = lround(a_midxyl[0] + xgrad*(2*j - (float)aDots+1)/(aDots-1));			//(aDots-1) da j nur bis aDost -1 läuft
 8002aca:	4b68      	ldr	r3, [pc, #416]	; (8002c6c <AlBeScreen+0x26c>)
 8002acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ad0:	ee07 3a90 	vmov	s15, r3
 8002ad4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ad8:	4b65      	ldr	r3, [pc, #404]	; (8002c70 <AlBeScreen+0x270>)
 8002ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	ee07 3a90 	vmov	s15, r3
 8002ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae8:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002aec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002af0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002af4:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002af8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002afc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b00:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8002b04:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b0c:	ee17 0a90 	vmov	r0, s15
 8002b10:	f7fd fd22 	bl	8000558 <__aeabi_f2d>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	ec43 2b10 	vmov	d0, r2, r3
 8002b1c:	f004 ff0d 	bl	800793a <lround>
 8002b20:	4601      	mov	r1, r0
 8002b22:	4b53      	ldr	r3, [pc, #332]	; (8002c70 <AlBeScreen+0x270>)
 8002b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	b209      	sxth	r1, r1
 8002b2c:	4b51      	ldr	r3, [pc, #324]	; (8002c74 <AlBeScreen+0x274>)
 8002b2e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		XYa[1][j] = lround(a_midxyl[1] + ygrad*(2*j - (float)aDots+1)/(aDots-1));
 8002b32:	4b4e      	ldr	r3, [pc, #312]	; (8002c6c <AlBeScreen+0x26c>)
 8002b34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b38:	ee07 3a90 	vmov	s15, r3
 8002b3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b40:	4b4b      	ldr	r3, [pc, #300]	; (8002c70 <AlBeScreen+0x270>)
 8002b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b50:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002b54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b5c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002b60:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b68:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8002b6c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b74:	ee17 0a90 	vmov	r0, s15
 8002b78:	f7fd fcee 	bl	8000558 <__aeabi_f2d>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	ec43 2b10 	vmov	d0, r2, r3
 8002b84:	f004 fed9 	bl	800793a <lround>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <AlBeScreen+0x270>)
 8002b8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b90:	b211      	sxth	r1, r2
 8002b92:	4a38      	ldr	r2, [pc, #224]	; (8002c74 <AlBeScreen+0x274>)
 8002b94:	3306      	adds	r3, #6
 8002b96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		lcd7735_drawPixel(XYa[0][j],XYa[1][j],aColor);
 8002b9a:	4b35      	ldr	r3, [pc, #212]	; (8002c70 <AlBeScreen+0x270>)
 8002b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b34      	ldr	r3, [pc, #208]	; (8002c74 <AlBeScreen+0x274>)
 8002ba4:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8002ba8:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <AlBeScreen+0x270>)
 8002baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bae:	4a31      	ldr	r2, [pc, #196]	; (8002c74 <AlBeScreen+0x274>)
 8002bb0:	3306      	adds	r3, #6
 8002bb2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002bb6:	8bfa      	ldrh	r2, [r7, #30]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f7fe fd1b 	bl	80015f4 <lcd7735_drawPixel>
	for (j = 0; j<aDots; j++ )
 8002bbe:	4b2c      	ldr	r3, [pc, #176]	; (8002c70 <AlBeScreen+0x270>)
 8002bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	b21a      	sxth	r2, r3
 8002bcc:	4b28      	ldr	r3, [pc, #160]	; (8002c70 <AlBeScreen+0x270>)
 8002bce:	801a      	strh	r2, [r3, #0]
 8002bd0:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <AlBeScreen+0x270>)
 8002bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bd6:	2b05      	cmp	r3, #5
 8002bd8:	f77f af65 	ble.w	8002aa6 <AlBeScreen+0xa6>
	}
	//lcd7735_drawPixel(a_midxyl[0],a_midxyl[1],ST7735_RED);

	xgrad = cos(AlphaBeta[1])*b_midxyl[2];
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3304      	adds	r3, #4
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fd fcb8 	bl	8000558 <__aeabi_f2d>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	ec43 2b10 	vmov	d0, r2, r3
 8002bf0:	f004 fe46 	bl	8007880 <cos>
 8002bf4:	ec55 4b10 	vmov	r4, r5, d0
 8002bf8:	4b1f      	ldr	r3, [pc, #124]	; (8002c78 <AlBeScreen+0x278>)
 8002bfa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd fc98 	bl	8000534 <__aeabi_i2d>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4620      	mov	r0, r4
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	f7fd fcfc 	bl	8000608 <__aeabi_dmul>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	f7fd ffce 	bl	8000bb8 <__aeabi_d2f>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	617b      	str	r3, [r7, #20]
	ygrad = sin(AlphaBeta[1])*b_midxyl[2];
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fc96 	bl	8000558 <__aeabi_f2d>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	ec43 2b10 	vmov	d0, r2, r3
 8002c34:	f004 fec8 	bl	80079c8 <sin>
 8002c38:	ec55 4b10 	vmov	r4, r5, d0
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <AlBeScreen+0x278>)
 8002c3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd fc76 	bl	8000534 <__aeabi_i2d>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	4629      	mov	r1, r5
 8002c50:	f7fd fcda 	bl	8000608 <__aeabi_dmul>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	f7fd ffac 	bl	8000bb8 <__aeabi_d2f>
 8002c60:	4603      	mov	r3, r0
 8002c62:	613b      	str	r3, [r7, #16]
	for (j = 0; j<bDots; j++ )
 8002c64:	4b02      	ldr	r3, [pc, #8]	; (8002c70 <AlBeScreen+0x270>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	801a      	strh	r2, [r3, #0]
 8002c6a:	e09c      	b.n	8002da6 <AlBeScreen+0x3a6>
 8002c6c:	08009080 	.word	0x08009080
 8002c70:	2000024c 	.word	0x2000024c
 8002c74:	20000250 	.word	0x20000250
 8002c78:	08009088 	.word	0x08009088
	{
		lcd7735_drawPixel(XYb[0][j],XYb[1][j],ST7735_BLACK);
 8002c7c:	4b9f      	ldr	r3, [pc, #636]	; (8002efc <AlBeScreen+0x4fc>)
 8002c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c82:	461a      	mov	r2, r3
 8002c84:	4b9e      	ldr	r3, [pc, #632]	; (8002f00 <AlBeScreen+0x500>)
 8002c86:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8002c8a:	4b9c      	ldr	r3, [pc, #624]	; (8002efc <AlBeScreen+0x4fc>)
 8002c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c90:	4a9b      	ldr	r2, [pc, #620]	; (8002f00 <AlBeScreen+0x500>)
 8002c92:	330c      	adds	r3, #12
 8002c94:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f7fe fcaa 	bl	80015f4 <lcd7735_drawPixel>
		XYb[0][j] = lround(b_midxyl[0] + xgrad*(2*j - (float)bDots+1)/(bDots-1));			//(aDots-1) da j nur bis aDost -1 läuft
 8002ca0:	4b98      	ldr	r3, [pc, #608]	; (8002f04 <AlBeScreen+0x504>)
 8002ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ca6:	ee07 3a90 	vmov	s15, r3
 8002caa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cae:	4b93      	ldr	r3, [pc, #588]	; (8002efc <AlBeScreen+0x4fc>)
 8002cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	ee07 3a90 	vmov	s15, r3
 8002cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cbe:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8002cc2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cca:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002cce:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cd2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002cd6:	eeb2 6a06 	vmov.f32	s12, #38	; 0x41300000  11.0
 8002cda:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce2:	ee17 0a90 	vmov	r0, s15
 8002ce6:	f7fd fc37 	bl	8000558 <__aeabi_f2d>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	ec43 2b10 	vmov	d0, r2, r3
 8002cf2:	f004 fe22 	bl	800793a <lround>
 8002cf6:	4601      	mov	r1, r0
 8002cf8:	4b80      	ldr	r3, [pc, #512]	; (8002efc <AlBeScreen+0x4fc>)
 8002cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	b209      	sxth	r1, r1
 8002d02:	4b7f      	ldr	r3, [pc, #508]	; (8002f00 <AlBeScreen+0x500>)
 8002d04:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		XYb[1][j] = lround(b_midxyl[1] + ygrad*(2*j - (float)bDots+1)/(bDots-1));
 8002d08:	4b7e      	ldr	r3, [pc, #504]	; (8002f04 <AlBeScreen+0x504>)
 8002d0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d0e:	ee07 3a90 	vmov	s15, r3
 8002d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d16:	4b79      	ldr	r3, [pc, #484]	; (8002efc <AlBeScreen+0x4fc>)
 8002d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d26:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8002d2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d32:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002d36:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d3a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d3e:	eeb2 6a06 	vmov.f32	s12, #38	; 0x41300000  11.0
 8002d42:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d4a:	ee17 0a90 	vmov	r0, s15
 8002d4e:	f7fd fc03 	bl	8000558 <__aeabi_f2d>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	ec43 2b10 	vmov	d0, r2, r3
 8002d5a:	f004 fdee 	bl	800793a <lround>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	4b66      	ldr	r3, [pc, #408]	; (8002efc <AlBeScreen+0x4fc>)
 8002d62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d66:	b211      	sxth	r1, r2
 8002d68:	4a65      	ldr	r2, [pc, #404]	; (8002f00 <AlBeScreen+0x500>)
 8002d6a:	330c      	adds	r3, #12
 8002d6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		lcd7735_drawPixel(XYb[0][j],XYb[1][j],bColor);
 8002d70:	4b62      	ldr	r3, [pc, #392]	; (8002efc <AlBeScreen+0x4fc>)
 8002d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d76:	461a      	mov	r2, r3
 8002d78:	4b61      	ldr	r3, [pc, #388]	; (8002f00 <AlBeScreen+0x500>)
 8002d7a:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8002d7e:	4b5f      	ldr	r3, [pc, #380]	; (8002efc <AlBeScreen+0x4fc>)
 8002d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d84:	4a5e      	ldr	r2, [pc, #376]	; (8002f00 <AlBeScreen+0x500>)
 8002d86:	330c      	adds	r3, #12
 8002d88:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002d8c:	8bba      	ldrh	r2, [r7, #28]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f7fe fc30 	bl	80015f4 <lcd7735_drawPixel>
	for (j = 0; j<bDots; j++ )
 8002d94:	4b59      	ldr	r3, [pc, #356]	; (8002efc <AlBeScreen+0x4fc>)
 8002d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	b21a      	sxth	r2, r3
 8002da2:	4b56      	ldr	r3, [pc, #344]	; (8002efc <AlBeScreen+0x4fc>)
 8002da4:	801a      	strh	r2, [r3, #0]
 8002da6:	4b55      	ldr	r3, [pc, #340]	; (8002efc <AlBeScreen+0x4fc>)
 8002da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dac:	2b0b      	cmp	r3, #11
 8002dae:	f77f af65 	ble.w	8002c7c <AlBeScreen+0x27c>
	}



// kleines Oszi als Zeitmitschrieb
	int16_t Ya = oszi[0] - (int16_t)(oszi[1] * AlphaBeta[0]/_pi);			// - ST7735 y = 0 upper line inverter direct to y Scale
 8002db2:	4b55      	ldr	r3, [pc, #340]	; (8002f08 <AlBeScreen+0x508>)
 8002db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	4b53      	ldr	r3, [pc, #332]	; (8002f08 <AlBeScreen+0x508>)
 8002dbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	edd3 7a00 	vldr	s15, [r3]
 8002dce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dd2:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8002f0c <AlBeScreen+0x50c>
 8002dd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dde:	ee17 3a90 	vmov	r3, s15
 8002de2:	b21b      	sxth	r3, r3
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	81fb      	strh	r3, [r7, #14]
	int16_t Yb = oszi[0] - (int16_t)(oszi[1] * AlphaBeta[1]/_pi);
 8002dec:	4b46      	ldr	r3, [pc, #280]	; (8002f08 <AlBeScreen+0x508>)
 8002dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	4b44      	ldr	r3, [pc, #272]	; (8002f08 <AlBeScreen+0x508>)
 8002df6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002dfa:	ee07 3a90 	vmov	s15, r3
 8002dfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3304      	adds	r3, #4
 8002e06:	edd3 7a00 	vldr	s15, [r3]
 8002e0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e0e:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8002f0c <AlBeScreen+0x50c>
 8002e12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e1a:	ee17 3a90 	vmov	r3, s15
 8002e1e:	b21b      	sxth	r3, r3
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	81bb      	strh	r3, [r7, #12]
	int16_t osziHight = oszi[1]*2;
 8002e28:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <AlBeScreen+0x508>)
 8002e2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	817b      	strh	r3, [r7, #10]
	lcd7735_drawFastVLine(timepos, (oszi[0]-oszi[1]), osziHight, osziColor);
 8002e36:	4b36      	ldr	r3, [pc, #216]	; (8002f10 <AlBeScreen+0x510>)
 8002e38:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002e3c:	4b32      	ldr	r3, [pc, #200]	; (8002f08 <AlBeScreen+0x508>)
 8002e3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	4b30      	ldr	r3, [pc, #192]	; (8002f08 <AlBeScreen+0x508>)
 8002e46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	b219      	sxth	r1, r3
 8002e52:	8b7b      	ldrh	r3, [r7, #26]
 8002e54:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002e58:	f7fe fc8a 	bl	8001770 <lcd7735_drawFastVLine>
	if (Ya == Yb)
 8002e5c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002e60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d10a      	bne.n	8002e7e <AlBeScreen+0x47e>
	{
		lcd7735_drawPixel(timepos,Ya,ST7735_WHITE);
 8002e68:	4b29      	ldr	r3, [pc, #164]	; (8002f10 <AlBeScreen+0x510>)
 8002e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e6e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe fbbc 	bl	80015f4 <lcd7735_drawPixel>
 8002e7c:	e011      	b.n	8002ea2 <AlBeScreen+0x4a2>
	}
	else
	{
		lcd7735_drawPixel(timepos,Ya,aColor);
 8002e7e:	4b24      	ldr	r3, [pc, #144]	; (8002f10 <AlBeScreen+0x510>)
 8002e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e84:	8bfa      	ldrh	r2, [r7, #30]
 8002e86:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fbb2 	bl	80015f4 <lcd7735_drawPixel>
		lcd7735_drawPixel(timepos,Yb,bColor);
 8002e90:	4b1f      	ldr	r3, [pc, #124]	; (8002f10 <AlBeScreen+0x510>)
 8002e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e96:	8bba      	ldrh	r2, [r7, #28]
 8002e98:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fe fba9 	bl	80015f4 <lcd7735_drawPixel>
	}
	if (++timepos > oszi[2] )
 8002ea2:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <AlBeScreen+0x510>)
 8002ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	b21a      	sxth	r2, r3
 8002eb0:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <AlBeScreen+0x510>)
 8002eb2:	801a      	strh	r2, [r3, #0]
 8002eb4:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <AlBeScreen+0x510>)
 8002eb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002eba:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <AlBeScreen+0x508>)
 8002ebc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	dd02      	ble.n	8002eca <AlBeScreen+0x4ca>
	{
		timepos = 0;
 8002ec4:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <AlBeScreen+0x510>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	801a      	strh	r2, [r3, #0]
		//lcd7735_fillRect(0, oszi[0]-oszi[1], oszi[2]+1, 2*oszi[1], ST7735_GREY);
	}
	lcd7735_drawFastVLine(timepos, oszi[0], oszi[1]/2, ST7735_RED);
 8002eca:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <AlBeScreen+0x510>)
 8002ecc:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002ed0:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <AlBeScreen+0x508>)
 8002ed2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <AlBeScreen+0x508>)
 8002ed8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002edc:	0fda      	lsrs	r2, r3, #31
 8002ede:	4413      	add	r3, r2
 8002ee0:	105b      	asrs	r3, r3, #1
 8002ee2:	b21a      	sxth	r2, r3
 8002ee4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ee8:	f7fe fc42 	bl	8001770 <lcd7735_drawFastVLine>
	return timepos;
 8002eec:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <AlBeScreen+0x510>)
 8002eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef2:	b29b      	uxth	r3, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3720      	adds	r7, #32
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bdb0      	pop	{r4, r5, r7, pc}
 8002efc:	2000024c 	.word	0x2000024c
 8002f00:	20000268 	.word	0x20000268
 8002f04:	08009088 	.word	0x08009088
 8002f08:	08009090 	.word	0x08009090
 8002f0c:	40490625 	.word	0x40490625
 8002f10:	20000298 	.word	0x20000298

08002f14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f14:	480d      	ldr	r0, [pc, #52]	; (8002f4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f18:	f7ff fc2a 	bl	8002770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f1c:	480c      	ldr	r0, [pc, #48]	; (8002f50 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f1e:	490d      	ldr	r1, [pc, #52]	; (8002f54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f20:	4a0d      	ldr	r2, [pc, #52]	; (8002f58 <LoopForever+0xe>)
  movs r3, #0
 8002f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f24:	e002      	b.n	8002f2c <LoopCopyDataInit>

08002f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f2a:	3304      	adds	r3, #4

08002f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f30:	d3f9      	bcc.n	8002f26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f34:	4c0a      	ldr	r4, [pc, #40]	; (8002f60 <LoopForever+0x16>)
  movs r3, #0
 8002f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f38:	e001      	b.n	8002f3e <LoopFillZerobss>

08002f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f3c:	3204      	adds	r2, #4

08002f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f40:	d3fb      	bcc.n	8002f3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f42:	f001 fbef 	bl	8004724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f46:	f7ff f87d 	bl	8002044 <main>

08002f4a <LoopForever>:

LoopForever:
  b LoopForever
 8002f4a:	e7fe      	b.n	8002f4a <LoopForever>
  ldr   r0, =_estack
 8002f4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f54:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002f58:	080096b0 	.word	0x080096b0
  ldr r2, =_sbss
 8002f5c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002f60:	200002ac 	.word	0x200002ac

08002f64 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f64:	e7fe      	b.n	8002f64 <ADC_IRQHandler>
	...

08002f68 <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a10      	ldr	r2, [pc, #64]	; (8002fb4 <gpioVerifyPort+0x4c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d013      	beq.n	8002fa0 <gpioVerifyPort+0x38>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a0f      	ldr	r2, [pc, #60]	; (8002fb8 <gpioVerifyPort+0x50>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00f      	beq.n	8002fa0 <gpioVerifyPort+0x38>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a0e      	ldr	r2, [pc, #56]	; (8002fbc <gpioVerifyPort+0x54>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00b      	beq.n	8002fa0 <gpioVerifyPort+0x38>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <gpioVerifyPort+0x58>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d007      	beq.n	8002fa0 <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a0c      	ldr	r2, [pc, #48]	; (8002fc4 <gpioVerifyPort+0x5c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d003      	beq.n	8002fa0 <gpioVerifyPort+0x38>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a0b      	ldr	r2, [pc, #44]	; (8002fc8 <gpioVerifyPort+0x60>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <gpioVerifyPort+0x3c>
    {
        return true;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <gpioVerifyPort+0x3e>
    }
    return false;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40020000 	.word	0x40020000
 8002fb8:	40020400 	.word	0x40020400
 8002fbc:	40020800 	.word	0x40020800
 8002fc0:	40020c00 	.word	0x40020c00
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40021c00 	.word	0x40021c00

08002fcc <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d02c      	beq.n	8003036 <gpioVerifyPin+0x6a>
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d029      	beq.n	8003036 <gpioVerifyPin+0x6a>
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d026      	beq.n	8003036 <gpioVerifyPin+0x6a>
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d023      	beq.n	8003036 <gpioVerifyPin+0x6a>
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d020      	beq.n	8003036 <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d01d      	beq.n	8003036 <gpioVerifyPin+0x6a>
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	2b06      	cmp	r3, #6
 8002ffe:	d01a      	beq.n	8003036 <gpioVerifyPin+0x6a>
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	2b07      	cmp	r3, #7
 8003004:	d017      	beq.n	8003036 <gpioVerifyPin+0x6a>
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	2b08      	cmp	r3, #8
 800300a:	d014      	beq.n	8003036 <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	2b09      	cmp	r3, #9
 8003010:	d011      	beq.n	8003036 <gpioVerifyPin+0x6a>
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	2b0a      	cmp	r3, #10
 8003016:	d00e      	beq.n	8003036 <gpioVerifyPin+0x6a>
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	2b0b      	cmp	r3, #11
 800301c:	d00b      	beq.n	8003036 <gpioVerifyPin+0x6a>
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	2b0c      	cmp	r3, #12
 8003022:	d008      	beq.n	8003036 <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	2b0d      	cmp	r3, #13
 8003028:	d005      	beq.n	8003036 <gpioVerifyPin+0x6a>
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	2b0e      	cmp	r3, #14
 800302e:	d002      	beq.n	8003036 <gpioVerifyPin+0x6a>
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	2b0f      	cmp	r3, #15
 8003034:	d101      	bne.n	800303a <gpioVerifyPin+0x6e>
    {
        return true;
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <gpioVerifyPin+0x70>
    }
    return false;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d02c      	beq.n	80030b2 <gpioVerifyAltFunc+0x6a>
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d029      	beq.n	80030b2 <gpioVerifyAltFunc+0x6a>
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d026      	beq.n	80030b2 <gpioVerifyAltFunc+0x6a>
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	2b03      	cmp	r3, #3
 8003068:	d023      	beq.n	80030b2 <gpioVerifyAltFunc+0x6a>
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	2b04      	cmp	r3, #4
 800306e:	d020      	beq.n	80030b2 <gpioVerifyAltFunc+0x6a>
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	2b05      	cmp	r3, #5
 8003074:	d01d      	beq.n	80030b2 <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	2b06      	cmp	r3, #6
 800307a:	d01a      	beq.n	80030b2 <gpioVerifyAltFunc+0x6a>
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	2b07      	cmp	r3, #7
 8003080:	d017      	beq.n	80030b2 <gpioVerifyAltFunc+0x6a>
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	2b08      	cmp	r3, #8
 8003086:	d014      	beq.n	80030b2 <gpioVerifyAltFunc+0x6a>
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	2b09      	cmp	r3, #9
 800308c:	d011      	beq.n	80030b2 <gpioVerifyAltFunc+0x6a>
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	2b0a      	cmp	r3, #10
 8003092:	d00e      	beq.n	80030b2 <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	2b0b      	cmp	r3, #11
 8003098:	d00b      	beq.n	80030b2 <gpioVerifyAltFunc+0x6a>
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	2b0c      	cmp	r3, #12
 800309e:	d008      	beq.n	80030b2 <gpioVerifyAltFunc+0x6a>
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	2b0d      	cmp	r3, #13
 80030a4:	d005      	beq.n	80030b2 <gpioVerifyAltFunc+0x6a>
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	2b0e      	cmp	r3, #14
 80030aa:	d002      	beq.n	80030b2 <gpioVerifyAltFunc+0x6a>
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	2b0f      	cmp	r3, #15
 80030b0:	d101      	bne.n	80030b6 <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <gpioVerifyAltFunc+0x70>
    }

    return false;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <gpioVerifyPinMode+0x22>
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d005      	beq.n	80030e6 <gpioVerifyPinMode+0x22>
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d002      	beq.n	80030e6 <gpioVerifyPinMode+0x22>
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d101      	bne.n	80030ea <gpioVerifyPinMode+0x26>
    {
        return true;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <gpioVerifyPinMode+0x28>
    }

    return false;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <gpioVerifyOutputType+0x16>
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <gpioVerifyOutputType+0x1a>
    {
        return true;
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <gpioVerifyOutputType+0x1c>
    }

    return false;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <gpioVerifyPushPullMode+0x1c>
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d002      	beq.n	800313c <gpioVerifyPushPullMode+0x1c>
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d101      	bne.n	8003140 <gpioVerifyPushPullMode+0x20>
    {
        return true;
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <gpioVerifyPushPullMode+0x22>
    }
    return false;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff ff05 	bl	8002f68 <gpioVerifyPort>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d042      	beq.n	80031ea <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a24      	ldr	r2, [pc, #144]	; (80031f8 <gpioInitPort+0xa8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d106      	bne.n	800317a <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800316c:	4b23      	ldr	r3, [pc, #140]	; (80031fc <gpioInitPort+0xac>)
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	4a22      	ldr	r2, [pc, #136]	; (80031fc <gpioInitPort+0xac>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	6313      	str	r3, [r2, #48]	; 0x30
 8003178:	e035      	b.n	80031e6 <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a20      	ldr	r2, [pc, #128]	; (8003200 <gpioInitPort+0xb0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d106      	bne.n	8003190 <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8003182:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <gpioInitPort+0xac>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <gpioInitPort+0xac>)
 8003188:	f043 0302 	orr.w	r3, r3, #2
 800318c:	6313      	str	r3, [r2, #48]	; 0x30
 800318e:	e02a      	b.n	80031e6 <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a1c      	ldr	r2, [pc, #112]	; (8003204 <gpioInitPort+0xb4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d106      	bne.n	80031a6 <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8003198:	4b18      	ldr	r3, [pc, #96]	; (80031fc <gpioInitPort+0xac>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	4a17      	ldr	r2, [pc, #92]	; (80031fc <gpioInitPort+0xac>)
 800319e:	f043 0304 	orr.w	r3, r3, #4
 80031a2:	6313      	str	r3, [r2, #48]	; 0x30
 80031a4:	e01f      	b.n	80031e6 <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a17      	ldr	r2, [pc, #92]	; (8003208 <gpioInitPort+0xb8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d106      	bne.n	80031bc <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80031ae:	4b13      	ldr	r3, [pc, #76]	; (80031fc <gpioInitPort+0xac>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	4a12      	ldr	r2, [pc, #72]	; (80031fc <gpioInitPort+0xac>)
 80031b4:	f043 0308 	orr.w	r3, r3, #8
 80031b8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ba:	e014      	b.n	80031e6 <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a13      	ldr	r2, [pc, #76]	; (800320c <gpioInitPort+0xbc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d106      	bne.n	80031d2 <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80031c4:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <gpioInitPort+0xac>)
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	4a0c      	ldr	r2, [pc, #48]	; (80031fc <gpioInitPort+0xac>)
 80031ca:	f043 0310 	orr.w	r3, r3, #16
 80031ce:	6313      	str	r3, [r2, #48]	; 0x30
 80031d0:	e009      	b.n	80031e6 <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a0e      	ldr	r2, [pc, #56]	; (8003210 <gpioInitPort+0xc0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d105      	bne.n	80031e6 <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <gpioInitPort+0xac>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	4a07      	ldr	r2, [pc, #28]	; (80031fc <gpioInitPort+0xac>)
 80031e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e4:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e001      	b.n	80031ee <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 80031ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40020000 	.word	0x40020000
 80031fc:	40023800 	.word	0x40023800
 8003200:	40020400 	.word	0x40020400
 8003204:	40020800 	.word	0x40020800
 8003208:	40020c00 	.word	0x40020c00
 800320c:	40021000 	.word	0x40021000
 8003210:	40021c00 	.word	0x40021c00

08003214 <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fea3 	bl	8002f68 <gpioVerifyPort>
 8003222:	4603      	mov	r3, r0
 8003224:	f083 0301 	eor.w	r3, r3, #1
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	e041      	b.n	80032b8 <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <gpioSelectPort+0xac>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d106      	bne.n	800324a <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800323c:	4b21      	ldr	r3, [pc, #132]	; (80032c4 <gpioSelectPort+0xb0>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	4a20      	ldr	r2, [pc, #128]	; (80032c4 <gpioSelectPort+0xb0>)
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	6313      	str	r3, [r2, #48]	; 0x30
 8003248:	e035      	b.n	80032b6 <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <gpioSelectPort+0xb4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d106      	bne.n	8003260 <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8003252:	4b1c      	ldr	r3, [pc, #112]	; (80032c4 <gpioSelectPort+0xb0>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a1b      	ldr	r2, [pc, #108]	; (80032c4 <gpioSelectPort+0xb0>)
 8003258:	f043 0302 	orr.w	r3, r3, #2
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	e02a      	b.n	80032b6 <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a1a      	ldr	r2, [pc, #104]	; (80032cc <gpioSelectPort+0xb8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d106      	bne.n	8003276 <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8003268:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <gpioSelectPort+0xb0>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <gpioSelectPort+0xb0>)
 800326e:	f043 0304 	orr.w	r3, r3, #4
 8003272:	6313      	str	r3, [r2, #48]	; 0x30
 8003274:	e01f      	b.n	80032b6 <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a15      	ldr	r2, [pc, #84]	; (80032d0 <gpioSelectPort+0xbc>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d106      	bne.n	800328c <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <gpioSelectPort+0xb0>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a10      	ldr	r2, [pc, #64]	; (80032c4 <gpioSelectPort+0xb0>)
 8003284:	f043 0308 	orr.w	r3, r3, #8
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	e014      	b.n	80032b6 <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a11      	ldr	r2, [pc, #68]	; (80032d4 <gpioSelectPort+0xc0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d106      	bne.n	80032a2 <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <gpioSelectPort+0xb0>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	4a0a      	ldr	r2, [pc, #40]	; (80032c4 <gpioSelectPort+0xb0>)
 800329a:	f043 0310 	orr.w	r3, r3, #16
 800329e:	6313      	str	r3, [r2, #48]	; 0x30
 80032a0:	e009      	b.n	80032b6 <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a0c      	ldr	r2, [pc, #48]	; (80032d8 <gpioSelectPort+0xc4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d105      	bne.n	80032b6 <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <gpioSelectPort+0xb0>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	4a05      	ldr	r2, [pc, #20]	; (80032c4 <gpioSelectPort+0xb0>)
 80032b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b4:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40020000 	.word	0x40020000
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40020400 	.word	0x40020400
 80032cc:	40020800 	.word	0x40020800
 80032d0:	40020c00 	.word	0x40020c00
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40021c00 	.word	0x40021c00

080032dc <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	70fb      	strb	r3, [r7, #3]
 80032e8:	4613      	mov	r3, r2
 80032ea:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff fe3b 	bl	8002f68 <gpioVerifyPort>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f083 0301 	eor.w	r3, r3, #1
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003302:	e032      	b.n	800336a <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff fe60 	bl	8002fcc <gpioVerifyPin>
 800330c:	4603      	mov	r3, r0
 800330e:	f083 0301 	eor.w	r3, r3, #1
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8003318:	f06f 0301 	mvn.w	r3, #1
 800331c:	e025      	b.n	800336a <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 800331e:	78bb      	ldrb	r3, [r7, #2]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fecf 	bl	80030c4 <gpioVerifyPinMode>
 8003326:	4603      	mov	r3, r0
 8003328:	f083 0301 	eor.w	r3, r3, #1
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 8003332:	f06f 0305 	mvn.w	r3, #5
 8003336:	e018      	b.n	800336a <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	0052      	lsls	r2, r2, #1
 8003340:	2103      	movs	r1, #3
 8003342:	fa01 f202 	lsl.w	r2, r1, r2
 8003346:	43d2      	mvns	r2, r2
 8003348:	401a      	ands	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 800334e:	78bb      	ldrb	r3, [r7, #2]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d009      	beq.n	8003368 <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	78b9      	ldrb	r1, [r7, #2]
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	0052      	lsls	r2, r2, #1
 800335e:	fa01 f202 	lsl.w	r2, r1, r2
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	460b      	mov	r3, r1
 800337c:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff fdf2 	bl	8002f68 <gpioVerifyPort>
 8003384:	4603      	mov	r3, r0
 8003386:	f083 0301 	eor.w	r3, r3, #1
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8003390:	f04f 33ff 	mov.w	r3, #4294967295
 8003394:	e014      	b.n	80033c0 <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff fe17 	bl	8002fcc <gpioVerifyPin>
 800339e:	4603      	mov	r3, r0
 80033a0:	f083 0301 	eor.w	r3, r3, #1
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 80033aa:	f06f 0301 	mvn.w	r3, #1
 80033ae:	e007      	b.n	80033c0 <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	2201      	movs	r2, #1
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff fdc7 	bl	8002f68 <gpioVerifyPort>
 80033da:	4603      	mov	r3, r0
 80033dc:	f083 0301 	eor.w	r3, r3, #1
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 80033e6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ea:	e015      	b.n	8003418 <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff fdec 	bl	8002fcc <gpioVerifyPin>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f083 0301 	eor.w	r3, r3, #1
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8003400:	f06f 0301 	mvn.w	r3, #1
 8003404:	e008      	b.n	8003418 <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	3310      	adds	r3, #16
 800340a:	2201      	movs	r2, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	461a      	mov	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	70fb      	strb	r3, [r7, #3]
 800342c:	4613      	mov	r3, r2
 800342e:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff fd99 	bl	8002f68 <gpioVerifyPort>
 8003436:	4603      	mov	r3, r0
 8003438:	f083 0301 	eor.w	r3, r3, #1
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 8003442:	f04f 33ff 	mov.w	r3, #4294967295
 8003446:	e050      	b.n	80034ea <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff fdbe 	bl	8002fcc <gpioVerifyPin>
 8003450:	4603      	mov	r3, r0
 8003452:	f083 0301 	eor.w	r3, r3, #1
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 800345c:	f06f 0301 	mvn.w	r3, #1
 8003460:	e043      	b.n	80034ea <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 8003462:	78bb      	ldrb	r3, [r7, #2]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fdef 	bl	8003048 <gpioVerifyAltFunc>
 800346a:	4603      	mov	r3, r0
 800346c:	f083 0301 	eor.w	r3, r3, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 8003476:	f06f 0302 	mvn.w	r3, #2
 800347a:	e036      	b.n	80034ea <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	2202      	movs	r2, #2
 8003480:	4619      	mov	r1, r3
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff ff2a 	bl	80032dc <gpioSelectPinMode>

	if (pin <= PIN7)
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	2b07      	cmp	r3, #7
 800348c:	d815      	bhi.n	80034ba <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	0092      	lsls	r2, r2, #2
 8003496:	210f      	movs	r1, #15
 8003498:	fa01 f202 	lsl.w	r2, r1, r2
 800349c:	43d2      	mvns	r2, r2
 800349e:	401a      	ands	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	78b9      	ldrb	r1, [r7, #2]
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	0092      	lsls	r2, r2, #2
 80034ae:	fa01 f202 	lsl.w	r2, r1, r2
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	621a      	str	r2, [r3, #32]
 80034b8:	e016      	b.n	80034e8 <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	3a08      	subs	r2, #8
 80034c2:	0092      	lsls	r2, r2, #2
 80034c4:	210f      	movs	r1, #15
 80034c6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ca:	43d2      	mvns	r2, r2
 80034cc:	401a      	ands	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	78b9      	ldrb	r1, [r7, #2]
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	3a08      	subs	r2, #8
 80034dc:	0092      	lsls	r2, r2, #2
 80034de:	fa01 f202 	lsl.w	r2, r1, r2
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	460b      	mov	r3, r1
 80034fc:	70fb      	strb	r3, [r7, #3]
 80034fe:	4613      	mov	r3, r2
 8003500:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff fd30 	bl	8002f68 <gpioVerifyPort>
 8003508:	4603      	mov	r3, r0
 800350a:	f083 0301 	eor.w	r3, r3, #1
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 8003514:	f04f 33ff 	mov.w	r3, #4294967295
 8003518:	e030      	b.n	800357c <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fd55 	bl	8002fcc <gpioVerifyPin>
 8003522:	4603      	mov	r3, r0
 8003524:	f083 0301 	eor.w	r3, r3, #1
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 800352e:	f06f 0301 	mvn.w	r3, #1
 8003532:	e023      	b.n	800357c <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 8003534:	78bb      	ldrb	r3, [r7, #2]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fdde 	bl	80030f8 <gpioVerifyOutputType>
 800353c:	4603      	mov	r3, r0
 800353e:	f083 0301 	eor.w	r3, r3, #1
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 8003548:	f06f 0303 	mvn.w	r3, #3
 800354c:	e016      	b.n	800357c <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	2101      	movs	r1, #1
 8003556:	fa01 f202 	lsl.w	r2, r1, r2
 800355a:	43d2      	mvns	r2, r2
 800355c:	401a      	ands	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 8003562:	78bb      	ldrb	r3, [r7, #2]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d108      	bne.n	800357a <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	78fa      	ldrb	r2, [r7, #3]
 800356e:	2101      	movs	r1, #1
 8003570:	fa01 f202 	lsl.w	r2, r1, r2
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	70fb      	strb	r3, [r7, #3]
 8003590:	4613      	mov	r3, r2
 8003592:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff fce7 	bl	8002f68 <gpioVerifyPort>
 800359a:	4603      	mov	r3, r0
 800359c:	f083 0301 	eor.w	r3, r3, #1
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295
 80035aa:	e044      	b.n	8003636 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fd0c 	bl	8002fcc <gpioVerifyPin>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f083 0301 	eor.w	r3, r3, #1
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 80035c0:	f06f 0301 	mvn.w	r3, #1
 80035c4:	e037      	b.n	8003636 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 80035c6:	78bb      	ldrb	r3, [r7, #2]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fda9 	bl	8003120 <gpioVerifyPushPullMode>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f083 0301 	eor.w	r3, r3, #1
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 80035da:	f06f 0306 	mvn.w	r3, #6
 80035de:	e02a      	b.n	8003636 <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	0052      	lsls	r2, r2, #1
 80035e8:	2103      	movs	r1, #3
 80035ea:	fa01 f202 	lsl.w	r2, r1, r2
 80035ee:	43d2      	mvns	r2, r2
 80035f0:	401a      	ands	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d11a      	bne.n	8003634 <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 80035fe:	78bb      	ldrb	r3, [r7, #2]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d10a      	bne.n	800361a <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	0052      	lsls	r2, r2, #1
 800360c:	2101      	movs	r1, #1
 800360e:	fa01 f202 	lsl.w	r2, r1, r2
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	60da      	str	r2, [r3, #12]
 8003618:	e00c      	b.n	8003634 <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 800361a:	78bb      	ldrb	r3, [r7, #2]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d109      	bne.n	8003634 <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	78fa      	ldrb	r2, [r7, #3]
 8003626:	0052      	lsls	r2, r2, #1
 8003628:	2102      	movs	r1, #2
 800362a:	fa01 f202 	lsl.w	r2, r1, r2
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <__i2c_start>:
#define I2C_RESET_POS(i2c)                  ( { i2c->CR1 &= ~I2C_CR1_POS_Msk; } )



static inline void __i2c_start(I2C_TypeDef *i2c)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_START;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	601a      	str	r2, [r3, #0]
	while (!(i2c->SR1 & I2C_SR1_SB));
 8003652:	bf00      	nop
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f9      	beq.n	8003654 <__i2c_start+0x16>
}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <__i2c_stop>:

static inline void __i2c_stop(I2C_TypeDef *i2c)
 {
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 	i2c->CR1 |= I2C_CR1_STOP;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	601a      	str	r2, [r3, #0]
 	while (!(i2c->SR2 & I2C_SR2_BUSY));
 8003682:	bf00      	nop
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f9      	beq.n	8003684 <__i2c_stop+0x16>
 }
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <__i2c_dummy_read_SR1_SR2>:

static inline void __i2c_dummy_read_SR1_SR2(I2C_TypeDef *i2c)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
	while (!(i2c->SR1) | !(i2c->SR2))
 80036a6:	bf00      	nop
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bf0c      	ite	eq
 80036be:	2301      	moveq	r3, #1
 80036c0:	2300      	movne	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	4313      	orrs	r3, r2
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1ed      	bne.n	80036a8 <__i2c_dummy_read_SR1_SR2+0xa>
	{
	;
	}
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <__i2c_Chk_TX_empty>:


static inline void __i2c_Chk_TX_empty(I2C_TypeDef *i2c)
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]

	uint32_t simpleDelay;
	while(!(i2c->SR1 & I2C_SR1_TXE));
 80036e2:	bf00      	nop
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f9      	beq.n	80036e4 <__i2c_Chk_TX_empty+0xa>
	for (simpleDelay = 0UL; simpleDelay < 20UL; simpleDelay++)
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	e002      	b.n	80036fc <__i2c_Chk_TX_empty+0x22>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	3301      	adds	r3, #1
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b13      	cmp	r3, #19
 8003700:	d9f9      	bls.n	80036f6 <__i2c_Chk_TX_empty+0x1c>
	{
		;
	}

}
 8003702:	bf00      	nop
 8003704:	bf00      	nop
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <i2cVerifyDutyCycle>:

/**
 * Function to verify the I2C duty cycle.
 */
static bool i2cVerifyDutyCycle(I2C_DUTY_CYCLE_t dc)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
    if ((I2C_DUTY_CYCLE_2 == dc) || (IC2_DUTY_CYCLE_16_9 == dc))
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <i2cVerifyDutyCycle+0x16>
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <i2cVerifyDutyCycle+0x1a>
    {
        return true;
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <i2cVerifyDutyCycle+0x1c>
    }
    return false;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <i2cSelectI2C>:
 *
 * @param  *i2c   : Pointer to the I2C component
 *
*/
I2C_RETURN_CODE_t i2cSelectI2C(I2C_TypeDef *i2c)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
    // Activate bus clock
    if (I2C1 == i2c)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a13      	ldr	r2, [pc, #76]	; (8003790 <i2cSelectI2C+0x58>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d106      	bne.n	8003756 <i2cSelectI2C+0x1e>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8003748:	4b12      	ldr	r3, [pc, #72]	; (8003794 <i2cSelectI2C+0x5c>)
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	4a11      	ldr	r2, [pc, #68]	; (8003794 <i2cSelectI2C+0x5c>)
 800374e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003752:	6413      	str	r3, [r2, #64]	; 0x40
 8003754:	e014      	b.n	8003780 <i2cSelectI2C+0x48>
    }
    else if (I2C2 == i2c)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a0f      	ldr	r2, [pc, #60]	; (8003798 <i2cSelectI2C+0x60>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d106      	bne.n	800376c <i2cSelectI2C+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <i2cSelectI2C+0x5c>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	4a0c      	ldr	r2, [pc, #48]	; (8003794 <i2cSelectI2C+0x5c>)
 8003764:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003768:	6413      	str	r3, [r2, #64]	; 0x40
 800376a:	e009      	b.n	8003780 <i2cSelectI2C+0x48>
    }
    else if (I2C3 == i2c)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a0b      	ldr	r2, [pc, #44]	; (800379c <i2cSelectI2C+0x64>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d105      	bne.n	8003780 <i2cSelectI2C+0x48>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8003774:	4b07      	ldr	r3, [pc, #28]	; (8003794 <i2cSelectI2C+0x5c>)
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	4a06      	ldr	r2, [pc, #24]	; (8003794 <i2cSelectI2C+0x5c>)
 800377a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800377e:	6413      	str	r3, [r2, #64]	; 0x40
    }

    return I2C_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40005400 	.word	0x40005400
 8003794:	40023800 	.word	0x40023800
 8003798:	40005800 	.word	0x40005800
 800379c:	40005c00 	.word	0x40005c00

080037a0 <i2cSetClkSpd>:

/**
 * Function to set the I2C clock frequency.
 */
I2C_RETURN_CODE_t i2cSetClkSpd(I2C_TypeDef *i2c, I2C_CLOCKSPEED_t spd)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	70fb      	strb	r3, [r7, #3]
    if ( (I2C_CLOCK_50 == spd) || (I2C_CLOCK_100 == spd) ||
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00b      	beq.n	80037ca <i2cSetClkSpd+0x2a>
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d008      	beq.n	80037ca <i2cSetClkSpd+0x2a>
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d005      	beq.n	80037ca <i2cSetClkSpd+0x2a>
    	 (I2C_CLOCK_200 == spd)|| (I2C_CLOCK_400 == spd) || (I2C_CLOCK_1Mz == spd)		)
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d002      	beq.n	80037ca <i2cSetClkSpd+0x2a>
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d160      	bne.n	800388c <i2cSetClkSpd+0xec>
    {
    	I2C_WAIT_BUSY(i2c);
 80037ca:	bf00      	nop
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f9      	bne.n	80037cc <i2cSetClkSpd+0x2c>
    	i2c->CCR = 0x00;                    // Reset Clock Control Register
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	61da      	str	r2, [r3, #28]
    	i2c->CCR &= ~I2C_CCR_CCR_Msk;    	// deactive bus clock bits
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80037e6:	f023 030f 	bic.w	r3, r3, #15
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	61d3      	str	r3, [r2, #28]
    	i2c->CCR &= ~I2C_CCR_FS_Msk;    	// deactive fastMode I2C bus clock
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	61da      	str	r2, [r3, #28]
    	switch (spd)
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d836      	bhi.n	800386e <i2cSetClkSpd+0xce>
 8003800:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <i2cSetClkSpd+0x68>)
 8003802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003806:	bf00      	nop
 8003808:	0800381d 	.word	0x0800381d
 800380c:	0800382b 	.word	0x0800382b
 8003810:	08003839 	.word	0x08003839
 8003814:	08003847 	.word	0x08003847
 8003818:	08003855 	.word	0x08003855
    	{
    		case I2C_CLOCK_50:
			{

				i2c->CCR |= 0x00A0;				// Select 50 kHz bus clock
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	61da      	str	r2, [r3, #28]
				break;
 8003828:	e02e      	b.n	8003888 <i2cSetClkSpd+0xe8>
			}
    		case I2C_CLOCK_100:
    		{
    			i2c->CCR |= 0x0050;				// Select 100 kHz bus clock
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	61da      	str	r2, [r3, #28]
    			break;
 8003836:	e027      	b.n	8003888 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_200:
    			{
       				i2c->CCR |= 0x0028;			// Select 200 kHz bus clock
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	61da      	str	r2, [r3, #28]
    				break;
 8003844:	e020      	b.n	8003888 <i2cSetClkSpd+0xe8>
    			}
    		case I2C_CLOCK_400:
    		{
     			i2c->CCR |= 0x0014;				// Select 400 kHz bus clock
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f043 0214 	orr.w	r2, r3, #20
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	61da      	str	r2, [r3, #28]
    			break;
 8003852:	e019      	b.n	8003888 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_1Mz:
			{
				i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	61da      	str	r2, [r3, #28]
				i2c->CCR |= 0x005;				// Select 800 kHz bus clock
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	f043 0205 	orr.w	r2, r3, #5
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	61da      	str	r2, [r3, #28]
				break;
 800386c:	e00c      	b.n	8003888 <i2cSetClkSpd+0xe8>
			}
    		default:
    		{
    			i2c->CCR &= ~I2C_CCR_FS_Msk;    // Select 100 kHz bus clock
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	61da      	str	r2, [r3, #28]
    			i2c->CCR |= 0x0050;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	61da      	str	r2, [r3, #28]
    			break;
 8003886:	bf00      	nop
    		}
    	}
    	return I2C_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	e001      	b.n	8003890 <i2cSetClkSpd+0xf0>
    }
    return I2C_INVALID_CLOCK_SPEED;
 800388c:	f06f 033d 	mvn.w	r3, #61	; 0x3d
}
 8003890:	4618      	mov	r0, r3
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <i2cInitI2C>:

I2C_RETURN_CODE_t i2cInitI2C(I2C_TypeDef *i2c, I2C_DUTY_CYCLE_t duty, uint8_t trise, I2C_CLOCKSPEED_t clock)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	4608      	mov	r0, r1
 80038a6:	4611      	mov	r1, r2
 80038a8:	461a      	mov	r2, r3
 80038aa:	4603      	mov	r3, r0
 80038ac:	70fb      	strb	r3, [r7, #3]
 80038ae:	460b      	mov	r3, r1
 80038b0:	70bb      	strb	r3, [r7, #2]
 80038b2:	4613      	mov	r3, r2
 80038b4:	707b      	strb	r3, [r7, #1]
	uint32_t pclock;
	if (i2cVerifyDutyCycle(duty) != true)
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff ff29 	bl	8003710 <i2cVerifyDutyCycle>
 80038be:	4603      	mov	r3, r0
 80038c0:	f083 0301 	eor.w	r3, r3, #1
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <i2cInitI2C+0x34>
    {
        return I2C_INVALID_DUTY_CYCLE;
 80038ca:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 80038ce:	e02f      	b.n	8003930 <i2cInitI2C+0x94>
    }

    i2c->CR1 = I2C_CR1_SWRST;			// reset and clear reg
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80038d6:	601a      	str	r2, [r3, #0]
    i2c->CR1 = 0x0000;                  // Reset old CR1 settings
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
    i2c->CR1 &= ~I2C_CR1_PE_Msk;        // Disable I2C component
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 0201 	bic.w	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	601a      	str	r2, [r3, #0]

    pclock = rccGetPclk1Freq();
 80038ea:	f000 fbad 	bl	8004048 <rccGetPclk1Freq>
 80038ee:	60f8      	str	r0, [r7, #12]
    i2c->CR2 = pclock / 1000000;		//
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a11      	ldr	r2, [pc, #68]	; (8003938 <i2cInitI2C+0x9c>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	0c9a      	lsrs	r2, r3, #18
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	605a      	str	r2, [r3, #4]

    i2c->TRISE = 0x0011;                // Set max. rise time
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2211      	movs	r2, #17
 8003902:	621a      	str	r2, [r3, #32]

    i2c->OAR1 |= (0x00 << 1);			 // set own address to 00 - not really used in master mode
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	609a      	str	r2, [r3, #8]
    i2c->OAR1 |= (1 << 14); 			// bit 14 should be kept at 1 according to the datasheet
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	609a      	str	r2, [r3, #8]

    i2cSetClkSpd(i2c, clock);			// set I2C Clockrate
 8003918:	787b      	ldrb	r3, [r7, #1]
 800391a:	4619      	mov	r1, r3
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff ff3f 	bl	80037a0 <i2cSetClkSpd>

    i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f043 0201 	orr.w	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	601a      	str	r2, [r3, #0]

    return I2C_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	431bde83 	.word	0x431bde83

0800393c <i2cSendByteToSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * The text written in <b>bold</b> letters is required to address a device-specific register.<br>
 */
I2C_RETURN_CODE_t i2cSendByteToSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t data)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	4608      	mov	r0, r1
 8003946:	4611      	mov	r1, r2
 8003948:	461a      	mov	r2, r3
 800394a:	4603      	mov	r3, r0
 800394c:	70fb      	strb	r3, [r7, #3]
 800394e:	460b      	mov	r3, r1
 8003950:	70bb      	strb	r3, [r7, #2]
 8003952:	4613      	mov	r3, r2
 8003954:	707b      	strb	r3, [r7, #1]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 8003956:	bf00      	nop
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f9      	bne.n	8003958 <i2cSendByteToSlaveReg+0x1c>

    __i2c_start(i2c);					 // send start condition
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff fe6a 	bl	800363e <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 800396a:	bf00      	nop
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f9      	beq.n	800396c <i2cSendByteToSlaveReg+0x30>

    i2c->DR = saddr<<1;                    // Send slave 7Bit address
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	461a      	mov	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8003982:	bf00      	nop
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f9      	beq.n	8003984 <i2cSendByteToSlaveReg+0x48>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff fe84 	bl	800369e <__i2c_dummy_read_SR1_SR2>
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fe9f 	bl	80036da <__i2c_Chk_TX_empty>

    i2c->DR = regAddr;                  // Set the address of the slave register
 800399c:	78ba      	ldrb	r2, [r7, #2]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff fe99 	bl	80036da <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff fe78 	bl	800369e <__i2c_dummy_read_SR1_SR2>
    i2c->DR = data;                     // Send data
 80039ae:	787a      	ldrb	r2, [r7, #1]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	611a      	str	r2, [r3, #16]
    I2C_BYTE_TRANSFER_FINISHED(i2c);    // Wait until BTF Flag is set
 80039b4:	bf00      	nop
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f9      	beq.n	80039b6 <i2cSendByteToSlaveReg+0x7a>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fe6b 	bl	800369e <__i2c_dummy_read_SR1_SR2>
      __i2c_stop(i2c);					  // send stop condition
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff fe50 	bl	800366e <__i2c_stop>


    return I2C_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <i2cBurstWrite>:
 * @note
 * Failure handling is not yet implemented
 *
*/
I2C_RETURN_CODE_t i2cBurstWrite(I2C_TypeDef *i2c, uint8_t saddr, uint8_t *data, uint8_t len)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	607a      	str	r2, [r7, #4]
 80039e2:	461a      	mov	r2, r3
 80039e4:	460b      	mov	r3, r1
 80039e6:	72fb      	strb	r3, [r7, #11]
 80039e8:	4613      	mov	r3, r2
 80039ea:	72bb      	strb	r3, [r7, #10]
    uint8_t numBytes = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	75fb      	strb	r3, [r7, #23]

    I2C_WAIT_BUSY(i2c);                 // Check whether the I2C bus is busy
 80039f0:	bf00      	nop
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f9      	bne.n	80039f2 <i2cBurstWrite+0x1a>
    I2C_RESET_POS(i2c);                 // May only be active in 16-bit mode
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	601a      	str	r2, [r3, #0]
    __i2c_start(i2c);					 // send start condition
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f7ff fe17 	bl	800363e <__i2c_start>

    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8003a10:	bf00      	nop
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f9      	beq.n	8003a12 <i2cBurstWrite+0x3a>

    i2c->DR = saddr<<1;                 // Send 7Bit slave address
 8003a1e:	7afb      	ldrb	r3, [r7, #11]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	461a      	mov	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8003a28:	bf00      	nop
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f9      	beq.n	8003a2a <i2cBurstWrite+0x52>

    while (numBytes < len)
 8003a36:	e016      	b.n	8003a66 <i2cBurstWrite+0x8e>
    {
        __i2c_Chk_TX_empty(i2c);
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7ff fe4e 	bl	80036da <__i2c_Chk_TX_empty>
        __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f7ff fe2d 	bl	800369e <__i2c_dummy_read_SR1_SR2>
        i2c->DR = *data++;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	611a      	str	r2, [r3, #16]
        I2C_BYTE_TRANSFER_FINISHED(i2c);   // Wait until BTF Flag is set
 8003a52:	bf00      	nop
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f9      	beq.n	8003a54 <i2cBurstWrite+0x7c>

        numBytes++;
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	3301      	adds	r3, #1
 8003a64:	75fb      	strb	r3, [r7, #23]
    while (numBytes < len)
 8003a66:	7dfa      	ldrb	r2, [r7, #23]
 8003a68:	7abb      	ldrb	r3, [r7, #10]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d3e4      	bcc.n	8003a38 <i2cBurstWrite+0x60>
    }

    I2C_BYTE_TRANSFER_FINISHED(i2c);   // Wait until BTF Flag is set
 8003a6e:	bf00      	nop
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f9      	beq.n	8003a70 <i2cBurstWrite+0x98>
    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f7ff fe0e 	bl	800369e <__i2c_dummy_read_SR1_SR2>
    __i2c_stop(i2c);					  // send stop condition
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f7ff fdf3 	bl	800366e <__i2c_stop>

    return I2C_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <i2cReadByteFromSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 *
 */
I2C_RETURN_CODE_t i2cReadByteFromSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	72fb      	strb	r3, [r7, #11]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	72bb      	strb	r3, [r7, #10]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 8003aa4:	bf00      	nop
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f9      	bne.n	8003aa6 <i2cReadByteFromSlaveReg+0x14>

    __i2c_start(i2c);					 // send start condition
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f7ff fdc3 	bl	800363e <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8003ab8:	bf00      	nop
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f9      	beq.n	8003aba <i2cReadByteFromSlaveReg+0x28>

    i2c->DR = saddr<<1;                    // Send with bit 0 = '0'
 8003ac6:	7afb      	ldrb	r3, [r7, #11]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	461a      	mov	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8003ad0:	bf00      	nop
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f9      	beq.n	8003ad2 <i2cReadByteFromSlaveReg+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f7ff fddd 	bl	800369e <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                  // Send address of the functional register
 8003ae4:	7aba      	ldrb	r2, [r7, #10]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         	// Wait until transmit buffer is empty
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f7ff fdf5 	bl	80036da <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f7ff fdd4 	bl	800369e <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 8003b02:	bf00      	nop
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f9      	beq.n	8003b04 <i2cReadByteFromSlaveReg+0x72>

    i2c->DR = (saddr<<1) | 1;           // Resend slave addr with bit 0 = '1'
 8003b10:	7afb      	ldrb	r3, [r7, #11]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	461a      	mov	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8003b1e:	bf00      	nop
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0f9      	beq.n	8003b20 <i2cReadByteFromSlaveReg+0x8e>

    I2C_RESET_ACK(i2c);                 // Disable Acknowledge
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	601a      	str	r2, [r3, #0]

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f7ff fdb0 	bl	800369e <__i2c_dummy_read_SR1_SR2>
    __i2c_stop(i2c);
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f7ff fd95 	bl	800366e <__i2c_stop>

    I2C_CHECK_RXBUF_NOT_EMPTY(i2c);     // Wait until receive buffer is no longer empty
 8003b44:	bf00      	nop
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f9      	beq.n	8003b46 <i2cReadByteFromSlaveReg+0xb4>
    *data++ = i2c->DR;                  // Write data in variable
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6919      	ldr	r1, [r3, #16]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	b2ca      	uxtb	r2, r1
 8003b5e:	701a      	strb	r2, [r3, #0]

    return I2C_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <i2cBurstRegRead>:
 * <br>
 * <b>Affected register and bit(s)</b><br>

 */
I2C_RETURN_CODE_t i2cBurstRegRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data, uint8_t num)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	607b      	str	r3, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	72fb      	strb	r3, [r7, #11]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 8003b7c:	bf00      	nop
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f9      	bne.n	8003b7e <i2cBurstRegRead+0x14>
    //I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer

    __i2c_start(i2c);					 // send start condition
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f7ff fd57 	bl	800363e <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8003b90:	bf00      	nop
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f9      	beq.n	8003b92 <i2cBurstRegRead+0x28>

    i2c->DR = saddr<<1;                        // Send with bit 0 = '0'
 8003b9e:	7afb      	ldrb	r3, [r7, #11]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8003ba8:	bf00      	nop
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f9      	beq.n	8003baa <i2cBurstRegRead+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f7ff fd71 	bl	800369e <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                      // Send address of the functional register
 8003bbc:	7aba      	ldrb	r2, [r7, #10]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	611a      	str	r2, [r3, #16]

    __i2c_Chk_TX_empty(i2c);             // Wait until transmit buffer is empty
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f7ff fd89 	bl	80036da <__i2c_Chk_TX_empty>
    I2C_BYTE_TRANSFER_FINISHED(i2c);
 8003bc8:	bf00      	nop
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f9      	beq.n	8003bca <i2cBurstRegRead+0x60>
    __i2c_dummy_read_SR1_SR2(i2c);
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7ff fd61 	bl	800369e <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 8003be8:	bf00      	nop
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f9      	beq.n	8003bea <i2cBurstRegRead+0x80>
    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 8003bf6:	7afb      	ldrb	r3, [r7, #11]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8003c04:	bf00      	nop
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f9      	beq.n	8003c06 <i2cBurstRegRead+0x9c>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 8003c1e:	e02e      	b.n	8003c7e <i2cBurstRegRead+0x114>
    {
        if (num == 1U)                      // If there is only one byte left...
 8003c20:	7e3b      	ldrb	r3, [r7, #24]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d117      	bne.n	8003c56 <i2cBurstRegRead+0xec>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7ff fd33 	bl	800369e <__i2c_dummy_read_SR1_SR2>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 8003c38:	bf00      	nop
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f9      	beq.n	8003c3a <i2cBurstRegRead+0xd0>

            *data++ = i2c->DR;              // Read data from data register
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6919      	ldr	r1, [r3, #16]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	b2ca      	uxtb	r2, r1
 8003c52:	701a      	strb	r2, [r3, #0]
            break;
 8003c54:	e016      	b.n	8003c84 <i2cBurstRegRead+0x11a>
        }
        else                                // More than one byte left
        {
        	__i2c_dummy_read_SR1_SR2(i2c);
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f7ff fd21 	bl	800369e <__i2c_dummy_read_SR1_SR2>
        	I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 8003c5c:	bf00      	nop
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f9      	beq.n	8003c5e <i2cBurstRegRead+0xf4>
            (*data++) = i2c->DR;            // Read data from data register
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6919      	ldr	r1, [r3, #16]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	b2ca      	uxtb	r2, r1
 8003c76:	701a      	strb	r2, [r3, #0]
            num--;
 8003c78:	7e3b      	ldrb	r3, [r7, #24]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	763b      	strb	r3, [r7, #24]
    while (num > 0)                          // Start reading multiple values
 8003c7e:	7e3b      	ldrb	r3, [r7, #24]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1cd      	bne.n	8003c20 <i2cBurstRegRead+0xb6>
        }
    }
    __i2c_dummy_read_SR1_SR2(i2c);
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f7ff fd0a 	bl	800369e <__i2c_dummy_read_SR1_SR2>
    //I2C_BYTE_TRANSFER_FINISHED(i2c);
    __i2c_stop(i2c);
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f7ff fcef 	bl	800366e <__i2c_stop>

    return I2C_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <i2cBurstRead>:

I2C_RETURN_CODE_t i2cBurstRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t *data, uint8_t num)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	72fb      	strb	r3, [r7, #11]
 8003caa:	4613      	mov	r3, r2
 8003cac:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 8003cae:	bf00      	nop
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1f9      	bne.n	8003cb0 <i2cBurstRead+0x16>
    I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	601a      	str	r2, [r3, #0]

    __i2c_start(i2c);					 // send start condition
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7ff fcb8 	bl	800363e <__i2c_start>

    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 8003cce:	7afb      	ldrb	r3, [r7, #11]
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8003cdc:	bf00      	nop
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f9      	beq.n	8003cde <i2cBurstRead+0x44>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f7ff fcd7 	bl	800369e <__i2c_dummy_read_SR1_SR2>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 8003cfc:	e02e      	b.n	8003d5c <i2cBurstRead+0xc2>
    {
        if (num == 1U)                      // If there is only one byte left...
 8003cfe:	7abb      	ldrb	r3, [r7, #10]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d11a      	bne.n	8003d3a <i2cBurstRead+0xa0>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f7ff fcc4 	bl	800369e <__i2c_dummy_read_SR1_SR2>
            __i2c_stop(i2c);
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f7ff fca9 	bl	800366e <__i2c_stop>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 8003d1c:	bf00      	nop
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f9      	beq.n	8003d1e <i2cBurstRead+0x84>
            *data++ = i2c->DR;              // Read data from data register
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6919      	ldr	r1, [r3, #16]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	b2ca      	uxtb	r2, r1
 8003d36:	701a      	strb	r2, [r3, #0]
            break;
 8003d38:	e013      	b.n	8003d62 <i2cBurstRead+0xc8>
        }
        else                                // More than one byte left
        {
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 8003d3a:	bf00      	nop
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f9      	beq.n	8003d3c <i2cBurstRead+0xa2>
            (*data++) = i2c->DR;            // Read data from data register
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6919      	ldr	r1, [r3, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	607a      	str	r2, [r7, #4]
 8003d52:	b2ca      	uxtb	r2, r1
 8003d54:	701a      	strb	r2, [r3, #0]
            num--;
 8003d56:	7abb      	ldrb	r3, [r7, #10]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	72bb      	strb	r3, [r7, #10]
    while (num > 0)                          // Start reading multiple values
 8003d5c:	7abb      	ldrb	r3, [r7, #10]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1cd      	bne.n	8003cfe <i2cBurstRead+0x64>
        }
    }

    return I2C_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <i2cEnableDevice>:
 *          <td rowspan="1">0</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cEnableDevice(I2C_TypeDef *i2c)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
    i2c->CR1 |= I2C_CR1_PE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f043 0201 	orr.w	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	601a      	str	r2, [r3, #0]
    return I2C_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <i2cFindSlaveAddr>:
 *          <td rowspan="1">-</td>
 *      </tr>
 * </table>
 */
uint8_t i2cFindSlaveAddr(I2C_TypeDef *i2c, uint8_t i2cAddr)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	460b      	mov	r3, r1
 8003d98:	70fb      	strb	r3, [r7, #3]
    uint32_t simpleDelay;

    __i2c_start(i2c);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fc4f 	bl	800363e <__i2c_start>
    while (!(i2c->SR1 & I2C_SR1_SB))
    {
        ;
    }
*/
    i2c->DR = i2cAddr<<1;
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	461a      	mov	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	611a      	str	r2, [r3, #16]
    __i2c_dummy_read_SR1_SR2(i2c);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff fc77 	bl	800369e <__i2c_dummy_read_SR1_SR2>
    {
        ;
    }
*/

    i2c->CR1 |= I2C_CR1_STOP;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	601a      	str	r2, [r3, #0]
    for (simpleDelay = 0UL; simpleDelay < 1000UL; simpleDelay++)
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	e002      	b.n	8003dc8 <i2cFindSlaveAddr+0x3a>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dce:	d3f8      	bcc.n	8003dc2 <i2cFindSlaveAddr+0x34>
    {
        ;
    }

    if (i2c->SR1 & I2C_SR1_ADDR)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <i2cFindSlaveAddr+0x52>
    {
        return i2cAddr;
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	e000      	b.n	8003de2 <i2cFindSlaveAddr+0x54>
    }
    else
    {
        return 0;
 8003de0:	2300      	movs	r3, #0
    }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <rccGetSysClock>:
 *          <td rowspan="1">Values used to calculate the sysclock frequency</td>
 *      </tr>
 * </table>
 */
uint32_t rccGetSysClock(void)
{
 8003dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df0:	b094      	sub	sp, #80	; 0x50
 8003df2:	af00      	add	r7, sp, #0
    uint32_t pllm = 0u;
 8003df4:	2300      	movs	r3, #0
 8003df6:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t pllvco = 0u;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t pllp = 0u;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t sysClock = 0u;
 8003e00:	2300      	movs	r3, #0
 8003e02:	64bb      	str	r3, [r7, #72]	; 0x48

    switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e04:	4b79      	ldr	r3, [pc, #484]	; (8003fec <rccGetSysClock+0x200>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 030c 	and.w	r3, r3, #12
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d00d      	beq.n	8003e2c <rccGetSysClock+0x40>
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	f200 80e1 	bhi.w	8003fd8 <rccGetSysClock+0x1ec>
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <rccGetSysClock+0x34>
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d003      	beq.n	8003e26 <rccGetSysClock+0x3a>
 8003e1e:	e0db      	b.n	8003fd8 <rccGetSysClock+0x1ec>
    {
        case RCC_CFGR_SWS_HSI:
            sysClock = HSI_VALUE;    // High-speed internal = 16MHz
 8003e20:	4b73      	ldr	r3, [pc, #460]	; (8003ff0 <rccGetSysClock+0x204>)
 8003e22:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003e24:	e0db      	b.n	8003fde <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_HSE:
            sysClock = HSE_VALUE;    // High-speed external = 4 - 25MHz (max.)
 8003e26:	4b73      	ldr	r3, [pc, #460]	; (8003ff4 <rccGetSysClock+0x208>)
 8003e28:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003e2a:	e0d8      	b.n	8003fde <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_PLL:
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e2c:	4b6f      	ldr	r3, [pc, #444]	; (8003fec <rccGetSysClock+0x200>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e34:	647b      	str	r3, [r7, #68]	; 0x44

            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e36:	4b6d      	ldr	r3, [pc, #436]	; (8003fec <rccGetSysClock+0x200>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d063      	beq.n	8003f0a <rccGetSysClock+0x11e>
            {
                /* HSE used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003e42:	4b6a      	ldr	r3, [pc, #424]	; (8003fec <rccGetSysClock+0x200>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	099b      	lsrs	r3, r3, #6
 8003e48:	2200      	movs	r2, #0
 8003e4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e54:	633b      	str	r3, [r7, #48]	; 0x30
 8003e56:	2300      	movs	r3, #0
 8003e58:	637b      	str	r3, [r7, #52]	; 0x34
 8003e5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e5e:	4622      	mov	r2, r4
 8003e60:	462b      	mov	r3, r5
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	f04f 0100 	mov.w	r1, #0
 8003e6a:	0159      	lsls	r1, r3, #5
 8003e6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e70:	0150      	lsls	r0, r2, #5
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4621      	mov	r1, r4
 8003e78:	1a51      	subs	r1, r2, r1
 8003e7a:	6139      	str	r1, [r7, #16]
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e90:	4659      	mov	r1, fp
 8003e92:	018b      	lsls	r3, r1, #6
 8003e94:	4651      	mov	r1, sl
 8003e96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e9a:	4651      	mov	r1, sl
 8003e9c:	018a      	lsls	r2, r1, #6
 8003e9e:	4651      	mov	r1, sl
 8003ea0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ea4:	4659      	mov	r1, fp
 8003ea6:	eb63 0901 	sbc.w	r9, r3, r1
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ebe:	4690      	mov	r8, r2
 8003ec0:	4699      	mov	r9, r3
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	eb18 0303 	adds.w	r3, r8, r3
 8003ec8:	60bb      	str	r3, [r7, #8]
 8003eca:	462b      	mov	r3, r5
 8003ecc:	eb49 0303 	adc.w	r3, r9, r3
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ede:	4629      	mov	r1, r5
 8003ee0:	024b      	lsls	r3, r1, #9
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ee8:	4621      	mov	r1, r4
 8003eea:	024a      	lsls	r2, r1, #9
 8003eec:	4610      	mov	r0, r2
 8003eee:	4619      	mov	r1, r3
 8003ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ef8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003efc:	f7fc feac 	bl	8000c58 <__aeabi_uldivmod>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8003f04:	4613      	mov	r3, r2
 8003f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f08:	e058      	b.n	8003fbc <rccGetSysClock+0x1d0>
            }
            else
            {
                /* HSI used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003f0a:	4b38      	ldr	r3, [pc, #224]	; (8003fec <rccGetSysClock+0x200>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	099b      	lsrs	r3, r3, #6
 8003f10:	2200      	movs	r2, #0
 8003f12:	4618      	mov	r0, r3
 8003f14:	4611      	mov	r1, r2
 8003f16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f1a:	623b      	str	r3, [r7, #32]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f24:	4642      	mov	r2, r8
 8003f26:	464b      	mov	r3, r9
 8003f28:	f04f 0000 	mov.w	r0, #0
 8003f2c:	f04f 0100 	mov.w	r1, #0
 8003f30:	0159      	lsls	r1, r3, #5
 8003f32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f36:	0150      	lsls	r0, r2, #5
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f42:	4649      	mov	r1, r9
 8003f44:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f5c:	ebb2 040a 	subs.w	r4, r2, sl
 8003f60:	eb63 050b 	sbc.w	r5, r3, fp
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	00eb      	lsls	r3, r5, #3
 8003f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f72:	00e2      	lsls	r2, r4, #3
 8003f74:	4614      	mov	r4, r2
 8003f76:	461d      	mov	r5, r3
 8003f78:	4643      	mov	r3, r8
 8003f7a:	18e3      	adds	r3, r4, r3
 8003f7c:	603b      	str	r3, [r7, #0]
 8003f7e:	464b      	mov	r3, r9
 8003f80:	eb45 0303 	adc.w	r3, r5, r3
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f92:	4629      	mov	r1, r5
 8003f94:	028b      	lsls	r3, r1, #10
 8003f96:	4621      	mov	r1, r4
 8003f98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	028a      	lsls	r2, r1, #10
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	61fa      	str	r2, [r7, #28]
 8003fac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fb0:	f7fc fe52 	bl	8000c58 <__aeabi_uldivmod>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8003fb8:	4613      	mov	r3, r2
 8003fba:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <rccGetSysClock+0x200>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	0c1b      	lsrs	r3, r3, #16
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	643b      	str	r3, [r7, #64]	; 0x40

            sysClock = pllvco / pllp;
 8003fcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd4:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003fd6:	e002      	b.n	8003fde <rccGetSysClock+0x1f2>

        default:
            sysClock = HSI_VALUE;
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <rccGetSysClock+0x204>)
 8003fda:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003fdc:	bf00      	nop
    }

    return sysClock;
 8003fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3750      	adds	r7, #80	; 0x50
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fea:	bf00      	nop
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	00f42400 	.word	0x00f42400
 8003ff4:	007a1200 	.word	0x007a1200

08003ff8 <rccGetHclkFreq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetSysClock().
 */
uint32_t rccGetHclkFreq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
    SystemCoreClock = rccGetSysClock() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> POSITION_VAL(RCC_CFGR_HPRE)];
 8003ffe:	f7ff fef5 	bl	8003dec <rccGetSysClock>
 8004002:	4601      	mov	r1, r0
 8004004:	4b0d      	ldr	r3, [pc, #52]	; (800403c <rccGetHclkFreq+0x44>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800400c:	22f0      	movs	r2, #240	; 0xf0
 800400e:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	fa92 f2a2 	rbit	r2, r2
 8004016:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	fab2 f282 	clz	r2, r2
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	40d3      	lsrs	r3, r2
 8004022:	4a07      	ldr	r2, [pc, #28]	; (8004040 <rccGetHclkFreq+0x48>)
 8004024:	5cd3      	ldrb	r3, [r2, r3]
 8004026:	fa21 f303 	lsr.w	r3, r1, r3
 800402a:	4a06      	ldr	r2, [pc, #24]	; (8004044 <rccGetHclkFreq+0x4c>)
 800402c:	6013      	str	r3, [r2, #0]
    return SystemCoreClock;
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <rccGetHclkFreq+0x4c>)
 8004030:	681b      	ldr	r3, [r3, #0]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40023800 	.word	0x40023800
 8004040:	08009098 	.word	0x08009098
 8004044:	20000020 	.word	0x20000020

08004048 <rccGetPclk1Freq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetHclkFrequency().
 */
uint32_t rccGetPclk1Freq(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (rccGetHclkFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800404e:	f7ff ffd3 	bl	8003ff8 <rccGetHclkFreq>
 8004052:	4601      	mov	r1, r0
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <rccGetPclk1Freq+0x3c>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800405c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8004060:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	fa92 f2a2 	rbit	r2, r2
 8004068:	603a      	str	r2, [r7, #0]
  return result;
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	fab2 f282 	clz	r2, r2
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	40d3      	lsrs	r3, r2
 8004074:	4a04      	ldr	r2, [pc, #16]	; (8004088 <rccGetPclk1Freq+0x40>)
 8004076:	5cd3      	ldrb	r3, [r2, r3]
 8004078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40023800 	.word	0x40023800
 8004088:	08009098 	.word	0x08009098

0800408c <__spi_Chk_TX_empty>:
#include <mcalGPIO.h>
#include <mcalSPI.h>


static inline void __spi_Chk_TX_empty(SPI_TypeDef *spi)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]

	uint16_t simpleDelay;
	while(!(spi->SR & SPI_SR_TXE));
 8004094:	bf00      	nop
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f9      	beq.n	8004096 <__spi_Chk_TX_empty+0xa>
	for (simpleDelay = 0; simpleDelay < 3; simpleDelay++) {	; }  // Kurze Zwangspause, da das Signal TXE etwas vor Ausgbae des Letzen Bite erfolgt. ca 500 ns
 80040a2:	2300      	movs	r3, #0
 80040a4:	81fb      	strh	r3, [r7, #14]
 80040a6:	e002      	b.n	80040ae <__spi_Chk_TX_empty+0x22>
 80040a8:	89fb      	ldrh	r3, [r7, #14]
 80040aa:	3301      	adds	r3, #1
 80040ac:	81fb      	strh	r3, [r7, #14]
 80040ae:	89fb      	ldrh	r3, [r7, #14]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d9f9      	bls.n	80040a8 <__spi_Chk_TX_empty+0x1c>

}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <__spi_Chk_notBSY>:
}



static inline void __spi_Chk_notBSY(SPI_TypeDef *spi)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
	while((spi->SR & SPI_SR_BSY));
 80040ca:	bf00      	nop
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1f9      	bne.n	80040cc <__spi_Chk_notBSY+0xa>
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
	...

080040e8 <spiVerifySPI>:
*/
/**
 * Verifies the integrity of the SPI port.
 */
static bool spiVerifySPI(SPI_TypeDef *spi)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
    if ((SPI1 == spi) || (SPI2 == spi) || (SPI3 == spi) || (SPI4 == spi))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a0c      	ldr	r2, [pc, #48]	; (8004124 <spiVerifySPI+0x3c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00b      	beq.n	8004110 <spiVerifySPI+0x28>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a0b      	ldr	r2, [pc, #44]	; (8004128 <spiVerifySPI+0x40>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d007      	beq.n	8004110 <spiVerifySPI+0x28>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a0a      	ldr	r2, [pc, #40]	; (800412c <spiVerifySPI+0x44>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d003      	beq.n	8004110 <spiVerifySPI+0x28>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a09      	ldr	r2, [pc, #36]	; (8004130 <spiVerifySPI+0x48>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d101      	bne.n	8004114 <spiVerifySPI+0x2c>
    {
        return true;
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <spiVerifySPI+0x2e>
    }
    return false;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40013000 	.word	0x40013000
 8004128:	40003800 	.word	0x40003800
 800412c:	40003c00 	.word	0x40003c00
 8004130:	40013400 	.word	0x40013400

08004134 <spiVerifyClkDivider>:

/**
 * Verifies the integrity of the SPI clock divider.
 */
static bool spiVerifyClkDivider(SPI_CLOCK_DIV_t div)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	71fb      	strb	r3, [r7, #7]
    if ((CLK_DIV_2  == div) || (CLK_DIV_4  == div) || (CLK_DIV_8   == div) || (CLK_DIV_16  == div) ||
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d014      	beq.n	800416e <spiVerifyClkDivider+0x3a>
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d011      	beq.n	800416e <spiVerifyClkDivider+0x3a>
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d00e      	beq.n	800416e <spiVerifyClkDivider+0x3a>
 8004150:	79fb      	ldrb	r3, [r7, #7]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d00b      	beq.n	800416e <spiVerifyClkDivider+0x3a>
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	2b04      	cmp	r3, #4
 800415a:	d008      	beq.n	800416e <spiVerifyClkDivider+0x3a>
        (CLK_DIV_32 == div) || (CLK_DIV_64 == div) || (CLK_DIV_128 == div) || (CLK_DIV_256 == div))
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	2b05      	cmp	r3, #5
 8004160:	d005      	beq.n	800416e <spiVerifyClkDivider+0x3a>
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	2b06      	cmp	r3, #6
 8004166:	d002      	beq.n	800416e <spiVerifyClkDivider+0x3a>
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	2b07      	cmp	r3, #7
 800416c:	d101      	bne.n	8004172 <spiVerifyClkDivider+0x3e>
    {
        return true;
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <spiVerifyClkDivider+0x40>
    }
    return false;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <spiVerifySSM>:

/**
 * Verifies the integrity of the SPI Software Slave Management.
 */
static bool spiVerifySSM(SPI_SSM_t ssm)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	71fb      	strb	r3, [r7, #7]
    if ((SSM_ON == ssm) || (SSM_OFF == ssm))
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d002      	beq.n	8004196 <spiVerifySSM+0x16>
 8004190:	79fb      	ldrb	r3, [r7, #7]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <spiVerifySSM+0x1a>
    {
        return true;
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <spiVerifySSM+0x1c>
    }
    return false;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <spiVerifyOpMode>:

/**
 * Verifies the integrity of the SPI operational mode.
 */
static bool spiVerifyOpMode(SPI_OPMODE_t om)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	71fb      	strb	r3, [r7, #7]
    if ((MASTER == om) || (SLAVE == om))
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <spiVerifyOpMode+0x16>
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <spiVerifyOpMode+0x1a>
    {
        return true;
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <spiVerifyOpMode+0x1c>
    }
    return false;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <spiVerifyPhase>:

/**
 * Verifies the integrity of the SPI trigger phase.
 */
static bool spiVerifyPhase(SPI_PHASE_t ph)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	71fb      	strb	r3, [r7, #7]
    if ((SPI_PHASE_EDGE_1 == ph) || (SPI_PHASE_EDGE_2 == ph))
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <spiVerifyPhase+0x16>
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <spiVerifyPhase+0x1a>
    {
        return true;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <spiVerifyPhase+0x1c>
    }
    return false;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <spiVerifyIdlePolarity>:

/**
 * Verifies the integrity of the SPI idle level.
 */
static bool spiVerifyIdlePolarity(SPI_POLARITY_t pol)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	71fb      	strb	r3, [r7, #7]
    if ((SPI_IDLE_LOW == pol) || (SPI_IDLE_HIGH == pol))
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <spiVerifyIdlePolarity+0x16>
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <spiVerifyIdlePolarity+0x1a>
    {
        return true;
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <spiVerifyIdlePolarity+0x1c>
    }
    return false;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <spiInitSPI>:


SPI_RETURN_CODE_t spiInitSPI(SPI_TypeDef *spi, SPI_CLOCK_DIV_t div, SPI_DATALEN_t len,
                             SPI_SSM_t ssm, SPI_SSI_LVL_t lvl, SPI_OPMODE_t opMode,
                             SPI_PHASE_t phase, SPI_POLARITY_t polarity)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	4608      	mov	r0, r1
 800422a:	4611      	mov	r1, r2
 800422c:	461a      	mov	r2, r3
 800422e:	4603      	mov	r3, r0
 8004230:	70fb      	strb	r3, [r7, #3]
 8004232:	460b      	mov	r3, r1
 8004234:	70bb      	strb	r3, [r7, #2]
 8004236:	4613      	mov	r3, r2
 8004238:	707b      	strb	r3, [r7, #1]
    uint16_t cr1 = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	81fb      	strh	r3, [r7, #14]
    // Parameter verification
    if (spiVerifyClkDivider(div) != true)
 800423e:	78fb      	ldrb	r3, [r7, #3]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff ff77 	bl	8004134 <spiVerifyClkDivider>
 8004246:	4603      	mov	r3, r0
 8004248:	f083 0301 	eor.w	r3, r3, #1
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <spiInitSPI+0x38>
    {
        return SPI_INVALID_CLOCK_DIVIDER;
 8004252:	f06f 0350 	mvn.w	r3, #80	; 0x50
 8004256:	e0cc      	b.n	80043f2 <spiInitSPI+0x1d2>
    }
    if (spiVerifySSM(ssm) != true)
 8004258:	787b      	ldrb	r3, [r7, #1]
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff ff90 	bl	8004180 <spiVerifySSM>
 8004260:	4603      	mov	r3, r0
 8004262:	f083 0301 	eor.w	r3, r3, #1
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <spiInitSPI+0x52>
    {
        return SPI_INVALID_SW_SLV_MGMT;
 800426c:	f06f 0352 	mvn.w	r3, #82	; 0x52
 8004270:	e0bf      	b.n	80043f2 <spiInitSPI+0x1d2>
    if (spiVerifySsiLvl(lvl) != true)
    {
        return SPI_INVALID_SSI_LEVEL;
    }
#endif
    if (spiVerifyOpMode(opMode) != true)
 8004272:	7f3b      	ldrb	r3, [r7, #28]
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff ff97 	bl	80041a8 <spiVerifyOpMode>
 800427a:	4603      	mov	r3, r0
 800427c:	f083 0301 	eor.w	r3, r3, #1
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <spiInitSPI+0x6c>
    {
        return SPI_INVALID_OP_MODE;
 8004286:	f06f 0355 	mvn.w	r3, #85	; 0x55
 800428a:	e0b2      	b.n	80043f2 <spiInitSPI+0x1d2>
    }
    if (spiVerifyPhase(phase) != true)
 800428c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff ff9d 	bl	80041d0 <spiVerifyPhase>
 8004296:	4603      	mov	r3, r0
 8004298:	f083 0301 	eor.w	r3, r3, #1
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <spiInitSPI+0x88>
    {
        return SPI_INVALID_PHASE;
 80042a2:	f06f 0356 	mvn.w	r3, #86	; 0x56
 80042a6:	e0a4      	b.n	80043f2 <spiInitSPI+0x1d2>
    }
    if (spiVerifyIdlePolarity(polarity) != true)
 80042a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff ffa3 	bl	80041f8 <spiVerifyIdlePolarity>
 80042b2:	4603      	mov	r3, r0
 80042b4:	f083 0301 	eor.w	r3, r3, #1
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <spiInitSPI+0xa4>
    {
        return SPI_INVALID_IDLE_POLARITY;
 80042be:	f06f 0357 	mvn.w	r3, #87	; 0x57
 80042c2:	e096      	b.n	80043f2 <spiInitSPI+0x1d2>
    /**
     *  All parameter check passed successfully!
     */

    // Setting up the baudrate (PCLK / Pre-Scaler)
    switch (div)
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	2b07      	cmp	r3, #7
 80042c8:	d83a      	bhi.n	8004340 <spiInitSPI+0x120>
 80042ca:	a201      	add	r2, pc, #4	; (adr r2, 80042d0 <spiInitSPI+0xb0>)
 80042cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d0:	080042f1 	.word	0x080042f1
 80042d4:	080042fb 	.word	0x080042fb
 80042d8:	08004305 	.word	0x08004305
 80042dc:	0800430f 	.word	0x0800430f
 80042e0:	08004319 	.word	0x08004319
 80042e4:	08004323 	.word	0x08004323
 80042e8:	0800432d 	.word	0x0800432d
 80042ec:	08004337 	.word	0x08004337
    {
        case CLK_DIV_2:
            cr1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80042f0:	89fb      	ldrh	r3, [r7, #14]
 80042f2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80042f6:	81fb      	strh	r3, [r7, #14]
            break;
 80042f8:	e027      	b.n	800434a <spiInitSPI+0x12a>

        case CLK_DIV_4:
            cr1 |= SPI_CR1_BR_0;
 80042fa:	89fb      	ldrh	r3, [r7, #14]
 80042fc:	f043 0308 	orr.w	r3, r3, #8
 8004300:	81fb      	strh	r3, [r7, #14]
            break;
 8004302:	e022      	b.n	800434a <spiInitSPI+0x12a>

        case CLK_DIV_8:
            cr1 |= SPI_CR1_BR_1;
 8004304:	89fb      	ldrh	r3, [r7, #14]
 8004306:	f043 0310 	orr.w	r3, r3, #16
 800430a:	81fb      	strh	r3, [r7, #14]
            break;
 800430c:	e01d      	b.n	800434a <spiInitSPI+0x12a>

        case CLK_DIV_16:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 800430e:	89fb      	ldrh	r3, [r7, #14]
 8004310:	f043 0318 	orr.w	r3, r3, #24
 8004314:	81fb      	strh	r3, [r7, #14]
            break;
 8004316:	e018      	b.n	800434a <spiInitSPI+0x12a>

        case CLK_DIV_32:
            cr1 |= SPI_CR1_BR_2;
 8004318:	89fb      	ldrh	r3, [r7, #14]
 800431a:	f043 0320 	orr.w	r3, r3, #32
 800431e:	81fb      	strh	r3, [r7, #14]
            break;
 8004320:	e013      	b.n	800434a <spiInitSPI+0x12a>

        case CLK_DIV_64:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_0);
 8004322:	89fb      	ldrh	r3, [r7, #14]
 8004324:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004328:	81fb      	strh	r3, [r7, #14]
            break;
 800432a:	e00e      	b.n	800434a <spiInitSPI+0x12a>

        case CLK_DIV_128:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 800432c:	89fb      	ldrh	r3, [r7, #14]
 800432e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004332:	81fb      	strh	r3, [r7, #14]
            break;
 8004334:	e009      	b.n	800434a <spiInitSPI+0x12a>

        case CLK_DIV_256:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8004336:	89fb      	ldrh	r3, [r7, #14]
 8004338:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800433c:	81fb      	strh	r3, [r7, #14]
            break;
 800433e:	e004      	b.n	800434a <spiInitSPI+0x12a>

        default:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8004340:	89fb      	ldrh	r3, [r7, #14]
 8004342:	f043 0318 	orr.w	r3, r3, #24
 8004346:	81fb      	strh	r3, [r7, #14]
            break;
 8004348:	bf00      	nop
    }

    // Setting up the data length
    if (SPI_DATA_8_BIT == len)
 800434a:	78bb      	ldrb	r3, [r7, #2]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d104      	bne.n	800435a <spiInitSPI+0x13a>
    {
        cr1 &= ~SPI_CR1_DFF_Msk;
 8004350:	89fb      	ldrh	r3, [r7, #14]
 8004352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004356:	81fb      	strh	r3, [r7, #14]
 8004358:	e003      	b.n	8004362 <spiInitSPI+0x142>
    }
    else
    {
        cr1 |= SPI_CR1_DFF;
 800435a:	89fb      	ldrh	r3, [r7, #14]
 800435c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004360:	81fb      	strh	r3, [r7, #14]
    }

    // Set SSM and SSI bits
    if (SSM_ON == ssm)
 8004362:	787b      	ldrb	r3, [r7, #1]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d110      	bne.n	800438a <spiInitSPI+0x16a>
    {
        cr1 |= SPI_CR1_SSM;
 8004368:	89fb      	ldrh	r3, [r7, #14]
 800436a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800436e:	81fb      	strh	r3, [r7, #14]

        // SSI level works only if SSM is active
        if (SSI_LVL_HIGH == lvl)
 8004370:	7e3b      	ldrb	r3, [r7, #24]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d104      	bne.n	8004380 <spiInitSPI+0x160>
        {
            cr1 |= SPI_CR1_SSI;
 8004376:	89fb      	ldrh	r3, [r7, #14]
 8004378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437c:	81fb      	strh	r3, [r7, #14]
 800437e:	e008      	b.n	8004392 <spiInitSPI+0x172>
        }
        else
        {
            cr1 &= ~SPI_CR1_SSI_Msk;
 8004380:	89fb      	ldrh	r3, [r7, #14]
 8004382:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004386:	81fb      	strh	r3, [r7, #14]
 8004388:	e003      	b.n	8004392 <spiInitSPI+0x172>
        }
    }
    else
    {
        cr1 &= ~SPI_CR1_SSM_Msk;
 800438a:	89fb      	ldrh	r3, [r7, #14]
 800438c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004390:	81fb      	strh	r3, [r7, #14]
    }

    // Select between Master/Slave mode
    if (MASTER == opMode)
 8004392:	7f3b      	ldrb	r3, [r7, #28]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d104      	bne.n	80043a2 <spiInitSPI+0x182>
    {
        cr1 |= SPI_CR1_MSTR;
 8004398:	89fb      	ldrh	r3, [r7, #14]
 800439a:	f043 0304 	orr.w	r3, r3, #4
 800439e:	81fb      	strh	r3, [r7, #14]
 80043a0:	e003      	b.n	80043aa <spiInitSPI+0x18a>
    }
    else
    {
        cr1 &= ~SPI_CR1_MSTR_Msk;
 80043a2:	89fb      	ldrh	r3, [r7, #14]
 80043a4:	f023 0304 	bic.w	r3, r3, #4
 80043a8:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock phase
    if (SPI_PHASE_EDGE_1 == phase)
 80043aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d104      	bne.n	80043bc <spiInitSPI+0x19c>
    {
        cr1 &= ~SPI_CR1_CPHA_Msk;
 80043b2:	89fb      	ldrh	r3, [r7, #14]
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	81fb      	strh	r3, [r7, #14]
 80043ba:	e003      	b.n	80043c4 <spiInitSPI+0x1a4>
    }
    else
    {
        cr1 |= SPI_CR1_CPHA;
 80043bc:	89fb      	ldrh	r3, [r7, #14]
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock polarity
    if (SPI_IDLE_LOW == polarity)
 80043c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <spiInitSPI+0x1b6>
    {
        cr1 &= ~SPI_CR1_CPOL_Msk;
 80043cc:	89fb      	ldrh	r3, [r7, #14]
 80043ce:	f023 0302 	bic.w	r3, r3, #2
 80043d2:	81fb      	strh	r3, [r7, #14]
 80043d4:	e003      	b.n	80043de <spiInitSPI+0x1be>
    }
    else
    {
        cr1 |= SPI_CR1_CPOL;
 80043d6:	89fb      	ldrh	r3, [r7, #14]
 80043d8:	f043 0302 	orr.w	r3, r3, #2
 80043dc:	81fb      	strh	r3, [r7, #14]
    }

    // Transfer settings to CR1 + CR2
    spi->CR1 = cr1;
 80043de:	89fa      	ldrh	r2, [r7, #14]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	601a      	str	r2, [r3, #0]
    //spi->CR1 = 0x31E; //8-bit frames
    spi->CR2 = 0;                     // Simplified version. Should be modified.
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	605a      	str	r2, [r3, #4]

    // Finally, enable SPIn
    spiEnableSPI(spi);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f846 	bl	800447c <spiEnableSPI>

    return SPI_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop

080043fc <spiSelectSPI>:


SPI_RETURN_CODE_t spiSelectSPI(SPI_TypeDef *spi)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
    // All parameter check passed successfully!

    // Selects the bus clock for SPIn
    if (SPI1 == spi)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a18      	ldr	r2, [pc, #96]	; (8004468 <spiSelectSPI+0x6c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d106      	bne.n	800441a <spiSelectSPI+0x1e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800440c:	4b17      	ldr	r3, [pc, #92]	; (800446c <spiSelectSPI+0x70>)
 800440e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004410:	4a16      	ldr	r2, [pc, #88]	; (800446c <spiSelectSPI+0x70>)
 8004412:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004416:	6453      	str	r3, [r2, #68]	; 0x44
 8004418:	e01f      	b.n	800445a <spiSelectSPI+0x5e>
    }
    else if (SPI2 == spi)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a14      	ldr	r2, [pc, #80]	; (8004470 <spiSelectSPI+0x74>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d106      	bne.n	8004430 <spiSelectSPI+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8004422:	4b12      	ldr	r3, [pc, #72]	; (800446c <spiSelectSPI+0x70>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	4a11      	ldr	r2, [pc, #68]	; (800446c <spiSelectSPI+0x70>)
 8004428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800442c:	6413      	str	r3, [r2, #64]	; 0x40
 800442e:	e014      	b.n	800445a <spiSelectSPI+0x5e>
    }
    else if (SPI3 == spi)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a10      	ldr	r2, [pc, #64]	; (8004474 <spiSelectSPI+0x78>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d106      	bne.n	8004446 <spiSelectSPI+0x4a>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8004438:	4b0c      	ldr	r3, [pc, #48]	; (800446c <spiSelectSPI+0x70>)
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	4a0b      	ldr	r2, [pc, #44]	; (800446c <spiSelectSPI+0x70>)
 800443e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004442:	6413      	str	r3, [r2, #64]	; 0x40
 8004444:	e009      	b.n	800445a <spiSelectSPI+0x5e>
    }
    else if (SPI4 == spi)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a0b      	ldr	r2, [pc, #44]	; (8004478 <spiSelectSPI+0x7c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d105      	bne.n	800445a <spiSelectSPI+0x5e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 800444e:	4b07      	ldr	r3, [pc, #28]	; (800446c <spiSelectSPI+0x70>)
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	4a06      	ldr	r2, [pc, #24]	; (800446c <spiSelectSPI+0x70>)
 8004454:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004458:	6453      	str	r3, [r2, #68]	; 0x44
    }

    return SPI_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	40013000 	.word	0x40013000
 800446c:	40023800 	.word	0x40023800
 8004470:	40003800 	.word	0x40003800
 8004474:	40003c00 	.word	0x40003c00
 8004478:	40013400 	.word	0x40013400

0800447c <spiEnableSPI>:

    return SPI_OK;
}

SPI_RETURN_CODE_t spiEnableSPI(SPI_TypeDef *spi)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]

	// Parameter verification
    if (spiVerifySPI(spi) != true)
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff fe2f 	bl	80040e8 <spiVerifySPI>
 800448a:	4603      	mov	r3, r0
 800448c:	f083 0301 	eor.w	r3, r3, #1
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <spiEnableSPI+0x20>
    {
        return SPI_INVALID_SPI;
 8004496:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 800449a:	e006      	b.n	80044aa <spiEnableSPI+0x2e>
    }

    // All parameter check passed successfully!
    spi->CR1 |= SPI_CR1_SPE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	601a      	str	r2, [r3, #0]

    return SPI_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <spiWriteByte>:
    return SPI_OK;
}


SPI_RETURN_CODE_t spiWriteByte(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t data)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b084      	sub	sp, #16
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	4611      	mov	r1, r2
 80044be:	461a      	mov	r2, r3
 80044c0:	460b      	mov	r3, r1
 80044c2:	71fb      	strb	r3, [r7, #7]
 80044c4:	4613      	mov	r3, r2
 80044c6:	71bb      	strb	r3, [r7, #6]
    //static uint8_t state = SPI_SEND_BYTE_1;

    if (gpioVerifyPin(pin) != true)
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe fd7e 	bl	8002fcc <gpioVerifyPin>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f083 0301 	eor.w	r3, r3, #1
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <spiWriteByte+0x30>
    {
        return GPIO_INVALID_PIN;
 80044dc:	f06f 0301 	mvn.w	r3, #1
 80044e0:	e016      	b.n	8004510 <spiWriteByte+0x5e>
    }
	__spi_Chk_TX_empty(spi);
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f7ff fdd2 	bl	800408c <__spi_Chk_TX_empty>
    gpioResetPin(port, pin);              // Set CS input to low level
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	4619      	mov	r1, r3
 80044ec:	68b8      	ldr	r0, [r7, #8]
 80044ee:	f7fe ff6b 	bl	80033c8 <gpioResetPin>

	spi->DR = data;                         // Send first byte to data register
 80044f2:	79ba      	ldrb	r2, [r7, #6]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	60da      	str	r2, [r3, #12]
	__spi_Chk_TX_empty(spi);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff fdc7 	bl	800408c <__spi_Chk_TX_empty>

	__spi_Chk_notBSY(spi);
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f7ff fddf 	bl	80040c2 <__spi_Chk_notBSY>
	gpioSetPin(port, pin);
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	4619      	mov	r1, r3
 8004508:	68b8      	ldr	r0, [r7, #8]
 800450a:	f7fe ff32 	bl	8003372 <gpioSetPin>
            gpioSetPin(port, pin);
            state = SPI_SEND_BYTE_1;
        }
    }
*/
    return SPI_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	6039      	str	r1, [r7, #0]
 8004522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004528:	2b00      	cmp	r3, #0
 800452a:	db0a      	blt.n	8004542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	b2da      	uxtb	r2, r3
 8004530:	490c      	ldr	r1, [pc, #48]	; (8004564 <__NVIC_SetPriority+0x4c>)
 8004532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004536:	0112      	lsls	r2, r2, #4
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	440b      	add	r3, r1
 800453c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004540:	e00a      	b.n	8004558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	b2da      	uxtb	r2, r3
 8004546:	4908      	ldr	r1, [pc, #32]	; (8004568 <__NVIC_SetPriority+0x50>)
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	3b04      	subs	r3, #4
 8004550:	0112      	lsls	r2, r2, #4
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	440b      	add	r3, r1
 8004556:	761a      	strb	r2, [r3, #24]
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	e000e100 	.word	0xe000e100
 8004568:	e000ed00 	.word	0xe000ed00

0800456c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3b01      	subs	r3, #1
 8004578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800457c:	d301      	bcc.n	8004582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800457e:	2301      	movs	r3, #1
 8004580:	e00f      	b.n	80045a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004582:	4a0a      	ldr	r2, [pc, #40]	; (80045ac <SysTick_Config+0x40>)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3b01      	subs	r3, #1
 8004588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800458a:	210f      	movs	r1, #15
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	f7ff ffc2 	bl	8004518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <SysTick_Config+0x40>)
 8004596:	2200      	movs	r2, #0
 8004598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800459a:	4b04      	ldr	r3, [pc, #16]	; (80045ac <SysTick_Config+0x40>)
 800459c:	2207      	movs	r2, #7
 800459e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	e000e010 	.word	0xe000e010

080045b0 <systickSetMillis>:
 * **systickSetMillis()** might be confusing since the user might expect to get a ticktime of a multiple of **one**
 * millisecond. However, depending on the setting of the divider used in function systickInit() the real ticktime might
 * be also a multiple of 10 or 100 milliseconds.
 */
void systickSetMillis(uint32_t *timer, uint32_t millis)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
    *timer = millis;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	601a      	str	r2, [r3, #0]
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 80045d4:	f7fe f8e2 	bl	800279c <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <systickInit+0x24>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff ffc2 	bl	800456c <SysTick_Config>
}
 80045e8:	bf00      	nop
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20000020 	.word	0x20000020

080045f4 <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	601a      	str	r2, [r3, #0]
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 8004618:	2300      	movs	r3, #0
 800461a:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <isSystickExpired+0x16>
	{
		timerState = true;
 8004622:	2301      	movs	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 8004626:	7bfb      	ldrb	r3, [r7, #15]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
	timerTrigger = true;
 8004638:	4b03      	ldr	r3, [pc, #12]	; (8004648 <SysTick_Handler+0x14>)
 800463a:	2201      	movs	r2, #1
 800463c:	701a      	strb	r2, [r3, #0]
}
 800463e:	bf00      	nop
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	20000234 	.word	0x20000234

0800464c <systickUpdateTimer>:
 * Updates the given timer.
 *
 * @param *timer : A pointer to the variable representing this timer.
 */
void systickUpdateTimer(uint32_t *timer)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
    DECREMENT_TIMER(*timer);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d004      	beq.n	8004666 <systickUpdateTimer+0x1a>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	1e5a      	subs	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	601a      	str	r2, [r3, #0]
    timerTrigger = false;
 8004666:	4b04      	ldr	r3, [pc, #16]	; (8004678 <systickUpdateTimer+0x2c>)
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	20000234 	.word	0x20000234

0800467c <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 8004688:	2300      	movs	r3, #0
 800468a:	73fb      	strb	r3, [r7, #15]
 800468c:	e011      	b.n	80046b2 <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	4413      	add	r3, r2
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d004      	beq.n	80046ac <systickUpdateTimerList+0x30>
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	1e5a      	subs	r2, r3, #1
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	3301      	adds	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
 80046b2:	7bfa      	ldrb	r2, [r7, #15]
 80046b4:	78fb      	ldrb	r3, [r7, #3]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d3e9      	bcc.n	800468e <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 80046ba:	4b04      	ldr	r3, [pc, #16]	; (80046cc <systickUpdateTimerList+0x50>)
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]
}
 80046c0:	bf00      	nop
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	20000234 	.word	0x20000234

080046d0 <systickDelay>:
 * of the while(1) loop, e.g. when initialization of a hardware component needs
 * time to perform one initialization step (e.g. if the datasheet of that component
 * demands a delay before doing the next initialization step).
 */
void systickDelay(uint32_t *timer, uint32_t delay)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
    systickSetMillis(timer, delay);
 80046da:	6839      	ldr	r1, [r7, #0]
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff ff67 	bl	80045b0 <systickSetMillis>
    while (!isSystickExpired(*timer))
 80046e2:	e006      	b.n	80046f2 <systickDelay+0x22>
    {
        if (timerTrigger == true)
 80046e4:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <systickDelay+0x44>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <systickDelay+0x22>
        {
            systickUpdateTimer(timer);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ffad 	bl	800464c <systickUpdateTimer>
    while (!isSystickExpired(*timer))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff ff8a 	bl	8004610 <isSystickExpired>
 80046fc:	4603      	mov	r3, r0
 80046fe:	f083 0301 	eor.w	r3, r3, #1
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1ed      	bne.n	80046e4 <systickDelay+0x14>
        }
    }
}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000234 	.word	0x20000234

08004718 <__errno>:
 8004718:	4b01      	ldr	r3, [pc, #4]	; (8004720 <__errno+0x8>)
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	20000024 	.word	0x20000024

08004724 <__libc_init_array>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	4d0d      	ldr	r5, [pc, #52]	; (800475c <__libc_init_array+0x38>)
 8004728:	4c0d      	ldr	r4, [pc, #52]	; (8004760 <__libc_init_array+0x3c>)
 800472a:	1b64      	subs	r4, r4, r5
 800472c:	10a4      	asrs	r4, r4, #2
 800472e:	2600      	movs	r6, #0
 8004730:	42a6      	cmp	r6, r4
 8004732:	d109      	bne.n	8004748 <__libc_init_array+0x24>
 8004734:	4d0b      	ldr	r5, [pc, #44]	; (8004764 <__libc_init_array+0x40>)
 8004736:	4c0c      	ldr	r4, [pc, #48]	; (8004768 <__libc_init_array+0x44>)
 8004738:	f004 f988 	bl	8008a4c <_init>
 800473c:	1b64      	subs	r4, r4, r5
 800473e:	10a4      	asrs	r4, r4, #2
 8004740:	2600      	movs	r6, #0
 8004742:	42a6      	cmp	r6, r4
 8004744:	d105      	bne.n	8004752 <__libc_init_array+0x2e>
 8004746:	bd70      	pop	{r4, r5, r6, pc}
 8004748:	f855 3b04 	ldr.w	r3, [r5], #4
 800474c:	4798      	blx	r3
 800474e:	3601      	adds	r6, #1
 8004750:	e7ee      	b.n	8004730 <__libc_init_array+0xc>
 8004752:	f855 3b04 	ldr.w	r3, [r5], #4
 8004756:	4798      	blx	r3
 8004758:	3601      	adds	r6, #1
 800475a:	e7f2      	b.n	8004742 <__libc_init_array+0x1e>
 800475c:	080096a8 	.word	0x080096a8
 8004760:	080096a8 	.word	0x080096a8
 8004764:	080096a8 	.word	0x080096a8
 8004768:	080096ac 	.word	0x080096ac

0800476c <malloc>:
 800476c:	4b02      	ldr	r3, [pc, #8]	; (8004778 <malloc+0xc>)
 800476e:	4601      	mov	r1, r0
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	f000 b877 	b.w	8004864 <_malloc_r>
 8004776:	bf00      	nop
 8004778:	20000024 	.word	0x20000024

0800477c <memset>:
 800477c:	4402      	add	r2, r0
 800477e:	4603      	mov	r3, r0
 8004780:	4293      	cmp	r3, r2
 8004782:	d100      	bne.n	8004786 <memset+0xa>
 8004784:	4770      	bx	lr
 8004786:	f803 1b01 	strb.w	r1, [r3], #1
 800478a:	e7f9      	b.n	8004780 <memset+0x4>

0800478c <_free_r>:
 800478c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800478e:	2900      	cmp	r1, #0
 8004790:	d044      	beq.n	800481c <_free_r+0x90>
 8004792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004796:	9001      	str	r0, [sp, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	f1a1 0404 	sub.w	r4, r1, #4
 800479e:	bfb8      	it	lt
 80047a0:	18e4      	addlt	r4, r4, r3
 80047a2:	f001 fbf9 	bl	8005f98 <__malloc_lock>
 80047a6:	4a1e      	ldr	r2, [pc, #120]	; (8004820 <_free_r+0x94>)
 80047a8:	9801      	ldr	r0, [sp, #4]
 80047aa:	6813      	ldr	r3, [r2, #0]
 80047ac:	b933      	cbnz	r3, 80047bc <_free_r+0x30>
 80047ae:	6063      	str	r3, [r4, #4]
 80047b0:	6014      	str	r4, [r2, #0]
 80047b2:	b003      	add	sp, #12
 80047b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047b8:	f001 bbf4 	b.w	8005fa4 <__malloc_unlock>
 80047bc:	42a3      	cmp	r3, r4
 80047be:	d908      	bls.n	80047d2 <_free_r+0x46>
 80047c0:	6825      	ldr	r5, [r4, #0]
 80047c2:	1961      	adds	r1, r4, r5
 80047c4:	428b      	cmp	r3, r1
 80047c6:	bf01      	itttt	eq
 80047c8:	6819      	ldreq	r1, [r3, #0]
 80047ca:	685b      	ldreq	r3, [r3, #4]
 80047cc:	1949      	addeq	r1, r1, r5
 80047ce:	6021      	streq	r1, [r4, #0]
 80047d0:	e7ed      	b.n	80047ae <_free_r+0x22>
 80047d2:	461a      	mov	r2, r3
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	b10b      	cbz	r3, 80047dc <_free_r+0x50>
 80047d8:	42a3      	cmp	r3, r4
 80047da:	d9fa      	bls.n	80047d2 <_free_r+0x46>
 80047dc:	6811      	ldr	r1, [r2, #0]
 80047de:	1855      	adds	r5, r2, r1
 80047e0:	42a5      	cmp	r5, r4
 80047e2:	d10b      	bne.n	80047fc <_free_r+0x70>
 80047e4:	6824      	ldr	r4, [r4, #0]
 80047e6:	4421      	add	r1, r4
 80047e8:	1854      	adds	r4, r2, r1
 80047ea:	42a3      	cmp	r3, r4
 80047ec:	6011      	str	r1, [r2, #0]
 80047ee:	d1e0      	bne.n	80047b2 <_free_r+0x26>
 80047f0:	681c      	ldr	r4, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	6053      	str	r3, [r2, #4]
 80047f6:	4421      	add	r1, r4
 80047f8:	6011      	str	r1, [r2, #0]
 80047fa:	e7da      	b.n	80047b2 <_free_r+0x26>
 80047fc:	d902      	bls.n	8004804 <_free_r+0x78>
 80047fe:	230c      	movs	r3, #12
 8004800:	6003      	str	r3, [r0, #0]
 8004802:	e7d6      	b.n	80047b2 <_free_r+0x26>
 8004804:	6825      	ldr	r5, [r4, #0]
 8004806:	1961      	adds	r1, r4, r5
 8004808:	428b      	cmp	r3, r1
 800480a:	bf04      	itt	eq
 800480c:	6819      	ldreq	r1, [r3, #0]
 800480e:	685b      	ldreq	r3, [r3, #4]
 8004810:	6063      	str	r3, [r4, #4]
 8004812:	bf04      	itt	eq
 8004814:	1949      	addeq	r1, r1, r5
 8004816:	6021      	streq	r1, [r4, #0]
 8004818:	6054      	str	r4, [r2, #4]
 800481a:	e7ca      	b.n	80047b2 <_free_r+0x26>
 800481c:	b003      	add	sp, #12
 800481e:	bd30      	pop	{r4, r5, pc}
 8004820:	2000029c 	.word	0x2000029c

08004824 <sbrk_aligned>:
 8004824:	b570      	push	{r4, r5, r6, lr}
 8004826:	4e0e      	ldr	r6, [pc, #56]	; (8004860 <sbrk_aligned+0x3c>)
 8004828:	460c      	mov	r4, r1
 800482a:	6831      	ldr	r1, [r6, #0]
 800482c:	4605      	mov	r5, r0
 800482e:	b911      	cbnz	r1, 8004836 <sbrk_aligned+0x12>
 8004830:	f000 fcf6 	bl	8005220 <_sbrk_r>
 8004834:	6030      	str	r0, [r6, #0]
 8004836:	4621      	mov	r1, r4
 8004838:	4628      	mov	r0, r5
 800483a:	f000 fcf1 	bl	8005220 <_sbrk_r>
 800483e:	1c43      	adds	r3, r0, #1
 8004840:	d00a      	beq.n	8004858 <sbrk_aligned+0x34>
 8004842:	1cc4      	adds	r4, r0, #3
 8004844:	f024 0403 	bic.w	r4, r4, #3
 8004848:	42a0      	cmp	r0, r4
 800484a:	d007      	beq.n	800485c <sbrk_aligned+0x38>
 800484c:	1a21      	subs	r1, r4, r0
 800484e:	4628      	mov	r0, r5
 8004850:	f000 fce6 	bl	8005220 <_sbrk_r>
 8004854:	3001      	adds	r0, #1
 8004856:	d101      	bne.n	800485c <sbrk_aligned+0x38>
 8004858:	f04f 34ff 	mov.w	r4, #4294967295
 800485c:	4620      	mov	r0, r4
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	200002a0 	.word	0x200002a0

08004864 <_malloc_r>:
 8004864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004868:	1ccd      	adds	r5, r1, #3
 800486a:	f025 0503 	bic.w	r5, r5, #3
 800486e:	3508      	adds	r5, #8
 8004870:	2d0c      	cmp	r5, #12
 8004872:	bf38      	it	cc
 8004874:	250c      	movcc	r5, #12
 8004876:	2d00      	cmp	r5, #0
 8004878:	4607      	mov	r7, r0
 800487a:	db01      	blt.n	8004880 <_malloc_r+0x1c>
 800487c:	42a9      	cmp	r1, r5
 800487e:	d905      	bls.n	800488c <_malloc_r+0x28>
 8004880:	230c      	movs	r3, #12
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	2600      	movs	r6, #0
 8004886:	4630      	mov	r0, r6
 8004888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800488c:	4e2e      	ldr	r6, [pc, #184]	; (8004948 <_malloc_r+0xe4>)
 800488e:	f001 fb83 	bl	8005f98 <__malloc_lock>
 8004892:	6833      	ldr	r3, [r6, #0]
 8004894:	461c      	mov	r4, r3
 8004896:	bb34      	cbnz	r4, 80048e6 <_malloc_r+0x82>
 8004898:	4629      	mov	r1, r5
 800489a:	4638      	mov	r0, r7
 800489c:	f7ff ffc2 	bl	8004824 <sbrk_aligned>
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	4604      	mov	r4, r0
 80048a4:	d14d      	bne.n	8004942 <_malloc_r+0xde>
 80048a6:	6834      	ldr	r4, [r6, #0]
 80048a8:	4626      	mov	r6, r4
 80048aa:	2e00      	cmp	r6, #0
 80048ac:	d140      	bne.n	8004930 <_malloc_r+0xcc>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	4631      	mov	r1, r6
 80048b2:	4638      	mov	r0, r7
 80048b4:	eb04 0803 	add.w	r8, r4, r3
 80048b8:	f000 fcb2 	bl	8005220 <_sbrk_r>
 80048bc:	4580      	cmp	r8, r0
 80048be:	d13a      	bne.n	8004936 <_malloc_r+0xd2>
 80048c0:	6821      	ldr	r1, [r4, #0]
 80048c2:	3503      	adds	r5, #3
 80048c4:	1a6d      	subs	r5, r5, r1
 80048c6:	f025 0503 	bic.w	r5, r5, #3
 80048ca:	3508      	adds	r5, #8
 80048cc:	2d0c      	cmp	r5, #12
 80048ce:	bf38      	it	cc
 80048d0:	250c      	movcc	r5, #12
 80048d2:	4629      	mov	r1, r5
 80048d4:	4638      	mov	r0, r7
 80048d6:	f7ff ffa5 	bl	8004824 <sbrk_aligned>
 80048da:	3001      	adds	r0, #1
 80048dc:	d02b      	beq.n	8004936 <_malloc_r+0xd2>
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	442b      	add	r3, r5
 80048e2:	6023      	str	r3, [r4, #0]
 80048e4:	e00e      	b.n	8004904 <_malloc_r+0xa0>
 80048e6:	6822      	ldr	r2, [r4, #0]
 80048e8:	1b52      	subs	r2, r2, r5
 80048ea:	d41e      	bmi.n	800492a <_malloc_r+0xc6>
 80048ec:	2a0b      	cmp	r2, #11
 80048ee:	d916      	bls.n	800491e <_malloc_r+0xba>
 80048f0:	1961      	adds	r1, r4, r5
 80048f2:	42a3      	cmp	r3, r4
 80048f4:	6025      	str	r5, [r4, #0]
 80048f6:	bf18      	it	ne
 80048f8:	6059      	strne	r1, [r3, #4]
 80048fa:	6863      	ldr	r3, [r4, #4]
 80048fc:	bf08      	it	eq
 80048fe:	6031      	streq	r1, [r6, #0]
 8004900:	5162      	str	r2, [r4, r5]
 8004902:	604b      	str	r3, [r1, #4]
 8004904:	4638      	mov	r0, r7
 8004906:	f104 060b 	add.w	r6, r4, #11
 800490a:	f001 fb4b 	bl	8005fa4 <__malloc_unlock>
 800490e:	f026 0607 	bic.w	r6, r6, #7
 8004912:	1d23      	adds	r3, r4, #4
 8004914:	1af2      	subs	r2, r6, r3
 8004916:	d0b6      	beq.n	8004886 <_malloc_r+0x22>
 8004918:	1b9b      	subs	r3, r3, r6
 800491a:	50a3      	str	r3, [r4, r2]
 800491c:	e7b3      	b.n	8004886 <_malloc_r+0x22>
 800491e:	6862      	ldr	r2, [r4, #4]
 8004920:	42a3      	cmp	r3, r4
 8004922:	bf0c      	ite	eq
 8004924:	6032      	streq	r2, [r6, #0]
 8004926:	605a      	strne	r2, [r3, #4]
 8004928:	e7ec      	b.n	8004904 <_malloc_r+0xa0>
 800492a:	4623      	mov	r3, r4
 800492c:	6864      	ldr	r4, [r4, #4]
 800492e:	e7b2      	b.n	8004896 <_malloc_r+0x32>
 8004930:	4634      	mov	r4, r6
 8004932:	6876      	ldr	r6, [r6, #4]
 8004934:	e7b9      	b.n	80048aa <_malloc_r+0x46>
 8004936:	230c      	movs	r3, #12
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	4638      	mov	r0, r7
 800493c:	f001 fb32 	bl	8005fa4 <__malloc_unlock>
 8004940:	e7a1      	b.n	8004886 <_malloc_r+0x22>
 8004942:	6025      	str	r5, [r4, #0]
 8004944:	e7de      	b.n	8004904 <_malloc_r+0xa0>
 8004946:	bf00      	nop
 8004948:	2000029c 	.word	0x2000029c

0800494c <__cvt>:
 800494c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004950:	ec55 4b10 	vmov	r4, r5, d0
 8004954:	2d00      	cmp	r5, #0
 8004956:	460e      	mov	r6, r1
 8004958:	4619      	mov	r1, r3
 800495a:	462b      	mov	r3, r5
 800495c:	bfbb      	ittet	lt
 800495e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004962:	461d      	movlt	r5, r3
 8004964:	2300      	movge	r3, #0
 8004966:	232d      	movlt	r3, #45	; 0x2d
 8004968:	700b      	strb	r3, [r1, #0]
 800496a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800496c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004970:	4691      	mov	r9, r2
 8004972:	f023 0820 	bic.w	r8, r3, #32
 8004976:	bfbc      	itt	lt
 8004978:	4622      	movlt	r2, r4
 800497a:	4614      	movlt	r4, r2
 800497c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004980:	d005      	beq.n	800498e <__cvt+0x42>
 8004982:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004986:	d100      	bne.n	800498a <__cvt+0x3e>
 8004988:	3601      	adds	r6, #1
 800498a:	2102      	movs	r1, #2
 800498c:	e000      	b.n	8004990 <__cvt+0x44>
 800498e:	2103      	movs	r1, #3
 8004990:	ab03      	add	r3, sp, #12
 8004992:	9301      	str	r3, [sp, #4]
 8004994:	ab02      	add	r3, sp, #8
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	ec45 4b10 	vmov	d0, r4, r5
 800499c:	4653      	mov	r3, sl
 800499e:	4632      	mov	r2, r6
 80049a0:	f000 fcfa 	bl	8005398 <_dtoa_r>
 80049a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049a8:	4607      	mov	r7, r0
 80049aa:	d102      	bne.n	80049b2 <__cvt+0x66>
 80049ac:	f019 0f01 	tst.w	r9, #1
 80049b0:	d022      	beq.n	80049f8 <__cvt+0xac>
 80049b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049b6:	eb07 0906 	add.w	r9, r7, r6
 80049ba:	d110      	bne.n	80049de <__cvt+0x92>
 80049bc:	783b      	ldrb	r3, [r7, #0]
 80049be:	2b30      	cmp	r3, #48	; 0x30
 80049c0:	d10a      	bne.n	80049d8 <__cvt+0x8c>
 80049c2:	2200      	movs	r2, #0
 80049c4:	2300      	movs	r3, #0
 80049c6:	4620      	mov	r0, r4
 80049c8:	4629      	mov	r1, r5
 80049ca:	f7fc f885 	bl	8000ad8 <__aeabi_dcmpeq>
 80049ce:	b918      	cbnz	r0, 80049d8 <__cvt+0x8c>
 80049d0:	f1c6 0601 	rsb	r6, r6, #1
 80049d4:	f8ca 6000 	str.w	r6, [sl]
 80049d8:	f8da 3000 	ldr.w	r3, [sl]
 80049dc:	4499      	add	r9, r3
 80049de:	2200      	movs	r2, #0
 80049e0:	2300      	movs	r3, #0
 80049e2:	4620      	mov	r0, r4
 80049e4:	4629      	mov	r1, r5
 80049e6:	f7fc f877 	bl	8000ad8 <__aeabi_dcmpeq>
 80049ea:	b108      	cbz	r0, 80049f0 <__cvt+0xa4>
 80049ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80049f0:	2230      	movs	r2, #48	; 0x30
 80049f2:	9b03      	ldr	r3, [sp, #12]
 80049f4:	454b      	cmp	r3, r9
 80049f6:	d307      	bcc.n	8004a08 <__cvt+0xbc>
 80049f8:	9b03      	ldr	r3, [sp, #12]
 80049fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049fc:	1bdb      	subs	r3, r3, r7
 80049fe:	4638      	mov	r0, r7
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	b004      	add	sp, #16
 8004a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a08:	1c59      	adds	r1, r3, #1
 8004a0a:	9103      	str	r1, [sp, #12]
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	e7f0      	b.n	80049f2 <__cvt+0xa6>

08004a10 <__exponent>:
 8004a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a12:	4603      	mov	r3, r0
 8004a14:	2900      	cmp	r1, #0
 8004a16:	bfb8      	it	lt
 8004a18:	4249      	neglt	r1, r1
 8004a1a:	f803 2b02 	strb.w	r2, [r3], #2
 8004a1e:	bfb4      	ite	lt
 8004a20:	222d      	movlt	r2, #45	; 0x2d
 8004a22:	222b      	movge	r2, #43	; 0x2b
 8004a24:	2909      	cmp	r1, #9
 8004a26:	7042      	strb	r2, [r0, #1]
 8004a28:	dd2a      	ble.n	8004a80 <__exponent+0x70>
 8004a2a:	f10d 0407 	add.w	r4, sp, #7
 8004a2e:	46a4      	mov	ip, r4
 8004a30:	270a      	movs	r7, #10
 8004a32:	46a6      	mov	lr, r4
 8004a34:	460a      	mov	r2, r1
 8004a36:	fb91 f6f7 	sdiv	r6, r1, r7
 8004a3a:	fb07 1516 	mls	r5, r7, r6, r1
 8004a3e:	3530      	adds	r5, #48	; 0x30
 8004a40:	2a63      	cmp	r2, #99	; 0x63
 8004a42:	f104 34ff 	add.w	r4, r4, #4294967295
 8004a46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	dcf1      	bgt.n	8004a32 <__exponent+0x22>
 8004a4e:	3130      	adds	r1, #48	; 0x30
 8004a50:	f1ae 0502 	sub.w	r5, lr, #2
 8004a54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004a58:	1c44      	adds	r4, r0, #1
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	4561      	cmp	r1, ip
 8004a5e:	d30a      	bcc.n	8004a76 <__exponent+0x66>
 8004a60:	f10d 0209 	add.w	r2, sp, #9
 8004a64:	eba2 020e 	sub.w	r2, r2, lr
 8004a68:	4565      	cmp	r5, ip
 8004a6a:	bf88      	it	hi
 8004a6c:	2200      	movhi	r2, #0
 8004a6e:	4413      	add	r3, r2
 8004a70:	1a18      	subs	r0, r3, r0
 8004a72:	b003      	add	sp, #12
 8004a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004a7e:	e7ed      	b.n	8004a5c <__exponent+0x4c>
 8004a80:	2330      	movs	r3, #48	; 0x30
 8004a82:	3130      	adds	r1, #48	; 0x30
 8004a84:	7083      	strb	r3, [r0, #2]
 8004a86:	70c1      	strb	r1, [r0, #3]
 8004a88:	1d03      	adds	r3, r0, #4
 8004a8a:	e7f1      	b.n	8004a70 <__exponent+0x60>

08004a8c <_printf_float>:
 8004a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a90:	ed2d 8b02 	vpush	{d8}
 8004a94:	b08d      	sub	sp, #52	; 0x34
 8004a96:	460c      	mov	r4, r1
 8004a98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004a9c:	4616      	mov	r6, r2
 8004a9e:	461f      	mov	r7, r3
 8004aa0:	4605      	mov	r5, r0
 8004aa2:	f001 fa67 	bl	8005f74 <_localeconv_r>
 8004aa6:	f8d0 a000 	ldr.w	sl, [r0]
 8004aaa:	4650      	mov	r0, sl
 8004aac:	f7fb fb98 	bl	80001e0 <strlen>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	9305      	str	r3, [sp, #20]
 8004ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8004abc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004ac0:	3307      	adds	r3, #7
 8004ac2:	f023 0307 	bic.w	r3, r3, #7
 8004ac6:	f103 0208 	add.w	r2, r3, #8
 8004aca:	f8c8 2000 	str.w	r2, [r8]
 8004ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ad6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004ada:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ade:	9307      	str	r3, [sp, #28]
 8004ae0:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ae4:	ee08 0a10 	vmov	s16, r0
 8004ae8:	4b9f      	ldr	r3, [pc, #636]	; (8004d68 <_printf_float+0x2dc>)
 8004aea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004aee:	f04f 32ff 	mov.w	r2, #4294967295
 8004af2:	f7fc f823 	bl	8000b3c <__aeabi_dcmpun>
 8004af6:	bb88      	cbnz	r0, 8004b5c <_printf_float+0xd0>
 8004af8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004afc:	4b9a      	ldr	r3, [pc, #616]	; (8004d68 <_printf_float+0x2dc>)
 8004afe:	f04f 32ff 	mov.w	r2, #4294967295
 8004b02:	f7fb fffd 	bl	8000b00 <__aeabi_dcmple>
 8004b06:	bb48      	cbnz	r0, 8004b5c <_printf_float+0xd0>
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	4640      	mov	r0, r8
 8004b0e:	4649      	mov	r1, r9
 8004b10:	f7fb ffec 	bl	8000aec <__aeabi_dcmplt>
 8004b14:	b110      	cbz	r0, 8004b1c <_printf_float+0x90>
 8004b16:	232d      	movs	r3, #45	; 0x2d
 8004b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b1c:	4b93      	ldr	r3, [pc, #588]	; (8004d6c <_printf_float+0x2e0>)
 8004b1e:	4894      	ldr	r0, [pc, #592]	; (8004d70 <_printf_float+0x2e4>)
 8004b20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004b24:	bf94      	ite	ls
 8004b26:	4698      	movls	r8, r3
 8004b28:	4680      	movhi	r8, r0
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	6123      	str	r3, [r4, #16]
 8004b2e:	9b05      	ldr	r3, [sp, #20]
 8004b30:	f023 0204 	bic.w	r2, r3, #4
 8004b34:	6022      	str	r2, [r4, #0]
 8004b36:	f04f 0900 	mov.w	r9, #0
 8004b3a:	9700      	str	r7, [sp, #0]
 8004b3c:	4633      	mov	r3, r6
 8004b3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004b40:	4621      	mov	r1, r4
 8004b42:	4628      	mov	r0, r5
 8004b44:	f000 f9d8 	bl	8004ef8 <_printf_common>
 8004b48:	3001      	adds	r0, #1
 8004b4a:	f040 8090 	bne.w	8004c6e <_printf_float+0x1e2>
 8004b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b52:	b00d      	add	sp, #52	; 0x34
 8004b54:	ecbd 8b02 	vpop	{d8}
 8004b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	464b      	mov	r3, r9
 8004b60:	4640      	mov	r0, r8
 8004b62:	4649      	mov	r1, r9
 8004b64:	f7fb ffea 	bl	8000b3c <__aeabi_dcmpun>
 8004b68:	b140      	cbz	r0, 8004b7c <_printf_float+0xf0>
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	bfbc      	itt	lt
 8004b70:	232d      	movlt	r3, #45	; 0x2d
 8004b72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b76:	487f      	ldr	r0, [pc, #508]	; (8004d74 <_printf_float+0x2e8>)
 8004b78:	4b7f      	ldr	r3, [pc, #508]	; (8004d78 <_printf_float+0x2ec>)
 8004b7a:	e7d1      	b.n	8004b20 <_printf_float+0x94>
 8004b7c:	6863      	ldr	r3, [r4, #4]
 8004b7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004b82:	9206      	str	r2, [sp, #24]
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	d13f      	bne.n	8004c08 <_printf_float+0x17c>
 8004b88:	2306      	movs	r3, #6
 8004b8a:	6063      	str	r3, [r4, #4]
 8004b8c:	9b05      	ldr	r3, [sp, #20]
 8004b8e:	6861      	ldr	r1, [r4, #4]
 8004b90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004b94:	2300      	movs	r3, #0
 8004b96:	9303      	str	r3, [sp, #12]
 8004b98:	ab0a      	add	r3, sp, #40	; 0x28
 8004b9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004b9e:	ab09      	add	r3, sp, #36	; 0x24
 8004ba0:	ec49 8b10 	vmov	d0, r8, r9
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	6022      	str	r2, [r4, #0]
 8004ba8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004bac:	4628      	mov	r0, r5
 8004bae:	f7ff fecd 	bl	800494c <__cvt>
 8004bb2:	9b06      	ldr	r3, [sp, #24]
 8004bb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bb6:	2b47      	cmp	r3, #71	; 0x47
 8004bb8:	4680      	mov	r8, r0
 8004bba:	d108      	bne.n	8004bce <_printf_float+0x142>
 8004bbc:	1cc8      	adds	r0, r1, #3
 8004bbe:	db02      	blt.n	8004bc6 <_printf_float+0x13a>
 8004bc0:	6863      	ldr	r3, [r4, #4]
 8004bc2:	4299      	cmp	r1, r3
 8004bc4:	dd41      	ble.n	8004c4a <_printf_float+0x1be>
 8004bc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8004bca:	fa5f fb8b 	uxtb.w	fp, fp
 8004bce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004bd2:	d820      	bhi.n	8004c16 <_printf_float+0x18a>
 8004bd4:	3901      	subs	r1, #1
 8004bd6:	465a      	mov	r2, fp
 8004bd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004bdc:	9109      	str	r1, [sp, #36]	; 0x24
 8004bde:	f7ff ff17 	bl	8004a10 <__exponent>
 8004be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004be4:	1813      	adds	r3, r2, r0
 8004be6:	2a01      	cmp	r2, #1
 8004be8:	4681      	mov	r9, r0
 8004bea:	6123      	str	r3, [r4, #16]
 8004bec:	dc02      	bgt.n	8004bf4 <_printf_float+0x168>
 8004bee:	6822      	ldr	r2, [r4, #0]
 8004bf0:	07d2      	lsls	r2, r2, #31
 8004bf2:	d501      	bpl.n	8004bf8 <_printf_float+0x16c>
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	6123      	str	r3, [r4, #16]
 8004bf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d09c      	beq.n	8004b3a <_printf_float+0xae>
 8004c00:	232d      	movs	r3, #45	; 0x2d
 8004c02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c06:	e798      	b.n	8004b3a <_printf_float+0xae>
 8004c08:	9a06      	ldr	r2, [sp, #24]
 8004c0a:	2a47      	cmp	r2, #71	; 0x47
 8004c0c:	d1be      	bne.n	8004b8c <_printf_float+0x100>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1bc      	bne.n	8004b8c <_printf_float+0x100>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e7b9      	b.n	8004b8a <_printf_float+0xfe>
 8004c16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004c1a:	d118      	bne.n	8004c4e <_printf_float+0x1c2>
 8004c1c:	2900      	cmp	r1, #0
 8004c1e:	6863      	ldr	r3, [r4, #4]
 8004c20:	dd0b      	ble.n	8004c3a <_printf_float+0x1ae>
 8004c22:	6121      	str	r1, [r4, #16]
 8004c24:	b913      	cbnz	r3, 8004c2c <_printf_float+0x1a0>
 8004c26:	6822      	ldr	r2, [r4, #0]
 8004c28:	07d0      	lsls	r0, r2, #31
 8004c2a:	d502      	bpl.n	8004c32 <_printf_float+0x1a6>
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	440b      	add	r3, r1
 8004c30:	6123      	str	r3, [r4, #16]
 8004c32:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c34:	f04f 0900 	mov.w	r9, #0
 8004c38:	e7de      	b.n	8004bf8 <_printf_float+0x16c>
 8004c3a:	b913      	cbnz	r3, 8004c42 <_printf_float+0x1b6>
 8004c3c:	6822      	ldr	r2, [r4, #0]
 8004c3e:	07d2      	lsls	r2, r2, #31
 8004c40:	d501      	bpl.n	8004c46 <_printf_float+0x1ba>
 8004c42:	3302      	adds	r3, #2
 8004c44:	e7f4      	b.n	8004c30 <_printf_float+0x1a4>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e7f2      	b.n	8004c30 <_printf_float+0x1a4>
 8004c4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c50:	4299      	cmp	r1, r3
 8004c52:	db05      	blt.n	8004c60 <_printf_float+0x1d4>
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	6121      	str	r1, [r4, #16]
 8004c58:	07d8      	lsls	r0, r3, #31
 8004c5a:	d5ea      	bpl.n	8004c32 <_printf_float+0x1a6>
 8004c5c:	1c4b      	adds	r3, r1, #1
 8004c5e:	e7e7      	b.n	8004c30 <_printf_float+0x1a4>
 8004c60:	2900      	cmp	r1, #0
 8004c62:	bfd4      	ite	le
 8004c64:	f1c1 0202 	rsble	r2, r1, #2
 8004c68:	2201      	movgt	r2, #1
 8004c6a:	4413      	add	r3, r2
 8004c6c:	e7e0      	b.n	8004c30 <_printf_float+0x1a4>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	055a      	lsls	r2, r3, #21
 8004c72:	d407      	bmi.n	8004c84 <_printf_float+0x1f8>
 8004c74:	6923      	ldr	r3, [r4, #16]
 8004c76:	4642      	mov	r2, r8
 8004c78:	4631      	mov	r1, r6
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	47b8      	blx	r7
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d12c      	bne.n	8004cdc <_printf_float+0x250>
 8004c82:	e764      	b.n	8004b4e <_printf_float+0xc2>
 8004c84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c88:	f240 80e0 	bls.w	8004e4c <_printf_float+0x3c0>
 8004c8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c90:	2200      	movs	r2, #0
 8004c92:	2300      	movs	r3, #0
 8004c94:	f7fb ff20 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	d034      	beq.n	8004d06 <_printf_float+0x27a>
 8004c9c:	4a37      	ldr	r2, [pc, #220]	; (8004d7c <_printf_float+0x2f0>)
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4631      	mov	r1, r6
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b8      	blx	r7
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	f43f af51 	beq.w	8004b4e <_printf_float+0xc2>
 8004cac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	db02      	blt.n	8004cba <_printf_float+0x22e>
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	07d8      	lsls	r0, r3, #31
 8004cb8:	d510      	bpl.n	8004cdc <_printf_float+0x250>
 8004cba:	ee18 3a10 	vmov	r3, s16
 8004cbe:	4652      	mov	r2, sl
 8004cc0:	4631      	mov	r1, r6
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	47b8      	blx	r7
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	f43f af41 	beq.w	8004b4e <_printf_float+0xc2>
 8004ccc:	f04f 0800 	mov.w	r8, #0
 8004cd0:	f104 091a 	add.w	r9, r4, #26
 8004cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	4543      	cmp	r3, r8
 8004cda:	dc09      	bgt.n	8004cf0 <_printf_float+0x264>
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	079b      	lsls	r3, r3, #30
 8004ce0:	f100 8105 	bmi.w	8004eee <_printf_float+0x462>
 8004ce4:	68e0      	ldr	r0, [r4, #12]
 8004ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ce8:	4298      	cmp	r0, r3
 8004cea:	bfb8      	it	lt
 8004cec:	4618      	movlt	r0, r3
 8004cee:	e730      	b.n	8004b52 <_printf_float+0xc6>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	464a      	mov	r2, r9
 8004cf4:	4631      	mov	r1, r6
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	47b8      	blx	r7
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	f43f af27 	beq.w	8004b4e <_printf_float+0xc2>
 8004d00:	f108 0801 	add.w	r8, r8, #1
 8004d04:	e7e6      	b.n	8004cd4 <_printf_float+0x248>
 8004d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	dc39      	bgt.n	8004d80 <_printf_float+0x2f4>
 8004d0c:	4a1b      	ldr	r2, [pc, #108]	; (8004d7c <_printf_float+0x2f0>)
 8004d0e:	2301      	movs	r3, #1
 8004d10:	4631      	mov	r1, r6
 8004d12:	4628      	mov	r0, r5
 8004d14:	47b8      	blx	r7
 8004d16:	3001      	adds	r0, #1
 8004d18:	f43f af19 	beq.w	8004b4e <_printf_float+0xc2>
 8004d1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d20:	4313      	orrs	r3, r2
 8004d22:	d102      	bne.n	8004d2a <_printf_float+0x29e>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	07d9      	lsls	r1, r3, #31
 8004d28:	d5d8      	bpl.n	8004cdc <_printf_float+0x250>
 8004d2a:	ee18 3a10 	vmov	r3, s16
 8004d2e:	4652      	mov	r2, sl
 8004d30:	4631      	mov	r1, r6
 8004d32:	4628      	mov	r0, r5
 8004d34:	47b8      	blx	r7
 8004d36:	3001      	adds	r0, #1
 8004d38:	f43f af09 	beq.w	8004b4e <_printf_float+0xc2>
 8004d3c:	f04f 0900 	mov.w	r9, #0
 8004d40:	f104 0a1a 	add.w	sl, r4, #26
 8004d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d46:	425b      	negs	r3, r3
 8004d48:	454b      	cmp	r3, r9
 8004d4a:	dc01      	bgt.n	8004d50 <_printf_float+0x2c4>
 8004d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d4e:	e792      	b.n	8004c76 <_printf_float+0x1ea>
 8004d50:	2301      	movs	r3, #1
 8004d52:	4652      	mov	r2, sl
 8004d54:	4631      	mov	r1, r6
 8004d56:	4628      	mov	r0, r5
 8004d58:	47b8      	blx	r7
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	f43f aef7 	beq.w	8004b4e <_printf_float+0xc2>
 8004d60:	f109 0901 	add.w	r9, r9, #1
 8004d64:	e7ee      	b.n	8004d44 <_printf_float+0x2b8>
 8004d66:	bf00      	nop
 8004d68:	7fefffff 	.word	0x7fefffff
 8004d6c:	080090ac 	.word	0x080090ac
 8004d70:	080090b0 	.word	0x080090b0
 8004d74:	080090b8 	.word	0x080090b8
 8004d78:	080090b4 	.word	0x080090b4
 8004d7c:	080090bc 	.word	0x080090bc
 8004d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d84:	429a      	cmp	r2, r3
 8004d86:	bfa8      	it	ge
 8004d88:	461a      	movge	r2, r3
 8004d8a:	2a00      	cmp	r2, #0
 8004d8c:	4691      	mov	r9, r2
 8004d8e:	dc37      	bgt.n	8004e00 <_printf_float+0x374>
 8004d90:	f04f 0b00 	mov.w	fp, #0
 8004d94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d98:	f104 021a 	add.w	r2, r4, #26
 8004d9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d9e:	9305      	str	r3, [sp, #20]
 8004da0:	eba3 0309 	sub.w	r3, r3, r9
 8004da4:	455b      	cmp	r3, fp
 8004da6:	dc33      	bgt.n	8004e10 <_printf_float+0x384>
 8004da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dac:	429a      	cmp	r2, r3
 8004dae:	db3b      	blt.n	8004e28 <_printf_float+0x39c>
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	07da      	lsls	r2, r3, #31
 8004db4:	d438      	bmi.n	8004e28 <_printf_float+0x39c>
 8004db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004db8:	9a05      	ldr	r2, [sp, #20]
 8004dba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004dbc:	1a9a      	subs	r2, r3, r2
 8004dbe:	eba3 0901 	sub.w	r9, r3, r1
 8004dc2:	4591      	cmp	r9, r2
 8004dc4:	bfa8      	it	ge
 8004dc6:	4691      	movge	r9, r2
 8004dc8:	f1b9 0f00 	cmp.w	r9, #0
 8004dcc:	dc35      	bgt.n	8004e3a <_printf_float+0x3ae>
 8004dce:	f04f 0800 	mov.w	r8, #0
 8004dd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dd6:	f104 0a1a 	add.w	sl, r4, #26
 8004dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dde:	1a9b      	subs	r3, r3, r2
 8004de0:	eba3 0309 	sub.w	r3, r3, r9
 8004de4:	4543      	cmp	r3, r8
 8004de6:	f77f af79 	ble.w	8004cdc <_printf_float+0x250>
 8004dea:	2301      	movs	r3, #1
 8004dec:	4652      	mov	r2, sl
 8004dee:	4631      	mov	r1, r6
 8004df0:	4628      	mov	r0, r5
 8004df2:	47b8      	blx	r7
 8004df4:	3001      	adds	r0, #1
 8004df6:	f43f aeaa 	beq.w	8004b4e <_printf_float+0xc2>
 8004dfa:	f108 0801 	add.w	r8, r8, #1
 8004dfe:	e7ec      	b.n	8004dda <_printf_float+0x34e>
 8004e00:	4613      	mov	r3, r2
 8004e02:	4631      	mov	r1, r6
 8004e04:	4642      	mov	r2, r8
 8004e06:	4628      	mov	r0, r5
 8004e08:	47b8      	blx	r7
 8004e0a:	3001      	adds	r0, #1
 8004e0c:	d1c0      	bne.n	8004d90 <_printf_float+0x304>
 8004e0e:	e69e      	b.n	8004b4e <_printf_float+0xc2>
 8004e10:	2301      	movs	r3, #1
 8004e12:	4631      	mov	r1, r6
 8004e14:	4628      	mov	r0, r5
 8004e16:	9205      	str	r2, [sp, #20]
 8004e18:	47b8      	blx	r7
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	f43f ae97 	beq.w	8004b4e <_printf_float+0xc2>
 8004e20:	9a05      	ldr	r2, [sp, #20]
 8004e22:	f10b 0b01 	add.w	fp, fp, #1
 8004e26:	e7b9      	b.n	8004d9c <_printf_float+0x310>
 8004e28:	ee18 3a10 	vmov	r3, s16
 8004e2c:	4652      	mov	r2, sl
 8004e2e:	4631      	mov	r1, r6
 8004e30:	4628      	mov	r0, r5
 8004e32:	47b8      	blx	r7
 8004e34:	3001      	adds	r0, #1
 8004e36:	d1be      	bne.n	8004db6 <_printf_float+0x32a>
 8004e38:	e689      	b.n	8004b4e <_printf_float+0xc2>
 8004e3a:	9a05      	ldr	r2, [sp, #20]
 8004e3c:	464b      	mov	r3, r9
 8004e3e:	4442      	add	r2, r8
 8004e40:	4631      	mov	r1, r6
 8004e42:	4628      	mov	r0, r5
 8004e44:	47b8      	blx	r7
 8004e46:	3001      	adds	r0, #1
 8004e48:	d1c1      	bne.n	8004dce <_printf_float+0x342>
 8004e4a:	e680      	b.n	8004b4e <_printf_float+0xc2>
 8004e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e4e:	2a01      	cmp	r2, #1
 8004e50:	dc01      	bgt.n	8004e56 <_printf_float+0x3ca>
 8004e52:	07db      	lsls	r3, r3, #31
 8004e54:	d538      	bpl.n	8004ec8 <_printf_float+0x43c>
 8004e56:	2301      	movs	r3, #1
 8004e58:	4642      	mov	r2, r8
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	47b8      	blx	r7
 8004e60:	3001      	adds	r0, #1
 8004e62:	f43f ae74 	beq.w	8004b4e <_printf_float+0xc2>
 8004e66:	ee18 3a10 	vmov	r3, s16
 8004e6a:	4652      	mov	r2, sl
 8004e6c:	4631      	mov	r1, r6
 8004e6e:	4628      	mov	r0, r5
 8004e70:	47b8      	blx	r7
 8004e72:	3001      	adds	r0, #1
 8004e74:	f43f ae6b 	beq.w	8004b4e <_printf_float+0xc2>
 8004e78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f7fb fe2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e84:	b9d8      	cbnz	r0, 8004ebe <_printf_float+0x432>
 8004e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e88:	f108 0201 	add.w	r2, r8, #1
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	4631      	mov	r1, r6
 8004e90:	4628      	mov	r0, r5
 8004e92:	47b8      	blx	r7
 8004e94:	3001      	adds	r0, #1
 8004e96:	d10e      	bne.n	8004eb6 <_printf_float+0x42a>
 8004e98:	e659      	b.n	8004b4e <_printf_float+0xc2>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	4652      	mov	r2, sl
 8004e9e:	4631      	mov	r1, r6
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	47b8      	blx	r7
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	f43f ae52 	beq.w	8004b4e <_printf_float+0xc2>
 8004eaa:	f108 0801 	add.w	r8, r8, #1
 8004eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	4543      	cmp	r3, r8
 8004eb4:	dcf1      	bgt.n	8004e9a <_printf_float+0x40e>
 8004eb6:	464b      	mov	r3, r9
 8004eb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ebc:	e6dc      	b.n	8004c78 <_printf_float+0x1ec>
 8004ebe:	f04f 0800 	mov.w	r8, #0
 8004ec2:	f104 0a1a 	add.w	sl, r4, #26
 8004ec6:	e7f2      	b.n	8004eae <_printf_float+0x422>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	4642      	mov	r2, r8
 8004ecc:	e7df      	b.n	8004e8e <_printf_float+0x402>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	464a      	mov	r2, r9
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	47b8      	blx	r7
 8004ed8:	3001      	adds	r0, #1
 8004eda:	f43f ae38 	beq.w	8004b4e <_printf_float+0xc2>
 8004ede:	f108 0801 	add.w	r8, r8, #1
 8004ee2:	68e3      	ldr	r3, [r4, #12]
 8004ee4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ee6:	1a5b      	subs	r3, r3, r1
 8004ee8:	4543      	cmp	r3, r8
 8004eea:	dcf0      	bgt.n	8004ece <_printf_float+0x442>
 8004eec:	e6fa      	b.n	8004ce4 <_printf_float+0x258>
 8004eee:	f04f 0800 	mov.w	r8, #0
 8004ef2:	f104 0919 	add.w	r9, r4, #25
 8004ef6:	e7f4      	b.n	8004ee2 <_printf_float+0x456>

08004ef8 <_printf_common>:
 8004ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004efc:	4616      	mov	r6, r2
 8004efe:	4699      	mov	r9, r3
 8004f00:	688a      	ldr	r2, [r1, #8]
 8004f02:	690b      	ldr	r3, [r1, #16]
 8004f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	bfb8      	it	lt
 8004f0c:	4613      	movlt	r3, r2
 8004f0e:	6033      	str	r3, [r6, #0]
 8004f10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f14:	4607      	mov	r7, r0
 8004f16:	460c      	mov	r4, r1
 8004f18:	b10a      	cbz	r2, 8004f1e <_printf_common+0x26>
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	6033      	str	r3, [r6, #0]
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	0699      	lsls	r1, r3, #26
 8004f22:	bf42      	ittt	mi
 8004f24:	6833      	ldrmi	r3, [r6, #0]
 8004f26:	3302      	addmi	r3, #2
 8004f28:	6033      	strmi	r3, [r6, #0]
 8004f2a:	6825      	ldr	r5, [r4, #0]
 8004f2c:	f015 0506 	ands.w	r5, r5, #6
 8004f30:	d106      	bne.n	8004f40 <_printf_common+0x48>
 8004f32:	f104 0a19 	add.w	sl, r4, #25
 8004f36:	68e3      	ldr	r3, [r4, #12]
 8004f38:	6832      	ldr	r2, [r6, #0]
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	42ab      	cmp	r3, r5
 8004f3e:	dc26      	bgt.n	8004f8e <_printf_common+0x96>
 8004f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f44:	1e13      	subs	r3, r2, #0
 8004f46:	6822      	ldr	r2, [r4, #0]
 8004f48:	bf18      	it	ne
 8004f4a:	2301      	movne	r3, #1
 8004f4c:	0692      	lsls	r2, r2, #26
 8004f4e:	d42b      	bmi.n	8004fa8 <_printf_common+0xb0>
 8004f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f54:	4649      	mov	r1, r9
 8004f56:	4638      	mov	r0, r7
 8004f58:	47c0      	blx	r8
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d01e      	beq.n	8004f9c <_printf_common+0xa4>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	68e5      	ldr	r5, [r4, #12]
 8004f62:	6832      	ldr	r2, [r6, #0]
 8004f64:	f003 0306 	and.w	r3, r3, #6
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	bf08      	it	eq
 8004f6c:	1aad      	subeq	r5, r5, r2
 8004f6e:	68a3      	ldr	r3, [r4, #8]
 8004f70:	6922      	ldr	r2, [r4, #16]
 8004f72:	bf0c      	ite	eq
 8004f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f78:	2500      	movne	r5, #0
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	bfc4      	itt	gt
 8004f7e:	1a9b      	subgt	r3, r3, r2
 8004f80:	18ed      	addgt	r5, r5, r3
 8004f82:	2600      	movs	r6, #0
 8004f84:	341a      	adds	r4, #26
 8004f86:	42b5      	cmp	r5, r6
 8004f88:	d11a      	bne.n	8004fc0 <_printf_common+0xc8>
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	e008      	b.n	8004fa0 <_printf_common+0xa8>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	4652      	mov	r2, sl
 8004f92:	4649      	mov	r1, r9
 8004f94:	4638      	mov	r0, r7
 8004f96:	47c0      	blx	r8
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d103      	bne.n	8004fa4 <_printf_common+0xac>
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa4:	3501      	adds	r5, #1
 8004fa6:	e7c6      	b.n	8004f36 <_printf_common+0x3e>
 8004fa8:	18e1      	adds	r1, r4, r3
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	2030      	movs	r0, #48	; 0x30
 8004fae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fb2:	4422      	add	r2, r4
 8004fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fbc:	3302      	adds	r3, #2
 8004fbe:	e7c7      	b.n	8004f50 <_printf_common+0x58>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	47c0      	blx	r8
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d0e6      	beq.n	8004f9c <_printf_common+0xa4>
 8004fce:	3601      	adds	r6, #1
 8004fd0:	e7d9      	b.n	8004f86 <_printf_common+0x8e>
	...

08004fd4 <_printf_i>:
 8004fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd8:	7e0f      	ldrb	r7, [r1, #24]
 8004fda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fdc:	2f78      	cmp	r7, #120	; 0x78
 8004fde:	4691      	mov	r9, r2
 8004fe0:	4680      	mov	r8, r0
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	469a      	mov	sl, r3
 8004fe6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fea:	d807      	bhi.n	8004ffc <_printf_i+0x28>
 8004fec:	2f62      	cmp	r7, #98	; 0x62
 8004fee:	d80a      	bhi.n	8005006 <_printf_i+0x32>
 8004ff0:	2f00      	cmp	r7, #0
 8004ff2:	f000 80d8 	beq.w	80051a6 <_printf_i+0x1d2>
 8004ff6:	2f58      	cmp	r7, #88	; 0x58
 8004ff8:	f000 80a3 	beq.w	8005142 <_printf_i+0x16e>
 8004ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005004:	e03a      	b.n	800507c <_printf_i+0xa8>
 8005006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800500a:	2b15      	cmp	r3, #21
 800500c:	d8f6      	bhi.n	8004ffc <_printf_i+0x28>
 800500e:	a101      	add	r1, pc, #4	; (adr r1, 8005014 <_printf_i+0x40>)
 8005010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005014:	0800506d 	.word	0x0800506d
 8005018:	08005081 	.word	0x08005081
 800501c:	08004ffd 	.word	0x08004ffd
 8005020:	08004ffd 	.word	0x08004ffd
 8005024:	08004ffd 	.word	0x08004ffd
 8005028:	08004ffd 	.word	0x08004ffd
 800502c:	08005081 	.word	0x08005081
 8005030:	08004ffd 	.word	0x08004ffd
 8005034:	08004ffd 	.word	0x08004ffd
 8005038:	08004ffd 	.word	0x08004ffd
 800503c:	08004ffd 	.word	0x08004ffd
 8005040:	0800518d 	.word	0x0800518d
 8005044:	080050b1 	.word	0x080050b1
 8005048:	0800516f 	.word	0x0800516f
 800504c:	08004ffd 	.word	0x08004ffd
 8005050:	08004ffd 	.word	0x08004ffd
 8005054:	080051af 	.word	0x080051af
 8005058:	08004ffd 	.word	0x08004ffd
 800505c:	080050b1 	.word	0x080050b1
 8005060:	08004ffd 	.word	0x08004ffd
 8005064:	08004ffd 	.word	0x08004ffd
 8005068:	08005177 	.word	0x08005177
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	1d1a      	adds	r2, r3, #4
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	602a      	str	r2, [r5, #0]
 8005074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800507c:	2301      	movs	r3, #1
 800507e:	e0a3      	b.n	80051c8 <_printf_i+0x1f4>
 8005080:	6820      	ldr	r0, [r4, #0]
 8005082:	6829      	ldr	r1, [r5, #0]
 8005084:	0606      	lsls	r6, r0, #24
 8005086:	f101 0304 	add.w	r3, r1, #4
 800508a:	d50a      	bpl.n	80050a2 <_printf_i+0xce>
 800508c:	680e      	ldr	r6, [r1, #0]
 800508e:	602b      	str	r3, [r5, #0]
 8005090:	2e00      	cmp	r6, #0
 8005092:	da03      	bge.n	800509c <_printf_i+0xc8>
 8005094:	232d      	movs	r3, #45	; 0x2d
 8005096:	4276      	negs	r6, r6
 8005098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800509c:	485e      	ldr	r0, [pc, #376]	; (8005218 <_printf_i+0x244>)
 800509e:	230a      	movs	r3, #10
 80050a0:	e019      	b.n	80050d6 <_printf_i+0x102>
 80050a2:	680e      	ldr	r6, [r1, #0]
 80050a4:	602b      	str	r3, [r5, #0]
 80050a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050aa:	bf18      	it	ne
 80050ac:	b236      	sxthne	r6, r6
 80050ae:	e7ef      	b.n	8005090 <_printf_i+0xbc>
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	6820      	ldr	r0, [r4, #0]
 80050b4:	1d19      	adds	r1, r3, #4
 80050b6:	6029      	str	r1, [r5, #0]
 80050b8:	0601      	lsls	r1, r0, #24
 80050ba:	d501      	bpl.n	80050c0 <_printf_i+0xec>
 80050bc:	681e      	ldr	r6, [r3, #0]
 80050be:	e002      	b.n	80050c6 <_printf_i+0xf2>
 80050c0:	0646      	lsls	r6, r0, #25
 80050c2:	d5fb      	bpl.n	80050bc <_printf_i+0xe8>
 80050c4:	881e      	ldrh	r6, [r3, #0]
 80050c6:	4854      	ldr	r0, [pc, #336]	; (8005218 <_printf_i+0x244>)
 80050c8:	2f6f      	cmp	r7, #111	; 0x6f
 80050ca:	bf0c      	ite	eq
 80050cc:	2308      	moveq	r3, #8
 80050ce:	230a      	movne	r3, #10
 80050d0:	2100      	movs	r1, #0
 80050d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050d6:	6865      	ldr	r5, [r4, #4]
 80050d8:	60a5      	str	r5, [r4, #8]
 80050da:	2d00      	cmp	r5, #0
 80050dc:	bfa2      	ittt	ge
 80050de:	6821      	ldrge	r1, [r4, #0]
 80050e0:	f021 0104 	bicge.w	r1, r1, #4
 80050e4:	6021      	strge	r1, [r4, #0]
 80050e6:	b90e      	cbnz	r6, 80050ec <_printf_i+0x118>
 80050e8:	2d00      	cmp	r5, #0
 80050ea:	d04d      	beq.n	8005188 <_printf_i+0x1b4>
 80050ec:	4615      	mov	r5, r2
 80050ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80050f2:	fb03 6711 	mls	r7, r3, r1, r6
 80050f6:	5dc7      	ldrb	r7, [r0, r7]
 80050f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050fc:	4637      	mov	r7, r6
 80050fe:	42bb      	cmp	r3, r7
 8005100:	460e      	mov	r6, r1
 8005102:	d9f4      	bls.n	80050ee <_printf_i+0x11a>
 8005104:	2b08      	cmp	r3, #8
 8005106:	d10b      	bne.n	8005120 <_printf_i+0x14c>
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	07de      	lsls	r6, r3, #31
 800510c:	d508      	bpl.n	8005120 <_printf_i+0x14c>
 800510e:	6923      	ldr	r3, [r4, #16]
 8005110:	6861      	ldr	r1, [r4, #4]
 8005112:	4299      	cmp	r1, r3
 8005114:	bfde      	ittt	le
 8005116:	2330      	movle	r3, #48	; 0x30
 8005118:	f805 3c01 	strble.w	r3, [r5, #-1]
 800511c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005120:	1b52      	subs	r2, r2, r5
 8005122:	6122      	str	r2, [r4, #16]
 8005124:	f8cd a000 	str.w	sl, [sp]
 8005128:	464b      	mov	r3, r9
 800512a:	aa03      	add	r2, sp, #12
 800512c:	4621      	mov	r1, r4
 800512e:	4640      	mov	r0, r8
 8005130:	f7ff fee2 	bl	8004ef8 <_printf_common>
 8005134:	3001      	adds	r0, #1
 8005136:	d14c      	bne.n	80051d2 <_printf_i+0x1fe>
 8005138:	f04f 30ff 	mov.w	r0, #4294967295
 800513c:	b004      	add	sp, #16
 800513e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005142:	4835      	ldr	r0, [pc, #212]	; (8005218 <_printf_i+0x244>)
 8005144:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005148:	6829      	ldr	r1, [r5, #0]
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005150:	6029      	str	r1, [r5, #0]
 8005152:	061d      	lsls	r5, r3, #24
 8005154:	d514      	bpl.n	8005180 <_printf_i+0x1ac>
 8005156:	07df      	lsls	r7, r3, #31
 8005158:	bf44      	itt	mi
 800515a:	f043 0320 	orrmi.w	r3, r3, #32
 800515e:	6023      	strmi	r3, [r4, #0]
 8005160:	b91e      	cbnz	r6, 800516a <_printf_i+0x196>
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	f023 0320 	bic.w	r3, r3, #32
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	2310      	movs	r3, #16
 800516c:	e7b0      	b.n	80050d0 <_printf_i+0xfc>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	f043 0320 	orr.w	r3, r3, #32
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	2378      	movs	r3, #120	; 0x78
 8005178:	4828      	ldr	r0, [pc, #160]	; (800521c <_printf_i+0x248>)
 800517a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800517e:	e7e3      	b.n	8005148 <_printf_i+0x174>
 8005180:	0659      	lsls	r1, r3, #25
 8005182:	bf48      	it	mi
 8005184:	b2b6      	uxthmi	r6, r6
 8005186:	e7e6      	b.n	8005156 <_printf_i+0x182>
 8005188:	4615      	mov	r5, r2
 800518a:	e7bb      	b.n	8005104 <_printf_i+0x130>
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	6826      	ldr	r6, [r4, #0]
 8005190:	6961      	ldr	r1, [r4, #20]
 8005192:	1d18      	adds	r0, r3, #4
 8005194:	6028      	str	r0, [r5, #0]
 8005196:	0635      	lsls	r5, r6, #24
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	d501      	bpl.n	80051a0 <_printf_i+0x1cc>
 800519c:	6019      	str	r1, [r3, #0]
 800519e:	e002      	b.n	80051a6 <_printf_i+0x1d2>
 80051a0:	0670      	lsls	r0, r6, #25
 80051a2:	d5fb      	bpl.n	800519c <_printf_i+0x1c8>
 80051a4:	8019      	strh	r1, [r3, #0]
 80051a6:	2300      	movs	r3, #0
 80051a8:	6123      	str	r3, [r4, #16]
 80051aa:	4615      	mov	r5, r2
 80051ac:	e7ba      	b.n	8005124 <_printf_i+0x150>
 80051ae:	682b      	ldr	r3, [r5, #0]
 80051b0:	1d1a      	adds	r2, r3, #4
 80051b2:	602a      	str	r2, [r5, #0]
 80051b4:	681d      	ldr	r5, [r3, #0]
 80051b6:	6862      	ldr	r2, [r4, #4]
 80051b8:	2100      	movs	r1, #0
 80051ba:	4628      	mov	r0, r5
 80051bc:	f7fb f818 	bl	80001f0 <memchr>
 80051c0:	b108      	cbz	r0, 80051c6 <_printf_i+0x1f2>
 80051c2:	1b40      	subs	r0, r0, r5
 80051c4:	6060      	str	r0, [r4, #4]
 80051c6:	6863      	ldr	r3, [r4, #4]
 80051c8:	6123      	str	r3, [r4, #16]
 80051ca:	2300      	movs	r3, #0
 80051cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051d0:	e7a8      	b.n	8005124 <_printf_i+0x150>
 80051d2:	6923      	ldr	r3, [r4, #16]
 80051d4:	462a      	mov	r2, r5
 80051d6:	4649      	mov	r1, r9
 80051d8:	4640      	mov	r0, r8
 80051da:	47d0      	blx	sl
 80051dc:	3001      	adds	r0, #1
 80051de:	d0ab      	beq.n	8005138 <_printf_i+0x164>
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	079b      	lsls	r3, r3, #30
 80051e4:	d413      	bmi.n	800520e <_printf_i+0x23a>
 80051e6:	68e0      	ldr	r0, [r4, #12]
 80051e8:	9b03      	ldr	r3, [sp, #12]
 80051ea:	4298      	cmp	r0, r3
 80051ec:	bfb8      	it	lt
 80051ee:	4618      	movlt	r0, r3
 80051f0:	e7a4      	b.n	800513c <_printf_i+0x168>
 80051f2:	2301      	movs	r3, #1
 80051f4:	4632      	mov	r2, r6
 80051f6:	4649      	mov	r1, r9
 80051f8:	4640      	mov	r0, r8
 80051fa:	47d0      	blx	sl
 80051fc:	3001      	adds	r0, #1
 80051fe:	d09b      	beq.n	8005138 <_printf_i+0x164>
 8005200:	3501      	adds	r5, #1
 8005202:	68e3      	ldr	r3, [r4, #12]
 8005204:	9903      	ldr	r1, [sp, #12]
 8005206:	1a5b      	subs	r3, r3, r1
 8005208:	42ab      	cmp	r3, r5
 800520a:	dcf2      	bgt.n	80051f2 <_printf_i+0x21e>
 800520c:	e7eb      	b.n	80051e6 <_printf_i+0x212>
 800520e:	2500      	movs	r5, #0
 8005210:	f104 0619 	add.w	r6, r4, #25
 8005214:	e7f5      	b.n	8005202 <_printf_i+0x22e>
 8005216:	bf00      	nop
 8005218:	080090be 	.word	0x080090be
 800521c:	080090cf 	.word	0x080090cf

08005220 <_sbrk_r>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	4d06      	ldr	r5, [pc, #24]	; (800523c <_sbrk_r+0x1c>)
 8005224:	2300      	movs	r3, #0
 8005226:	4604      	mov	r4, r0
 8005228:	4608      	mov	r0, r1
 800522a:	602b      	str	r3, [r5, #0]
 800522c:	f7fd fa6a 	bl	8002704 <_sbrk>
 8005230:	1c43      	adds	r3, r0, #1
 8005232:	d102      	bne.n	800523a <_sbrk_r+0x1a>
 8005234:	682b      	ldr	r3, [r5, #0]
 8005236:	b103      	cbz	r3, 800523a <_sbrk_r+0x1a>
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	bd38      	pop	{r3, r4, r5, pc}
 800523c:	200002a4 	.word	0x200002a4

08005240 <siprintf>:
 8005240:	b40e      	push	{r1, r2, r3}
 8005242:	b500      	push	{lr}
 8005244:	b09c      	sub	sp, #112	; 0x70
 8005246:	ab1d      	add	r3, sp, #116	; 0x74
 8005248:	9002      	str	r0, [sp, #8]
 800524a:	9006      	str	r0, [sp, #24]
 800524c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005250:	4809      	ldr	r0, [pc, #36]	; (8005278 <siprintf+0x38>)
 8005252:	9107      	str	r1, [sp, #28]
 8005254:	9104      	str	r1, [sp, #16]
 8005256:	4909      	ldr	r1, [pc, #36]	; (800527c <siprintf+0x3c>)
 8005258:	f853 2b04 	ldr.w	r2, [r3], #4
 800525c:	9105      	str	r1, [sp, #20]
 800525e:	6800      	ldr	r0, [r0, #0]
 8005260:	9301      	str	r3, [sp, #4]
 8005262:	a902      	add	r1, sp, #8
 8005264:	f001 fa9a 	bl	800679c <_svfiprintf_r>
 8005268:	9b02      	ldr	r3, [sp, #8]
 800526a:	2200      	movs	r2, #0
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	b01c      	add	sp, #112	; 0x70
 8005270:	f85d eb04 	ldr.w	lr, [sp], #4
 8005274:	b003      	add	sp, #12
 8005276:	4770      	bx	lr
 8005278:	20000024 	.word	0x20000024
 800527c:	ffff0208 	.word	0xffff0208

08005280 <quorem>:
 8005280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005284:	6903      	ldr	r3, [r0, #16]
 8005286:	690c      	ldr	r4, [r1, #16]
 8005288:	42a3      	cmp	r3, r4
 800528a:	4607      	mov	r7, r0
 800528c:	f2c0 8081 	blt.w	8005392 <quorem+0x112>
 8005290:	3c01      	subs	r4, #1
 8005292:	f101 0814 	add.w	r8, r1, #20
 8005296:	f100 0514 	add.w	r5, r0, #20
 800529a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800529e:	9301      	str	r3, [sp, #4]
 80052a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052a8:	3301      	adds	r3, #1
 80052aa:	429a      	cmp	r2, r3
 80052ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80052b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80052b8:	d331      	bcc.n	800531e <quorem+0x9e>
 80052ba:	f04f 0e00 	mov.w	lr, #0
 80052be:	4640      	mov	r0, r8
 80052c0:	46ac      	mov	ip, r5
 80052c2:	46f2      	mov	sl, lr
 80052c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80052c8:	b293      	uxth	r3, r2
 80052ca:	fb06 e303 	mla	r3, r6, r3, lr
 80052ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	ebaa 0303 	sub.w	r3, sl, r3
 80052d8:	f8dc a000 	ldr.w	sl, [ip]
 80052dc:	0c12      	lsrs	r2, r2, #16
 80052de:	fa13 f38a 	uxtah	r3, r3, sl
 80052e2:	fb06 e202 	mla	r2, r6, r2, lr
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	9b00      	ldr	r3, [sp, #0]
 80052ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052ee:	b292      	uxth	r2, r2
 80052f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80052f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80052fc:	4581      	cmp	r9, r0
 80052fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005302:	f84c 3b04 	str.w	r3, [ip], #4
 8005306:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800530a:	d2db      	bcs.n	80052c4 <quorem+0x44>
 800530c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005310:	b92b      	cbnz	r3, 800531e <quorem+0x9e>
 8005312:	9b01      	ldr	r3, [sp, #4]
 8005314:	3b04      	subs	r3, #4
 8005316:	429d      	cmp	r5, r3
 8005318:	461a      	mov	r2, r3
 800531a:	d32e      	bcc.n	800537a <quorem+0xfa>
 800531c:	613c      	str	r4, [r7, #16]
 800531e:	4638      	mov	r0, r7
 8005320:	f001 f8c8 	bl	80064b4 <__mcmp>
 8005324:	2800      	cmp	r0, #0
 8005326:	db24      	blt.n	8005372 <quorem+0xf2>
 8005328:	3601      	adds	r6, #1
 800532a:	4628      	mov	r0, r5
 800532c:	f04f 0c00 	mov.w	ip, #0
 8005330:	f858 2b04 	ldr.w	r2, [r8], #4
 8005334:	f8d0 e000 	ldr.w	lr, [r0]
 8005338:	b293      	uxth	r3, r2
 800533a:	ebac 0303 	sub.w	r3, ip, r3
 800533e:	0c12      	lsrs	r2, r2, #16
 8005340:	fa13 f38e 	uxtah	r3, r3, lr
 8005344:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005348:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800534c:	b29b      	uxth	r3, r3
 800534e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005352:	45c1      	cmp	r9, r8
 8005354:	f840 3b04 	str.w	r3, [r0], #4
 8005358:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800535c:	d2e8      	bcs.n	8005330 <quorem+0xb0>
 800535e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005362:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005366:	b922      	cbnz	r2, 8005372 <quorem+0xf2>
 8005368:	3b04      	subs	r3, #4
 800536a:	429d      	cmp	r5, r3
 800536c:	461a      	mov	r2, r3
 800536e:	d30a      	bcc.n	8005386 <quorem+0x106>
 8005370:	613c      	str	r4, [r7, #16]
 8005372:	4630      	mov	r0, r6
 8005374:	b003      	add	sp, #12
 8005376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	3b04      	subs	r3, #4
 800537e:	2a00      	cmp	r2, #0
 8005380:	d1cc      	bne.n	800531c <quorem+0x9c>
 8005382:	3c01      	subs	r4, #1
 8005384:	e7c7      	b.n	8005316 <quorem+0x96>
 8005386:	6812      	ldr	r2, [r2, #0]
 8005388:	3b04      	subs	r3, #4
 800538a:	2a00      	cmp	r2, #0
 800538c:	d1f0      	bne.n	8005370 <quorem+0xf0>
 800538e:	3c01      	subs	r4, #1
 8005390:	e7eb      	b.n	800536a <quorem+0xea>
 8005392:	2000      	movs	r0, #0
 8005394:	e7ee      	b.n	8005374 <quorem+0xf4>
	...

08005398 <_dtoa_r>:
 8005398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539c:	ed2d 8b04 	vpush	{d8-d9}
 80053a0:	ec57 6b10 	vmov	r6, r7, d0
 80053a4:	b093      	sub	sp, #76	; 0x4c
 80053a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80053ac:	9106      	str	r1, [sp, #24]
 80053ae:	ee10 aa10 	vmov	sl, s0
 80053b2:	4604      	mov	r4, r0
 80053b4:	9209      	str	r2, [sp, #36]	; 0x24
 80053b6:	930c      	str	r3, [sp, #48]	; 0x30
 80053b8:	46bb      	mov	fp, r7
 80053ba:	b975      	cbnz	r5, 80053da <_dtoa_r+0x42>
 80053bc:	2010      	movs	r0, #16
 80053be:	f7ff f9d5 	bl	800476c <malloc>
 80053c2:	4602      	mov	r2, r0
 80053c4:	6260      	str	r0, [r4, #36]	; 0x24
 80053c6:	b920      	cbnz	r0, 80053d2 <_dtoa_r+0x3a>
 80053c8:	4ba7      	ldr	r3, [pc, #668]	; (8005668 <_dtoa_r+0x2d0>)
 80053ca:	21ea      	movs	r1, #234	; 0xea
 80053cc:	48a7      	ldr	r0, [pc, #668]	; (800566c <_dtoa_r+0x2d4>)
 80053ce:	f001 fae5 	bl	800699c <__assert_func>
 80053d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053d6:	6005      	str	r5, [r0, #0]
 80053d8:	60c5      	str	r5, [r0, #12]
 80053da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053dc:	6819      	ldr	r1, [r3, #0]
 80053de:	b151      	cbz	r1, 80053f6 <_dtoa_r+0x5e>
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	604a      	str	r2, [r1, #4]
 80053e4:	2301      	movs	r3, #1
 80053e6:	4093      	lsls	r3, r2
 80053e8:	608b      	str	r3, [r1, #8]
 80053ea:	4620      	mov	r0, r4
 80053ec:	f000 fe20 	bl	8006030 <_Bfree>
 80053f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	1e3b      	subs	r3, r7, #0
 80053f8:	bfaa      	itet	ge
 80053fa:	2300      	movge	r3, #0
 80053fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005400:	f8c8 3000 	strge.w	r3, [r8]
 8005404:	4b9a      	ldr	r3, [pc, #616]	; (8005670 <_dtoa_r+0x2d8>)
 8005406:	bfbc      	itt	lt
 8005408:	2201      	movlt	r2, #1
 800540a:	f8c8 2000 	strlt.w	r2, [r8]
 800540e:	ea33 030b 	bics.w	r3, r3, fp
 8005412:	d11b      	bne.n	800544c <_dtoa_r+0xb4>
 8005414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005416:	f242 730f 	movw	r3, #9999	; 0x270f
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005420:	4333      	orrs	r3, r6
 8005422:	f000 8592 	beq.w	8005f4a <_dtoa_r+0xbb2>
 8005426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005428:	b963      	cbnz	r3, 8005444 <_dtoa_r+0xac>
 800542a:	4b92      	ldr	r3, [pc, #584]	; (8005674 <_dtoa_r+0x2dc>)
 800542c:	e022      	b.n	8005474 <_dtoa_r+0xdc>
 800542e:	4b92      	ldr	r3, [pc, #584]	; (8005678 <_dtoa_r+0x2e0>)
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	3308      	adds	r3, #8
 8005434:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	9801      	ldr	r0, [sp, #4]
 800543a:	b013      	add	sp, #76	; 0x4c
 800543c:	ecbd 8b04 	vpop	{d8-d9}
 8005440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005444:	4b8b      	ldr	r3, [pc, #556]	; (8005674 <_dtoa_r+0x2dc>)
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	3303      	adds	r3, #3
 800544a:	e7f3      	b.n	8005434 <_dtoa_r+0x9c>
 800544c:	2200      	movs	r2, #0
 800544e:	2300      	movs	r3, #0
 8005450:	4650      	mov	r0, sl
 8005452:	4659      	mov	r1, fp
 8005454:	f7fb fb40 	bl	8000ad8 <__aeabi_dcmpeq>
 8005458:	ec4b ab19 	vmov	d9, sl, fp
 800545c:	4680      	mov	r8, r0
 800545e:	b158      	cbz	r0, 8005478 <_dtoa_r+0xe0>
 8005460:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005462:	2301      	movs	r3, #1
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 856b 	beq.w	8005f44 <_dtoa_r+0xbac>
 800546e:	4883      	ldr	r0, [pc, #524]	; (800567c <_dtoa_r+0x2e4>)
 8005470:	6018      	str	r0, [r3, #0]
 8005472:	1e43      	subs	r3, r0, #1
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	e7df      	b.n	8005438 <_dtoa_r+0xa0>
 8005478:	ec4b ab10 	vmov	d0, sl, fp
 800547c:	aa10      	add	r2, sp, #64	; 0x40
 800547e:	a911      	add	r1, sp, #68	; 0x44
 8005480:	4620      	mov	r0, r4
 8005482:	f001 f8bd 	bl	8006600 <__d2b>
 8005486:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800548a:	ee08 0a10 	vmov	s16, r0
 800548e:	2d00      	cmp	r5, #0
 8005490:	f000 8084 	beq.w	800559c <_dtoa_r+0x204>
 8005494:	ee19 3a90 	vmov	r3, s19
 8005498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800549c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80054a0:	4656      	mov	r6, sl
 80054a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80054a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80054ae:	4b74      	ldr	r3, [pc, #464]	; (8005680 <_dtoa_r+0x2e8>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	4630      	mov	r0, r6
 80054b4:	4639      	mov	r1, r7
 80054b6:	f7fa feef 	bl	8000298 <__aeabi_dsub>
 80054ba:	a365      	add	r3, pc, #404	; (adr r3, 8005650 <_dtoa_r+0x2b8>)
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	f7fb f8a2 	bl	8000608 <__aeabi_dmul>
 80054c4:	a364      	add	r3, pc, #400	; (adr r3, 8005658 <_dtoa_r+0x2c0>)
 80054c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ca:	f7fa fee7 	bl	800029c <__adddf3>
 80054ce:	4606      	mov	r6, r0
 80054d0:	4628      	mov	r0, r5
 80054d2:	460f      	mov	r7, r1
 80054d4:	f7fb f82e 	bl	8000534 <__aeabi_i2d>
 80054d8:	a361      	add	r3, pc, #388	; (adr r3, 8005660 <_dtoa_r+0x2c8>)
 80054da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054de:	f7fb f893 	bl	8000608 <__aeabi_dmul>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4630      	mov	r0, r6
 80054e8:	4639      	mov	r1, r7
 80054ea:	f7fa fed7 	bl	800029c <__adddf3>
 80054ee:	4606      	mov	r6, r0
 80054f0:	460f      	mov	r7, r1
 80054f2:	f7fb fb39 	bl	8000b68 <__aeabi_d2iz>
 80054f6:	2200      	movs	r2, #0
 80054f8:	9000      	str	r0, [sp, #0]
 80054fa:	2300      	movs	r3, #0
 80054fc:	4630      	mov	r0, r6
 80054fe:	4639      	mov	r1, r7
 8005500:	f7fb faf4 	bl	8000aec <__aeabi_dcmplt>
 8005504:	b150      	cbz	r0, 800551c <_dtoa_r+0x184>
 8005506:	9800      	ldr	r0, [sp, #0]
 8005508:	f7fb f814 	bl	8000534 <__aeabi_i2d>
 800550c:	4632      	mov	r2, r6
 800550e:	463b      	mov	r3, r7
 8005510:	f7fb fae2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005514:	b910      	cbnz	r0, 800551c <_dtoa_r+0x184>
 8005516:	9b00      	ldr	r3, [sp, #0]
 8005518:	3b01      	subs	r3, #1
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	9b00      	ldr	r3, [sp, #0]
 800551e:	2b16      	cmp	r3, #22
 8005520:	d85a      	bhi.n	80055d8 <_dtoa_r+0x240>
 8005522:	9a00      	ldr	r2, [sp, #0]
 8005524:	4b57      	ldr	r3, [pc, #348]	; (8005684 <_dtoa_r+0x2ec>)
 8005526:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552e:	ec51 0b19 	vmov	r0, r1, d9
 8005532:	f7fb fadb 	bl	8000aec <__aeabi_dcmplt>
 8005536:	2800      	cmp	r0, #0
 8005538:	d050      	beq.n	80055dc <_dtoa_r+0x244>
 800553a:	9b00      	ldr	r3, [sp, #0]
 800553c:	3b01      	subs	r3, #1
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	2300      	movs	r3, #0
 8005542:	930b      	str	r3, [sp, #44]	; 0x2c
 8005544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005546:	1b5d      	subs	r5, r3, r5
 8005548:	1e6b      	subs	r3, r5, #1
 800554a:	9305      	str	r3, [sp, #20]
 800554c:	bf45      	ittet	mi
 800554e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005552:	9304      	strmi	r3, [sp, #16]
 8005554:	2300      	movpl	r3, #0
 8005556:	2300      	movmi	r3, #0
 8005558:	bf4c      	ite	mi
 800555a:	9305      	strmi	r3, [sp, #20]
 800555c:	9304      	strpl	r3, [sp, #16]
 800555e:	9b00      	ldr	r3, [sp, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	db3d      	blt.n	80055e0 <_dtoa_r+0x248>
 8005564:	9b05      	ldr	r3, [sp, #20]
 8005566:	9a00      	ldr	r2, [sp, #0]
 8005568:	920a      	str	r2, [sp, #40]	; 0x28
 800556a:	4413      	add	r3, r2
 800556c:	9305      	str	r3, [sp, #20]
 800556e:	2300      	movs	r3, #0
 8005570:	9307      	str	r3, [sp, #28]
 8005572:	9b06      	ldr	r3, [sp, #24]
 8005574:	2b09      	cmp	r3, #9
 8005576:	f200 8089 	bhi.w	800568c <_dtoa_r+0x2f4>
 800557a:	2b05      	cmp	r3, #5
 800557c:	bfc4      	itt	gt
 800557e:	3b04      	subgt	r3, #4
 8005580:	9306      	strgt	r3, [sp, #24]
 8005582:	9b06      	ldr	r3, [sp, #24]
 8005584:	f1a3 0302 	sub.w	r3, r3, #2
 8005588:	bfcc      	ite	gt
 800558a:	2500      	movgt	r5, #0
 800558c:	2501      	movle	r5, #1
 800558e:	2b03      	cmp	r3, #3
 8005590:	f200 8087 	bhi.w	80056a2 <_dtoa_r+0x30a>
 8005594:	e8df f003 	tbb	[pc, r3]
 8005598:	59383a2d 	.word	0x59383a2d
 800559c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80055a0:	441d      	add	r5, r3
 80055a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	bfc1      	itttt	gt
 80055aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80055ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80055b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80055b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80055ba:	bfda      	itte	le
 80055bc:	f1c3 0320 	rsble	r3, r3, #32
 80055c0:	fa06 f003 	lslle.w	r0, r6, r3
 80055c4:	4318      	orrgt	r0, r3
 80055c6:	f7fa ffa5 	bl	8000514 <__aeabi_ui2d>
 80055ca:	2301      	movs	r3, #1
 80055cc:	4606      	mov	r6, r0
 80055ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80055d2:	3d01      	subs	r5, #1
 80055d4:	930e      	str	r3, [sp, #56]	; 0x38
 80055d6:	e76a      	b.n	80054ae <_dtoa_r+0x116>
 80055d8:	2301      	movs	r3, #1
 80055da:	e7b2      	b.n	8005542 <_dtoa_r+0x1aa>
 80055dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80055de:	e7b1      	b.n	8005544 <_dtoa_r+0x1ac>
 80055e0:	9b04      	ldr	r3, [sp, #16]
 80055e2:	9a00      	ldr	r2, [sp, #0]
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	9304      	str	r3, [sp, #16]
 80055e8:	4253      	negs	r3, r2
 80055ea:	9307      	str	r3, [sp, #28]
 80055ec:	2300      	movs	r3, #0
 80055ee:	930a      	str	r3, [sp, #40]	; 0x28
 80055f0:	e7bf      	b.n	8005572 <_dtoa_r+0x1da>
 80055f2:	2300      	movs	r3, #0
 80055f4:	9308      	str	r3, [sp, #32]
 80055f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	dc55      	bgt.n	80056a8 <_dtoa_r+0x310>
 80055fc:	2301      	movs	r3, #1
 80055fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005602:	461a      	mov	r2, r3
 8005604:	9209      	str	r2, [sp, #36]	; 0x24
 8005606:	e00c      	b.n	8005622 <_dtoa_r+0x28a>
 8005608:	2301      	movs	r3, #1
 800560a:	e7f3      	b.n	80055f4 <_dtoa_r+0x25c>
 800560c:	2300      	movs	r3, #0
 800560e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005610:	9308      	str	r3, [sp, #32]
 8005612:	9b00      	ldr	r3, [sp, #0]
 8005614:	4413      	add	r3, r2
 8005616:	9302      	str	r3, [sp, #8]
 8005618:	3301      	adds	r3, #1
 800561a:	2b01      	cmp	r3, #1
 800561c:	9303      	str	r3, [sp, #12]
 800561e:	bfb8      	it	lt
 8005620:	2301      	movlt	r3, #1
 8005622:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005624:	2200      	movs	r2, #0
 8005626:	6042      	str	r2, [r0, #4]
 8005628:	2204      	movs	r2, #4
 800562a:	f102 0614 	add.w	r6, r2, #20
 800562e:	429e      	cmp	r6, r3
 8005630:	6841      	ldr	r1, [r0, #4]
 8005632:	d93d      	bls.n	80056b0 <_dtoa_r+0x318>
 8005634:	4620      	mov	r0, r4
 8005636:	f000 fcbb 	bl	8005fb0 <_Balloc>
 800563a:	9001      	str	r0, [sp, #4]
 800563c:	2800      	cmp	r0, #0
 800563e:	d13b      	bne.n	80056b8 <_dtoa_r+0x320>
 8005640:	4b11      	ldr	r3, [pc, #68]	; (8005688 <_dtoa_r+0x2f0>)
 8005642:	4602      	mov	r2, r0
 8005644:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005648:	e6c0      	b.n	80053cc <_dtoa_r+0x34>
 800564a:	2301      	movs	r3, #1
 800564c:	e7df      	b.n	800560e <_dtoa_r+0x276>
 800564e:	bf00      	nop
 8005650:	636f4361 	.word	0x636f4361
 8005654:	3fd287a7 	.word	0x3fd287a7
 8005658:	8b60c8b3 	.word	0x8b60c8b3
 800565c:	3fc68a28 	.word	0x3fc68a28
 8005660:	509f79fb 	.word	0x509f79fb
 8005664:	3fd34413 	.word	0x3fd34413
 8005668:	080090ed 	.word	0x080090ed
 800566c:	08009104 	.word	0x08009104
 8005670:	7ff00000 	.word	0x7ff00000
 8005674:	080090e9 	.word	0x080090e9
 8005678:	080090e0 	.word	0x080090e0
 800567c:	080090bd 	.word	0x080090bd
 8005680:	3ff80000 	.word	0x3ff80000
 8005684:	080091f8 	.word	0x080091f8
 8005688:	0800915f 	.word	0x0800915f
 800568c:	2501      	movs	r5, #1
 800568e:	2300      	movs	r3, #0
 8005690:	9306      	str	r3, [sp, #24]
 8005692:	9508      	str	r5, [sp, #32]
 8005694:	f04f 33ff 	mov.w	r3, #4294967295
 8005698:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800569c:	2200      	movs	r2, #0
 800569e:	2312      	movs	r3, #18
 80056a0:	e7b0      	b.n	8005604 <_dtoa_r+0x26c>
 80056a2:	2301      	movs	r3, #1
 80056a4:	9308      	str	r3, [sp, #32]
 80056a6:	e7f5      	b.n	8005694 <_dtoa_r+0x2fc>
 80056a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80056ae:	e7b8      	b.n	8005622 <_dtoa_r+0x28a>
 80056b0:	3101      	adds	r1, #1
 80056b2:	6041      	str	r1, [r0, #4]
 80056b4:	0052      	lsls	r2, r2, #1
 80056b6:	e7b8      	b.n	800562a <_dtoa_r+0x292>
 80056b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056ba:	9a01      	ldr	r2, [sp, #4]
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	9b03      	ldr	r3, [sp, #12]
 80056c0:	2b0e      	cmp	r3, #14
 80056c2:	f200 809d 	bhi.w	8005800 <_dtoa_r+0x468>
 80056c6:	2d00      	cmp	r5, #0
 80056c8:	f000 809a 	beq.w	8005800 <_dtoa_r+0x468>
 80056cc:	9b00      	ldr	r3, [sp, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	dd32      	ble.n	8005738 <_dtoa_r+0x3a0>
 80056d2:	4ab7      	ldr	r2, [pc, #732]	; (80059b0 <_dtoa_r+0x618>)
 80056d4:	f003 030f 	and.w	r3, r3, #15
 80056d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80056dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056e0:	9b00      	ldr	r3, [sp, #0]
 80056e2:	05d8      	lsls	r0, r3, #23
 80056e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80056e8:	d516      	bpl.n	8005718 <_dtoa_r+0x380>
 80056ea:	4bb2      	ldr	r3, [pc, #712]	; (80059b4 <_dtoa_r+0x61c>)
 80056ec:	ec51 0b19 	vmov	r0, r1, d9
 80056f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056f4:	f7fb f8b2 	bl	800085c <__aeabi_ddiv>
 80056f8:	f007 070f 	and.w	r7, r7, #15
 80056fc:	4682      	mov	sl, r0
 80056fe:	468b      	mov	fp, r1
 8005700:	2503      	movs	r5, #3
 8005702:	4eac      	ldr	r6, [pc, #688]	; (80059b4 <_dtoa_r+0x61c>)
 8005704:	b957      	cbnz	r7, 800571c <_dtoa_r+0x384>
 8005706:	4642      	mov	r2, r8
 8005708:	464b      	mov	r3, r9
 800570a:	4650      	mov	r0, sl
 800570c:	4659      	mov	r1, fp
 800570e:	f7fb f8a5 	bl	800085c <__aeabi_ddiv>
 8005712:	4682      	mov	sl, r0
 8005714:	468b      	mov	fp, r1
 8005716:	e028      	b.n	800576a <_dtoa_r+0x3d2>
 8005718:	2502      	movs	r5, #2
 800571a:	e7f2      	b.n	8005702 <_dtoa_r+0x36a>
 800571c:	07f9      	lsls	r1, r7, #31
 800571e:	d508      	bpl.n	8005732 <_dtoa_r+0x39a>
 8005720:	4640      	mov	r0, r8
 8005722:	4649      	mov	r1, r9
 8005724:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005728:	f7fa ff6e 	bl	8000608 <__aeabi_dmul>
 800572c:	3501      	adds	r5, #1
 800572e:	4680      	mov	r8, r0
 8005730:	4689      	mov	r9, r1
 8005732:	107f      	asrs	r7, r7, #1
 8005734:	3608      	adds	r6, #8
 8005736:	e7e5      	b.n	8005704 <_dtoa_r+0x36c>
 8005738:	f000 809b 	beq.w	8005872 <_dtoa_r+0x4da>
 800573c:	9b00      	ldr	r3, [sp, #0]
 800573e:	4f9d      	ldr	r7, [pc, #628]	; (80059b4 <_dtoa_r+0x61c>)
 8005740:	425e      	negs	r6, r3
 8005742:	4b9b      	ldr	r3, [pc, #620]	; (80059b0 <_dtoa_r+0x618>)
 8005744:	f006 020f 	and.w	r2, r6, #15
 8005748:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	ec51 0b19 	vmov	r0, r1, d9
 8005754:	f7fa ff58 	bl	8000608 <__aeabi_dmul>
 8005758:	1136      	asrs	r6, r6, #4
 800575a:	4682      	mov	sl, r0
 800575c:	468b      	mov	fp, r1
 800575e:	2300      	movs	r3, #0
 8005760:	2502      	movs	r5, #2
 8005762:	2e00      	cmp	r6, #0
 8005764:	d17a      	bne.n	800585c <_dtoa_r+0x4c4>
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1d3      	bne.n	8005712 <_dtoa_r+0x37a>
 800576a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8082 	beq.w	8005876 <_dtoa_r+0x4de>
 8005772:	4b91      	ldr	r3, [pc, #580]	; (80059b8 <_dtoa_r+0x620>)
 8005774:	2200      	movs	r2, #0
 8005776:	4650      	mov	r0, sl
 8005778:	4659      	mov	r1, fp
 800577a:	f7fb f9b7 	bl	8000aec <__aeabi_dcmplt>
 800577e:	2800      	cmp	r0, #0
 8005780:	d079      	beq.n	8005876 <_dtoa_r+0x4de>
 8005782:	9b03      	ldr	r3, [sp, #12]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d076      	beq.n	8005876 <_dtoa_r+0x4de>
 8005788:	9b02      	ldr	r3, [sp, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	dd36      	ble.n	80057fc <_dtoa_r+0x464>
 800578e:	9b00      	ldr	r3, [sp, #0]
 8005790:	4650      	mov	r0, sl
 8005792:	4659      	mov	r1, fp
 8005794:	1e5f      	subs	r7, r3, #1
 8005796:	2200      	movs	r2, #0
 8005798:	4b88      	ldr	r3, [pc, #544]	; (80059bc <_dtoa_r+0x624>)
 800579a:	f7fa ff35 	bl	8000608 <__aeabi_dmul>
 800579e:	9e02      	ldr	r6, [sp, #8]
 80057a0:	4682      	mov	sl, r0
 80057a2:	468b      	mov	fp, r1
 80057a4:	3501      	adds	r5, #1
 80057a6:	4628      	mov	r0, r5
 80057a8:	f7fa fec4 	bl	8000534 <__aeabi_i2d>
 80057ac:	4652      	mov	r2, sl
 80057ae:	465b      	mov	r3, fp
 80057b0:	f7fa ff2a 	bl	8000608 <__aeabi_dmul>
 80057b4:	4b82      	ldr	r3, [pc, #520]	; (80059c0 <_dtoa_r+0x628>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	f7fa fd70 	bl	800029c <__adddf3>
 80057bc:	46d0      	mov	r8, sl
 80057be:	46d9      	mov	r9, fp
 80057c0:	4682      	mov	sl, r0
 80057c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80057c6:	2e00      	cmp	r6, #0
 80057c8:	d158      	bne.n	800587c <_dtoa_r+0x4e4>
 80057ca:	4b7e      	ldr	r3, [pc, #504]	; (80059c4 <_dtoa_r+0x62c>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	4640      	mov	r0, r8
 80057d0:	4649      	mov	r1, r9
 80057d2:	f7fa fd61 	bl	8000298 <__aeabi_dsub>
 80057d6:	4652      	mov	r2, sl
 80057d8:	465b      	mov	r3, fp
 80057da:	4680      	mov	r8, r0
 80057dc:	4689      	mov	r9, r1
 80057de:	f7fb f9a3 	bl	8000b28 <__aeabi_dcmpgt>
 80057e2:	2800      	cmp	r0, #0
 80057e4:	f040 8295 	bne.w	8005d12 <_dtoa_r+0x97a>
 80057e8:	4652      	mov	r2, sl
 80057ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80057ee:	4640      	mov	r0, r8
 80057f0:	4649      	mov	r1, r9
 80057f2:	f7fb f97b 	bl	8000aec <__aeabi_dcmplt>
 80057f6:	2800      	cmp	r0, #0
 80057f8:	f040 8289 	bne.w	8005d0e <_dtoa_r+0x976>
 80057fc:	ec5b ab19 	vmov	sl, fp, d9
 8005800:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005802:	2b00      	cmp	r3, #0
 8005804:	f2c0 8148 	blt.w	8005a98 <_dtoa_r+0x700>
 8005808:	9a00      	ldr	r2, [sp, #0]
 800580a:	2a0e      	cmp	r2, #14
 800580c:	f300 8144 	bgt.w	8005a98 <_dtoa_r+0x700>
 8005810:	4b67      	ldr	r3, [pc, #412]	; (80059b0 <_dtoa_r+0x618>)
 8005812:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005816:	e9d3 8900 	ldrd	r8, r9, [r3]
 800581a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800581c:	2b00      	cmp	r3, #0
 800581e:	f280 80d5 	bge.w	80059cc <_dtoa_r+0x634>
 8005822:	9b03      	ldr	r3, [sp, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f300 80d1 	bgt.w	80059cc <_dtoa_r+0x634>
 800582a:	f040 826f 	bne.w	8005d0c <_dtoa_r+0x974>
 800582e:	4b65      	ldr	r3, [pc, #404]	; (80059c4 <_dtoa_r+0x62c>)
 8005830:	2200      	movs	r2, #0
 8005832:	4640      	mov	r0, r8
 8005834:	4649      	mov	r1, r9
 8005836:	f7fa fee7 	bl	8000608 <__aeabi_dmul>
 800583a:	4652      	mov	r2, sl
 800583c:	465b      	mov	r3, fp
 800583e:	f7fb f969 	bl	8000b14 <__aeabi_dcmpge>
 8005842:	9e03      	ldr	r6, [sp, #12]
 8005844:	4637      	mov	r7, r6
 8005846:	2800      	cmp	r0, #0
 8005848:	f040 8245 	bne.w	8005cd6 <_dtoa_r+0x93e>
 800584c:	9d01      	ldr	r5, [sp, #4]
 800584e:	2331      	movs	r3, #49	; 0x31
 8005850:	f805 3b01 	strb.w	r3, [r5], #1
 8005854:	9b00      	ldr	r3, [sp, #0]
 8005856:	3301      	adds	r3, #1
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	e240      	b.n	8005cde <_dtoa_r+0x946>
 800585c:	07f2      	lsls	r2, r6, #31
 800585e:	d505      	bpl.n	800586c <_dtoa_r+0x4d4>
 8005860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005864:	f7fa fed0 	bl	8000608 <__aeabi_dmul>
 8005868:	3501      	adds	r5, #1
 800586a:	2301      	movs	r3, #1
 800586c:	1076      	asrs	r6, r6, #1
 800586e:	3708      	adds	r7, #8
 8005870:	e777      	b.n	8005762 <_dtoa_r+0x3ca>
 8005872:	2502      	movs	r5, #2
 8005874:	e779      	b.n	800576a <_dtoa_r+0x3d2>
 8005876:	9f00      	ldr	r7, [sp, #0]
 8005878:	9e03      	ldr	r6, [sp, #12]
 800587a:	e794      	b.n	80057a6 <_dtoa_r+0x40e>
 800587c:	9901      	ldr	r1, [sp, #4]
 800587e:	4b4c      	ldr	r3, [pc, #304]	; (80059b0 <_dtoa_r+0x618>)
 8005880:	4431      	add	r1, r6
 8005882:	910d      	str	r1, [sp, #52]	; 0x34
 8005884:	9908      	ldr	r1, [sp, #32]
 8005886:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800588a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800588e:	2900      	cmp	r1, #0
 8005890:	d043      	beq.n	800591a <_dtoa_r+0x582>
 8005892:	494d      	ldr	r1, [pc, #308]	; (80059c8 <_dtoa_r+0x630>)
 8005894:	2000      	movs	r0, #0
 8005896:	f7fa ffe1 	bl	800085c <__aeabi_ddiv>
 800589a:	4652      	mov	r2, sl
 800589c:	465b      	mov	r3, fp
 800589e:	f7fa fcfb 	bl	8000298 <__aeabi_dsub>
 80058a2:	9d01      	ldr	r5, [sp, #4]
 80058a4:	4682      	mov	sl, r0
 80058a6:	468b      	mov	fp, r1
 80058a8:	4649      	mov	r1, r9
 80058aa:	4640      	mov	r0, r8
 80058ac:	f7fb f95c 	bl	8000b68 <__aeabi_d2iz>
 80058b0:	4606      	mov	r6, r0
 80058b2:	f7fa fe3f 	bl	8000534 <__aeabi_i2d>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4640      	mov	r0, r8
 80058bc:	4649      	mov	r1, r9
 80058be:	f7fa fceb 	bl	8000298 <__aeabi_dsub>
 80058c2:	3630      	adds	r6, #48	; 0x30
 80058c4:	f805 6b01 	strb.w	r6, [r5], #1
 80058c8:	4652      	mov	r2, sl
 80058ca:	465b      	mov	r3, fp
 80058cc:	4680      	mov	r8, r0
 80058ce:	4689      	mov	r9, r1
 80058d0:	f7fb f90c 	bl	8000aec <__aeabi_dcmplt>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d163      	bne.n	80059a0 <_dtoa_r+0x608>
 80058d8:	4642      	mov	r2, r8
 80058da:	464b      	mov	r3, r9
 80058dc:	4936      	ldr	r1, [pc, #216]	; (80059b8 <_dtoa_r+0x620>)
 80058de:	2000      	movs	r0, #0
 80058e0:	f7fa fcda 	bl	8000298 <__aeabi_dsub>
 80058e4:	4652      	mov	r2, sl
 80058e6:	465b      	mov	r3, fp
 80058e8:	f7fb f900 	bl	8000aec <__aeabi_dcmplt>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	f040 80b5 	bne.w	8005a5c <_dtoa_r+0x6c4>
 80058f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058f4:	429d      	cmp	r5, r3
 80058f6:	d081      	beq.n	80057fc <_dtoa_r+0x464>
 80058f8:	4b30      	ldr	r3, [pc, #192]	; (80059bc <_dtoa_r+0x624>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	4650      	mov	r0, sl
 80058fe:	4659      	mov	r1, fp
 8005900:	f7fa fe82 	bl	8000608 <__aeabi_dmul>
 8005904:	4b2d      	ldr	r3, [pc, #180]	; (80059bc <_dtoa_r+0x624>)
 8005906:	4682      	mov	sl, r0
 8005908:	468b      	mov	fp, r1
 800590a:	4640      	mov	r0, r8
 800590c:	4649      	mov	r1, r9
 800590e:	2200      	movs	r2, #0
 8005910:	f7fa fe7a 	bl	8000608 <__aeabi_dmul>
 8005914:	4680      	mov	r8, r0
 8005916:	4689      	mov	r9, r1
 8005918:	e7c6      	b.n	80058a8 <_dtoa_r+0x510>
 800591a:	4650      	mov	r0, sl
 800591c:	4659      	mov	r1, fp
 800591e:	f7fa fe73 	bl	8000608 <__aeabi_dmul>
 8005922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005924:	9d01      	ldr	r5, [sp, #4]
 8005926:	930f      	str	r3, [sp, #60]	; 0x3c
 8005928:	4682      	mov	sl, r0
 800592a:	468b      	mov	fp, r1
 800592c:	4649      	mov	r1, r9
 800592e:	4640      	mov	r0, r8
 8005930:	f7fb f91a 	bl	8000b68 <__aeabi_d2iz>
 8005934:	4606      	mov	r6, r0
 8005936:	f7fa fdfd 	bl	8000534 <__aeabi_i2d>
 800593a:	3630      	adds	r6, #48	; 0x30
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4640      	mov	r0, r8
 8005942:	4649      	mov	r1, r9
 8005944:	f7fa fca8 	bl	8000298 <__aeabi_dsub>
 8005948:	f805 6b01 	strb.w	r6, [r5], #1
 800594c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800594e:	429d      	cmp	r5, r3
 8005950:	4680      	mov	r8, r0
 8005952:	4689      	mov	r9, r1
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	d124      	bne.n	80059a4 <_dtoa_r+0x60c>
 800595a:	4b1b      	ldr	r3, [pc, #108]	; (80059c8 <_dtoa_r+0x630>)
 800595c:	4650      	mov	r0, sl
 800595e:	4659      	mov	r1, fp
 8005960:	f7fa fc9c 	bl	800029c <__adddf3>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4640      	mov	r0, r8
 800596a:	4649      	mov	r1, r9
 800596c:	f7fb f8dc 	bl	8000b28 <__aeabi_dcmpgt>
 8005970:	2800      	cmp	r0, #0
 8005972:	d173      	bne.n	8005a5c <_dtoa_r+0x6c4>
 8005974:	4652      	mov	r2, sl
 8005976:	465b      	mov	r3, fp
 8005978:	4913      	ldr	r1, [pc, #76]	; (80059c8 <_dtoa_r+0x630>)
 800597a:	2000      	movs	r0, #0
 800597c:	f7fa fc8c 	bl	8000298 <__aeabi_dsub>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4640      	mov	r0, r8
 8005986:	4649      	mov	r1, r9
 8005988:	f7fb f8b0 	bl	8000aec <__aeabi_dcmplt>
 800598c:	2800      	cmp	r0, #0
 800598e:	f43f af35 	beq.w	80057fc <_dtoa_r+0x464>
 8005992:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005994:	1e6b      	subs	r3, r5, #1
 8005996:	930f      	str	r3, [sp, #60]	; 0x3c
 8005998:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800599c:	2b30      	cmp	r3, #48	; 0x30
 800599e:	d0f8      	beq.n	8005992 <_dtoa_r+0x5fa>
 80059a0:	9700      	str	r7, [sp, #0]
 80059a2:	e049      	b.n	8005a38 <_dtoa_r+0x6a0>
 80059a4:	4b05      	ldr	r3, [pc, #20]	; (80059bc <_dtoa_r+0x624>)
 80059a6:	f7fa fe2f 	bl	8000608 <__aeabi_dmul>
 80059aa:	4680      	mov	r8, r0
 80059ac:	4689      	mov	r9, r1
 80059ae:	e7bd      	b.n	800592c <_dtoa_r+0x594>
 80059b0:	080091f8 	.word	0x080091f8
 80059b4:	080091d0 	.word	0x080091d0
 80059b8:	3ff00000 	.word	0x3ff00000
 80059bc:	40240000 	.word	0x40240000
 80059c0:	401c0000 	.word	0x401c0000
 80059c4:	40140000 	.word	0x40140000
 80059c8:	3fe00000 	.word	0x3fe00000
 80059cc:	9d01      	ldr	r5, [sp, #4]
 80059ce:	4656      	mov	r6, sl
 80059d0:	465f      	mov	r7, fp
 80059d2:	4642      	mov	r2, r8
 80059d4:	464b      	mov	r3, r9
 80059d6:	4630      	mov	r0, r6
 80059d8:	4639      	mov	r1, r7
 80059da:	f7fa ff3f 	bl	800085c <__aeabi_ddiv>
 80059de:	f7fb f8c3 	bl	8000b68 <__aeabi_d2iz>
 80059e2:	4682      	mov	sl, r0
 80059e4:	f7fa fda6 	bl	8000534 <__aeabi_i2d>
 80059e8:	4642      	mov	r2, r8
 80059ea:	464b      	mov	r3, r9
 80059ec:	f7fa fe0c 	bl	8000608 <__aeabi_dmul>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4630      	mov	r0, r6
 80059f6:	4639      	mov	r1, r7
 80059f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80059fc:	f7fa fc4c 	bl	8000298 <__aeabi_dsub>
 8005a00:	f805 6b01 	strb.w	r6, [r5], #1
 8005a04:	9e01      	ldr	r6, [sp, #4]
 8005a06:	9f03      	ldr	r7, [sp, #12]
 8005a08:	1bae      	subs	r6, r5, r6
 8005a0a:	42b7      	cmp	r7, r6
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	d135      	bne.n	8005a7e <_dtoa_r+0x6e6>
 8005a12:	f7fa fc43 	bl	800029c <__adddf3>
 8005a16:	4642      	mov	r2, r8
 8005a18:	464b      	mov	r3, r9
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	460f      	mov	r7, r1
 8005a1e:	f7fb f883 	bl	8000b28 <__aeabi_dcmpgt>
 8005a22:	b9d0      	cbnz	r0, 8005a5a <_dtoa_r+0x6c2>
 8005a24:	4642      	mov	r2, r8
 8005a26:	464b      	mov	r3, r9
 8005a28:	4630      	mov	r0, r6
 8005a2a:	4639      	mov	r1, r7
 8005a2c:	f7fb f854 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a30:	b110      	cbz	r0, 8005a38 <_dtoa_r+0x6a0>
 8005a32:	f01a 0f01 	tst.w	sl, #1
 8005a36:	d110      	bne.n	8005a5a <_dtoa_r+0x6c2>
 8005a38:	4620      	mov	r0, r4
 8005a3a:	ee18 1a10 	vmov	r1, s16
 8005a3e:	f000 faf7 	bl	8006030 <_Bfree>
 8005a42:	2300      	movs	r3, #0
 8005a44:	9800      	ldr	r0, [sp, #0]
 8005a46:	702b      	strb	r3, [r5, #0]
 8005a48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	6018      	str	r0, [r3, #0]
 8005a4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f43f acf1 	beq.w	8005438 <_dtoa_r+0xa0>
 8005a56:	601d      	str	r5, [r3, #0]
 8005a58:	e4ee      	b.n	8005438 <_dtoa_r+0xa0>
 8005a5a:	9f00      	ldr	r7, [sp, #0]
 8005a5c:	462b      	mov	r3, r5
 8005a5e:	461d      	mov	r5, r3
 8005a60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a64:	2a39      	cmp	r2, #57	; 0x39
 8005a66:	d106      	bne.n	8005a76 <_dtoa_r+0x6de>
 8005a68:	9a01      	ldr	r2, [sp, #4]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d1f7      	bne.n	8005a5e <_dtoa_r+0x6c6>
 8005a6e:	9901      	ldr	r1, [sp, #4]
 8005a70:	2230      	movs	r2, #48	; 0x30
 8005a72:	3701      	adds	r7, #1
 8005a74:	700a      	strb	r2, [r1, #0]
 8005a76:	781a      	ldrb	r2, [r3, #0]
 8005a78:	3201      	adds	r2, #1
 8005a7a:	701a      	strb	r2, [r3, #0]
 8005a7c:	e790      	b.n	80059a0 <_dtoa_r+0x608>
 8005a7e:	4ba6      	ldr	r3, [pc, #664]	; (8005d18 <_dtoa_r+0x980>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	f7fa fdc1 	bl	8000608 <__aeabi_dmul>
 8005a86:	2200      	movs	r2, #0
 8005a88:	2300      	movs	r3, #0
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	460f      	mov	r7, r1
 8005a8e:	f7fb f823 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d09d      	beq.n	80059d2 <_dtoa_r+0x63a>
 8005a96:	e7cf      	b.n	8005a38 <_dtoa_r+0x6a0>
 8005a98:	9a08      	ldr	r2, [sp, #32]
 8005a9a:	2a00      	cmp	r2, #0
 8005a9c:	f000 80d7 	beq.w	8005c4e <_dtoa_r+0x8b6>
 8005aa0:	9a06      	ldr	r2, [sp, #24]
 8005aa2:	2a01      	cmp	r2, #1
 8005aa4:	f300 80ba 	bgt.w	8005c1c <_dtoa_r+0x884>
 8005aa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005aaa:	2a00      	cmp	r2, #0
 8005aac:	f000 80b2 	beq.w	8005c14 <_dtoa_r+0x87c>
 8005ab0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ab4:	9e07      	ldr	r6, [sp, #28]
 8005ab6:	9d04      	ldr	r5, [sp, #16]
 8005ab8:	9a04      	ldr	r2, [sp, #16]
 8005aba:	441a      	add	r2, r3
 8005abc:	9204      	str	r2, [sp, #16]
 8005abe:	9a05      	ldr	r2, [sp, #20]
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	441a      	add	r2, r3
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	9205      	str	r2, [sp, #20]
 8005ac8:	f000 fb6a 	bl	80061a0 <__i2b>
 8005acc:	4607      	mov	r7, r0
 8005ace:	2d00      	cmp	r5, #0
 8005ad0:	dd0c      	ble.n	8005aec <_dtoa_r+0x754>
 8005ad2:	9b05      	ldr	r3, [sp, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	dd09      	ble.n	8005aec <_dtoa_r+0x754>
 8005ad8:	42ab      	cmp	r3, r5
 8005ada:	9a04      	ldr	r2, [sp, #16]
 8005adc:	bfa8      	it	ge
 8005ade:	462b      	movge	r3, r5
 8005ae0:	1ad2      	subs	r2, r2, r3
 8005ae2:	9204      	str	r2, [sp, #16]
 8005ae4:	9a05      	ldr	r2, [sp, #20]
 8005ae6:	1aed      	subs	r5, r5, r3
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	9305      	str	r3, [sp, #20]
 8005aec:	9b07      	ldr	r3, [sp, #28]
 8005aee:	b31b      	cbz	r3, 8005b38 <_dtoa_r+0x7a0>
 8005af0:	9b08      	ldr	r3, [sp, #32]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 80af 	beq.w	8005c56 <_dtoa_r+0x8be>
 8005af8:	2e00      	cmp	r6, #0
 8005afa:	dd13      	ble.n	8005b24 <_dtoa_r+0x78c>
 8005afc:	4639      	mov	r1, r7
 8005afe:	4632      	mov	r2, r6
 8005b00:	4620      	mov	r0, r4
 8005b02:	f000 fc0d 	bl	8006320 <__pow5mult>
 8005b06:	ee18 2a10 	vmov	r2, s16
 8005b0a:	4601      	mov	r1, r0
 8005b0c:	4607      	mov	r7, r0
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f000 fb5c 	bl	80061cc <__multiply>
 8005b14:	ee18 1a10 	vmov	r1, s16
 8005b18:	4680      	mov	r8, r0
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f000 fa88 	bl	8006030 <_Bfree>
 8005b20:	ee08 8a10 	vmov	s16, r8
 8005b24:	9b07      	ldr	r3, [sp, #28]
 8005b26:	1b9a      	subs	r2, r3, r6
 8005b28:	d006      	beq.n	8005b38 <_dtoa_r+0x7a0>
 8005b2a:	ee18 1a10 	vmov	r1, s16
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f000 fbf6 	bl	8006320 <__pow5mult>
 8005b34:	ee08 0a10 	vmov	s16, r0
 8005b38:	2101      	movs	r1, #1
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f000 fb30 	bl	80061a0 <__i2b>
 8005b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	4606      	mov	r6, r0
 8005b46:	f340 8088 	ble.w	8005c5a <_dtoa_r+0x8c2>
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	4601      	mov	r1, r0
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f000 fbe6 	bl	8006320 <__pow5mult>
 8005b54:	9b06      	ldr	r3, [sp, #24]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	4606      	mov	r6, r0
 8005b5a:	f340 8081 	ble.w	8005c60 <_dtoa_r+0x8c8>
 8005b5e:	f04f 0800 	mov.w	r8, #0
 8005b62:	6933      	ldr	r3, [r6, #16]
 8005b64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005b68:	6918      	ldr	r0, [r3, #16]
 8005b6a:	f000 fac9 	bl	8006100 <__hi0bits>
 8005b6e:	f1c0 0020 	rsb	r0, r0, #32
 8005b72:	9b05      	ldr	r3, [sp, #20]
 8005b74:	4418      	add	r0, r3
 8005b76:	f010 001f 	ands.w	r0, r0, #31
 8005b7a:	f000 8092 	beq.w	8005ca2 <_dtoa_r+0x90a>
 8005b7e:	f1c0 0320 	rsb	r3, r0, #32
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	f340 808a 	ble.w	8005c9c <_dtoa_r+0x904>
 8005b88:	f1c0 001c 	rsb	r0, r0, #28
 8005b8c:	9b04      	ldr	r3, [sp, #16]
 8005b8e:	4403      	add	r3, r0
 8005b90:	9304      	str	r3, [sp, #16]
 8005b92:	9b05      	ldr	r3, [sp, #20]
 8005b94:	4403      	add	r3, r0
 8005b96:	4405      	add	r5, r0
 8005b98:	9305      	str	r3, [sp, #20]
 8005b9a:	9b04      	ldr	r3, [sp, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	dd07      	ble.n	8005bb0 <_dtoa_r+0x818>
 8005ba0:	ee18 1a10 	vmov	r1, s16
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f000 fc14 	bl	80063d4 <__lshift>
 8005bac:	ee08 0a10 	vmov	s16, r0
 8005bb0:	9b05      	ldr	r3, [sp, #20]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	dd05      	ble.n	8005bc2 <_dtoa_r+0x82a>
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f000 fc0a 	bl	80063d4 <__lshift>
 8005bc0:	4606      	mov	r6, r0
 8005bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d06e      	beq.n	8005ca6 <_dtoa_r+0x90e>
 8005bc8:	ee18 0a10 	vmov	r0, s16
 8005bcc:	4631      	mov	r1, r6
 8005bce:	f000 fc71 	bl	80064b4 <__mcmp>
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	da67      	bge.n	8005ca6 <_dtoa_r+0x90e>
 8005bd6:	9b00      	ldr	r3, [sp, #0]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	ee18 1a10 	vmov	r1, s16
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	220a      	movs	r2, #10
 8005be2:	2300      	movs	r3, #0
 8005be4:	4620      	mov	r0, r4
 8005be6:	f000 fa45 	bl	8006074 <__multadd>
 8005bea:	9b08      	ldr	r3, [sp, #32]
 8005bec:	ee08 0a10 	vmov	s16, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 81b1 	beq.w	8005f58 <_dtoa_r+0xbc0>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	4639      	mov	r1, r7
 8005bfa:	220a      	movs	r2, #10
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f000 fa39 	bl	8006074 <__multadd>
 8005c02:	9b02      	ldr	r3, [sp, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	4607      	mov	r7, r0
 8005c08:	f300 808e 	bgt.w	8005d28 <_dtoa_r+0x990>
 8005c0c:	9b06      	ldr	r3, [sp, #24]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	dc51      	bgt.n	8005cb6 <_dtoa_r+0x91e>
 8005c12:	e089      	b.n	8005d28 <_dtoa_r+0x990>
 8005c14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c1a:	e74b      	b.n	8005ab4 <_dtoa_r+0x71c>
 8005c1c:	9b03      	ldr	r3, [sp, #12]
 8005c1e:	1e5e      	subs	r6, r3, #1
 8005c20:	9b07      	ldr	r3, [sp, #28]
 8005c22:	42b3      	cmp	r3, r6
 8005c24:	bfbf      	itttt	lt
 8005c26:	9b07      	ldrlt	r3, [sp, #28]
 8005c28:	9607      	strlt	r6, [sp, #28]
 8005c2a:	1af2      	sublt	r2, r6, r3
 8005c2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005c2e:	bfb6      	itet	lt
 8005c30:	189b      	addlt	r3, r3, r2
 8005c32:	1b9e      	subge	r6, r3, r6
 8005c34:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005c36:	9b03      	ldr	r3, [sp, #12]
 8005c38:	bfb8      	it	lt
 8005c3a:	2600      	movlt	r6, #0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	bfb7      	itett	lt
 8005c40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005c44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005c48:	1a9d      	sublt	r5, r3, r2
 8005c4a:	2300      	movlt	r3, #0
 8005c4c:	e734      	b.n	8005ab8 <_dtoa_r+0x720>
 8005c4e:	9e07      	ldr	r6, [sp, #28]
 8005c50:	9d04      	ldr	r5, [sp, #16]
 8005c52:	9f08      	ldr	r7, [sp, #32]
 8005c54:	e73b      	b.n	8005ace <_dtoa_r+0x736>
 8005c56:	9a07      	ldr	r2, [sp, #28]
 8005c58:	e767      	b.n	8005b2a <_dtoa_r+0x792>
 8005c5a:	9b06      	ldr	r3, [sp, #24]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	dc18      	bgt.n	8005c92 <_dtoa_r+0x8fa>
 8005c60:	f1ba 0f00 	cmp.w	sl, #0
 8005c64:	d115      	bne.n	8005c92 <_dtoa_r+0x8fa>
 8005c66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c6a:	b993      	cbnz	r3, 8005c92 <_dtoa_r+0x8fa>
 8005c6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005c70:	0d1b      	lsrs	r3, r3, #20
 8005c72:	051b      	lsls	r3, r3, #20
 8005c74:	b183      	cbz	r3, 8005c98 <_dtoa_r+0x900>
 8005c76:	9b04      	ldr	r3, [sp, #16]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	9304      	str	r3, [sp, #16]
 8005c7c:	9b05      	ldr	r3, [sp, #20]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	9305      	str	r3, [sp, #20]
 8005c82:	f04f 0801 	mov.w	r8, #1
 8005c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f47f af6a 	bne.w	8005b62 <_dtoa_r+0x7ca>
 8005c8e:	2001      	movs	r0, #1
 8005c90:	e76f      	b.n	8005b72 <_dtoa_r+0x7da>
 8005c92:	f04f 0800 	mov.w	r8, #0
 8005c96:	e7f6      	b.n	8005c86 <_dtoa_r+0x8ee>
 8005c98:	4698      	mov	r8, r3
 8005c9a:	e7f4      	b.n	8005c86 <_dtoa_r+0x8ee>
 8005c9c:	f43f af7d 	beq.w	8005b9a <_dtoa_r+0x802>
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	301c      	adds	r0, #28
 8005ca4:	e772      	b.n	8005b8c <_dtoa_r+0x7f4>
 8005ca6:	9b03      	ldr	r3, [sp, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	dc37      	bgt.n	8005d1c <_dtoa_r+0x984>
 8005cac:	9b06      	ldr	r3, [sp, #24]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	dd34      	ble.n	8005d1c <_dtoa_r+0x984>
 8005cb2:	9b03      	ldr	r3, [sp, #12]
 8005cb4:	9302      	str	r3, [sp, #8]
 8005cb6:	9b02      	ldr	r3, [sp, #8]
 8005cb8:	b96b      	cbnz	r3, 8005cd6 <_dtoa_r+0x93e>
 8005cba:	4631      	mov	r1, r6
 8005cbc:	2205      	movs	r2, #5
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f000 f9d8 	bl	8006074 <__multadd>
 8005cc4:	4601      	mov	r1, r0
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	ee18 0a10 	vmov	r0, s16
 8005ccc:	f000 fbf2 	bl	80064b4 <__mcmp>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	f73f adbb 	bgt.w	800584c <_dtoa_r+0x4b4>
 8005cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cd8:	9d01      	ldr	r5, [sp, #4]
 8005cda:	43db      	mvns	r3, r3
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	f04f 0800 	mov.w	r8, #0
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f000 f9a3 	bl	8006030 <_Bfree>
 8005cea:	2f00      	cmp	r7, #0
 8005cec:	f43f aea4 	beq.w	8005a38 <_dtoa_r+0x6a0>
 8005cf0:	f1b8 0f00 	cmp.w	r8, #0
 8005cf4:	d005      	beq.n	8005d02 <_dtoa_r+0x96a>
 8005cf6:	45b8      	cmp	r8, r7
 8005cf8:	d003      	beq.n	8005d02 <_dtoa_r+0x96a>
 8005cfa:	4641      	mov	r1, r8
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f000 f997 	bl	8006030 <_Bfree>
 8005d02:	4639      	mov	r1, r7
 8005d04:	4620      	mov	r0, r4
 8005d06:	f000 f993 	bl	8006030 <_Bfree>
 8005d0a:	e695      	b.n	8005a38 <_dtoa_r+0x6a0>
 8005d0c:	2600      	movs	r6, #0
 8005d0e:	4637      	mov	r7, r6
 8005d10:	e7e1      	b.n	8005cd6 <_dtoa_r+0x93e>
 8005d12:	9700      	str	r7, [sp, #0]
 8005d14:	4637      	mov	r7, r6
 8005d16:	e599      	b.n	800584c <_dtoa_r+0x4b4>
 8005d18:	40240000 	.word	0x40240000
 8005d1c:	9b08      	ldr	r3, [sp, #32]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 80ca 	beq.w	8005eb8 <_dtoa_r+0xb20>
 8005d24:	9b03      	ldr	r3, [sp, #12]
 8005d26:	9302      	str	r3, [sp, #8]
 8005d28:	2d00      	cmp	r5, #0
 8005d2a:	dd05      	ble.n	8005d38 <_dtoa_r+0x9a0>
 8005d2c:	4639      	mov	r1, r7
 8005d2e:	462a      	mov	r2, r5
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 fb4f 	bl	80063d4 <__lshift>
 8005d36:	4607      	mov	r7, r0
 8005d38:	f1b8 0f00 	cmp.w	r8, #0
 8005d3c:	d05b      	beq.n	8005df6 <_dtoa_r+0xa5e>
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 f935 	bl	8005fb0 <_Balloc>
 8005d46:	4605      	mov	r5, r0
 8005d48:	b928      	cbnz	r0, 8005d56 <_dtoa_r+0x9be>
 8005d4a:	4b87      	ldr	r3, [pc, #540]	; (8005f68 <_dtoa_r+0xbd0>)
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005d52:	f7ff bb3b 	b.w	80053cc <_dtoa_r+0x34>
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	3202      	adds	r2, #2
 8005d5a:	0092      	lsls	r2, r2, #2
 8005d5c:	f107 010c 	add.w	r1, r7, #12
 8005d60:	300c      	adds	r0, #12
 8005d62:	f000 f90b 	bl	8005f7c <memcpy>
 8005d66:	2201      	movs	r2, #1
 8005d68:	4629      	mov	r1, r5
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f000 fb32 	bl	80063d4 <__lshift>
 8005d70:	9b01      	ldr	r3, [sp, #4]
 8005d72:	f103 0901 	add.w	r9, r3, #1
 8005d76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	9305      	str	r3, [sp, #20]
 8005d7e:	f00a 0301 	and.w	r3, sl, #1
 8005d82:	46b8      	mov	r8, r7
 8005d84:	9304      	str	r3, [sp, #16]
 8005d86:	4607      	mov	r7, r0
 8005d88:	4631      	mov	r1, r6
 8005d8a:	ee18 0a10 	vmov	r0, s16
 8005d8e:	f7ff fa77 	bl	8005280 <quorem>
 8005d92:	4641      	mov	r1, r8
 8005d94:	9002      	str	r0, [sp, #8]
 8005d96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005d9a:	ee18 0a10 	vmov	r0, s16
 8005d9e:	f000 fb89 	bl	80064b4 <__mcmp>
 8005da2:	463a      	mov	r2, r7
 8005da4:	9003      	str	r0, [sp, #12]
 8005da6:	4631      	mov	r1, r6
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 fb9f 	bl	80064ec <__mdiff>
 8005dae:	68c2      	ldr	r2, [r0, #12]
 8005db0:	f109 3bff 	add.w	fp, r9, #4294967295
 8005db4:	4605      	mov	r5, r0
 8005db6:	bb02      	cbnz	r2, 8005dfa <_dtoa_r+0xa62>
 8005db8:	4601      	mov	r1, r0
 8005dba:	ee18 0a10 	vmov	r0, s16
 8005dbe:	f000 fb79 	bl	80064b4 <__mcmp>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	9207      	str	r2, [sp, #28]
 8005dca:	f000 f931 	bl	8006030 <_Bfree>
 8005dce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005dd2:	ea43 0102 	orr.w	r1, r3, r2
 8005dd6:	9b04      	ldr	r3, [sp, #16]
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	464d      	mov	r5, r9
 8005ddc:	d10f      	bne.n	8005dfe <_dtoa_r+0xa66>
 8005dde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005de2:	d02a      	beq.n	8005e3a <_dtoa_r+0xaa2>
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	dd02      	ble.n	8005df0 <_dtoa_r+0xa58>
 8005dea:	9b02      	ldr	r3, [sp, #8]
 8005dec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005df0:	f88b a000 	strb.w	sl, [fp]
 8005df4:	e775      	b.n	8005ce2 <_dtoa_r+0x94a>
 8005df6:	4638      	mov	r0, r7
 8005df8:	e7ba      	b.n	8005d70 <_dtoa_r+0x9d8>
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	e7e2      	b.n	8005dc4 <_dtoa_r+0xa2c>
 8005dfe:	9b03      	ldr	r3, [sp, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	db04      	blt.n	8005e0e <_dtoa_r+0xa76>
 8005e04:	9906      	ldr	r1, [sp, #24]
 8005e06:	430b      	orrs	r3, r1
 8005e08:	9904      	ldr	r1, [sp, #16]
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	d122      	bne.n	8005e54 <_dtoa_r+0xabc>
 8005e0e:	2a00      	cmp	r2, #0
 8005e10:	ddee      	ble.n	8005df0 <_dtoa_r+0xa58>
 8005e12:	ee18 1a10 	vmov	r1, s16
 8005e16:	2201      	movs	r2, #1
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 fadb 	bl	80063d4 <__lshift>
 8005e1e:	4631      	mov	r1, r6
 8005e20:	ee08 0a10 	vmov	s16, r0
 8005e24:	f000 fb46 	bl	80064b4 <__mcmp>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	dc03      	bgt.n	8005e34 <_dtoa_r+0xa9c>
 8005e2c:	d1e0      	bne.n	8005df0 <_dtoa_r+0xa58>
 8005e2e:	f01a 0f01 	tst.w	sl, #1
 8005e32:	d0dd      	beq.n	8005df0 <_dtoa_r+0xa58>
 8005e34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005e38:	d1d7      	bne.n	8005dea <_dtoa_r+0xa52>
 8005e3a:	2339      	movs	r3, #57	; 0x39
 8005e3c:	f88b 3000 	strb.w	r3, [fp]
 8005e40:	462b      	mov	r3, r5
 8005e42:	461d      	mov	r5, r3
 8005e44:	3b01      	subs	r3, #1
 8005e46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e4a:	2a39      	cmp	r2, #57	; 0x39
 8005e4c:	d071      	beq.n	8005f32 <_dtoa_r+0xb9a>
 8005e4e:	3201      	adds	r2, #1
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	e746      	b.n	8005ce2 <_dtoa_r+0x94a>
 8005e54:	2a00      	cmp	r2, #0
 8005e56:	dd07      	ble.n	8005e68 <_dtoa_r+0xad0>
 8005e58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005e5c:	d0ed      	beq.n	8005e3a <_dtoa_r+0xaa2>
 8005e5e:	f10a 0301 	add.w	r3, sl, #1
 8005e62:	f88b 3000 	strb.w	r3, [fp]
 8005e66:	e73c      	b.n	8005ce2 <_dtoa_r+0x94a>
 8005e68:	9b05      	ldr	r3, [sp, #20]
 8005e6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005e6e:	4599      	cmp	r9, r3
 8005e70:	d047      	beq.n	8005f02 <_dtoa_r+0xb6a>
 8005e72:	ee18 1a10 	vmov	r1, s16
 8005e76:	2300      	movs	r3, #0
 8005e78:	220a      	movs	r2, #10
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f000 f8fa 	bl	8006074 <__multadd>
 8005e80:	45b8      	cmp	r8, r7
 8005e82:	ee08 0a10 	vmov	s16, r0
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	f04f 020a 	mov.w	r2, #10
 8005e8e:	4641      	mov	r1, r8
 8005e90:	4620      	mov	r0, r4
 8005e92:	d106      	bne.n	8005ea2 <_dtoa_r+0xb0a>
 8005e94:	f000 f8ee 	bl	8006074 <__multadd>
 8005e98:	4680      	mov	r8, r0
 8005e9a:	4607      	mov	r7, r0
 8005e9c:	f109 0901 	add.w	r9, r9, #1
 8005ea0:	e772      	b.n	8005d88 <_dtoa_r+0x9f0>
 8005ea2:	f000 f8e7 	bl	8006074 <__multadd>
 8005ea6:	4639      	mov	r1, r7
 8005ea8:	4680      	mov	r8, r0
 8005eaa:	2300      	movs	r3, #0
 8005eac:	220a      	movs	r2, #10
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f000 f8e0 	bl	8006074 <__multadd>
 8005eb4:	4607      	mov	r7, r0
 8005eb6:	e7f1      	b.n	8005e9c <_dtoa_r+0xb04>
 8005eb8:	9b03      	ldr	r3, [sp, #12]
 8005eba:	9302      	str	r3, [sp, #8]
 8005ebc:	9d01      	ldr	r5, [sp, #4]
 8005ebe:	ee18 0a10 	vmov	r0, s16
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	f7ff f9dc 	bl	8005280 <quorem>
 8005ec8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005ecc:	9b01      	ldr	r3, [sp, #4]
 8005ece:	f805 ab01 	strb.w	sl, [r5], #1
 8005ed2:	1aea      	subs	r2, r5, r3
 8005ed4:	9b02      	ldr	r3, [sp, #8]
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	dd09      	ble.n	8005eee <_dtoa_r+0xb56>
 8005eda:	ee18 1a10 	vmov	r1, s16
 8005ede:	2300      	movs	r3, #0
 8005ee0:	220a      	movs	r2, #10
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 f8c6 	bl	8006074 <__multadd>
 8005ee8:	ee08 0a10 	vmov	s16, r0
 8005eec:	e7e7      	b.n	8005ebe <_dtoa_r+0xb26>
 8005eee:	9b02      	ldr	r3, [sp, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	bfc8      	it	gt
 8005ef4:	461d      	movgt	r5, r3
 8005ef6:	9b01      	ldr	r3, [sp, #4]
 8005ef8:	bfd8      	it	le
 8005efa:	2501      	movle	r5, #1
 8005efc:	441d      	add	r5, r3
 8005efe:	f04f 0800 	mov.w	r8, #0
 8005f02:	ee18 1a10 	vmov	r1, s16
 8005f06:	2201      	movs	r2, #1
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f000 fa63 	bl	80063d4 <__lshift>
 8005f0e:	4631      	mov	r1, r6
 8005f10:	ee08 0a10 	vmov	s16, r0
 8005f14:	f000 face 	bl	80064b4 <__mcmp>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	dc91      	bgt.n	8005e40 <_dtoa_r+0xaa8>
 8005f1c:	d102      	bne.n	8005f24 <_dtoa_r+0xb8c>
 8005f1e:	f01a 0f01 	tst.w	sl, #1
 8005f22:	d18d      	bne.n	8005e40 <_dtoa_r+0xaa8>
 8005f24:	462b      	mov	r3, r5
 8005f26:	461d      	mov	r5, r3
 8005f28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f2c:	2a30      	cmp	r2, #48	; 0x30
 8005f2e:	d0fa      	beq.n	8005f26 <_dtoa_r+0xb8e>
 8005f30:	e6d7      	b.n	8005ce2 <_dtoa_r+0x94a>
 8005f32:	9a01      	ldr	r2, [sp, #4]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d184      	bne.n	8005e42 <_dtoa_r+0xaaa>
 8005f38:	9b00      	ldr	r3, [sp, #0]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	2331      	movs	r3, #49	; 0x31
 8005f40:	7013      	strb	r3, [r2, #0]
 8005f42:	e6ce      	b.n	8005ce2 <_dtoa_r+0x94a>
 8005f44:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <_dtoa_r+0xbd4>)
 8005f46:	f7ff ba95 	b.w	8005474 <_dtoa_r+0xdc>
 8005f4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f47f aa6e 	bne.w	800542e <_dtoa_r+0x96>
 8005f52:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <_dtoa_r+0xbd8>)
 8005f54:	f7ff ba8e 	b.w	8005474 <_dtoa_r+0xdc>
 8005f58:	9b02      	ldr	r3, [sp, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	dcae      	bgt.n	8005ebc <_dtoa_r+0xb24>
 8005f5e:	9b06      	ldr	r3, [sp, #24]
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	f73f aea8 	bgt.w	8005cb6 <_dtoa_r+0x91e>
 8005f66:	e7a9      	b.n	8005ebc <_dtoa_r+0xb24>
 8005f68:	0800915f 	.word	0x0800915f
 8005f6c:	080090bc 	.word	0x080090bc
 8005f70:	080090e0 	.word	0x080090e0

08005f74 <_localeconv_r>:
 8005f74:	4800      	ldr	r0, [pc, #0]	; (8005f78 <_localeconv_r+0x4>)
 8005f76:	4770      	bx	lr
 8005f78:	20000178 	.word	0x20000178

08005f7c <memcpy>:
 8005f7c:	440a      	add	r2, r1
 8005f7e:	4291      	cmp	r1, r2
 8005f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f84:	d100      	bne.n	8005f88 <memcpy+0xc>
 8005f86:	4770      	bx	lr
 8005f88:	b510      	push	{r4, lr}
 8005f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f92:	4291      	cmp	r1, r2
 8005f94:	d1f9      	bne.n	8005f8a <memcpy+0xe>
 8005f96:	bd10      	pop	{r4, pc}

08005f98 <__malloc_lock>:
 8005f98:	4801      	ldr	r0, [pc, #4]	; (8005fa0 <__malloc_lock+0x8>)
 8005f9a:	f000 bd30 	b.w	80069fe <__retarget_lock_acquire_recursive>
 8005f9e:	bf00      	nop
 8005fa0:	200002a8 	.word	0x200002a8

08005fa4 <__malloc_unlock>:
 8005fa4:	4801      	ldr	r0, [pc, #4]	; (8005fac <__malloc_unlock+0x8>)
 8005fa6:	f000 bd2b 	b.w	8006a00 <__retarget_lock_release_recursive>
 8005faa:	bf00      	nop
 8005fac:	200002a8 	.word	0x200002a8

08005fb0 <_Balloc>:
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	460d      	mov	r5, r1
 8005fb8:	b976      	cbnz	r6, 8005fd8 <_Balloc+0x28>
 8005fba:	2010      	movs	r0, #16
 8005fbc:	f7fe fbd6 	bl	800476c <malloc>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	6260      	str	r0, [r4, #36]	; 0x24
 8005fc4:	b920      	cbnz	r0, 8005fd0 <_Balloc+0x20>
 8005fc6:	4b18      	ldr	r3, [pc, #96]	; (8006028 <_Balloc+0x78>)
 8005fc8:	4818      	ldr	r0, [pc, #96]	; (800602c <_Balloc+0x7c>)
 8005fca:	2166      	movs	r1, #102	; 0x66
 8005fcc:	f000 fce6 	bl	800699c <__assert_func>
 8005fd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fd4:	6006      	str	r6, [r0, #0]
 8005fd6:	60c6      	str	r6, [r0, #12]
 8005fd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005fda:	68f3      	ldr	r3, [r6, #12]
 8005fdc:	b183      	cbz	r3, 8006000 <_Balloc+0x50>
 8005fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005fe6:	b9b8      	cbnz	r0, 8006018 <_Balloc+0x68>
 8005fe8:	2101      	movs	r1, #1
 8005fea:	fa01 f605 	lsl.w	r6, r1, r5
 8005fee:	1d72      	adds	r2, r6, #5
 8005ff0:	0092      	lsls	r2, r2, #2
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f000 fb60 	bl	80066b8 <_calloc_r>
 8005ff8:	b160      	cbz	r0, 8006014 <_Balloc+0x64>
 8005ffa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ffe:	e00e      	b.n	800601e <_Balloc+0x6e>
 8006000:	2221      	movs	r2, #33	; 0x21
 8006002:	2104      	movs	r1, #4
 8006004:	4620      	mov	r0, r4
 8006006:	f000 fb57 	bl	80066b8 <_calloc_r>
 800600a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800600c:	60f0      	str	r0, [r6, #12]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e4      	bne.n	8005fde <_Balloc+0x2e>
 8006014:	2000      	movs	r0, #0
 8006016:	bd70      	pop	{r4, r5, r6, pc}
 8006018:	6802      	ldr	r2, [r0, #0]
 800601a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800601e:	2300      	movs	r3, #0
 8006020:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006024:	e7f7      	b.n	8006016 <_Balloc+0x66>
 8006026:	bf00      	nop
 8006028:	080090ed 	.word	0x080090ed
 800602c:	08009170 	.word	0x08009170

08006030 <_Bfree>:
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006034:	4605      	mov	r5, r0
 8006036:	460c      	mov	r4, r1
 8006038:	b976      	cbnz	r6, 8006058 <_Bfree+0x28>
 800603a:	2010      	movs	r0, #16
 800603c:	f7fe fb96 	bl	800476c <malloc>
 8006040:	4602      	mov	r2, r0
 8006042:	6268      	str	r0, [r5, #36]	; 0x24
 8006044:	b920      	cbnz	r0, 8006050 <_Bfree+0x20>
 8006046:	4b09      	ldr	r3, [pc, #36]	; (800606c <_Bfree+0x3c>)
 8006048:	4809      	ldr	r0, [pc, #36]	; (8006070 <_Bfree+0x40>)
 800604a:	218a      	movs	r1, #138	; 0x8a
 800604c:	f000 fca6 	bl	800699c <__assert_func>
 8006050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006054:	6006      	str	r6, [r0, #0]
 8006056:	60c6      	str	r6, [r0, #12]
 8006058:	b13c      	cbz	r4, 800606a <_Bfree+0x3a>
 800605a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800605c:	6862      	ldr	r2, [r4, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006064:	6021      	str	r1, [r4, #0]
 8006066:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800606a:	bd70      	pop	{r4, r5, r6, pc}
 800606c:	080090ed 	.word	0x080090ed
 8006070:	08009170 	.word	0x08009170

08006074 <__multadd>:
 8006074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006078:	690d      	ldr	r5, [r1, #16]
 800607a:	4607      	mov	r7, r0
 800607c:	460c      	mov	r4, r1
 800607e:	461e      	mov	r6, r3
 8006080:	f101 0c14 	add.w	ip, r1, #20
 8006084:	2000      	movs	r0, #0
 8006086:	f8dc 3000 	ldr.w	r3, [ip]
 800608a:	b299      	uxth	r1, r3
 800608c:	fb02 6101 	mla	r1, r2, r1, r6
 8006090:	0c1e      	lsrs	r6, r3, #16
 8006092:	0c0b      	lsrs	r3, r1, #16
 8006094:	fb02 3306 	mla	r3, r2, r6, r3
 8006098:	b289      	uxth	r1, r1
 800609a:	3001      	adds	r0, #1
 800609c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80060a0:	4285      	cmp	r5, r0
 80060a2:	f84c 1b04 	str.w	r1, [ip], #4
 80060a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80060aa:	dcec      	bgt.n	8006086 <__multadd+0x12>
 80060ac:	b30e      	cbz	r6, 80060f2 <__multadd+0x7e>
 80060ae:	68a3      	ldr	r3, [r4, #8]
 80060b0:	42ab      	cmp	r3, r5
 80060b2:	dc19      	bgt.n	80060e8 <__multadd+0x74>
 80060b4:	6861      	ldr	r1, [r4, #4]
 80060b6:	4638      	mov	r0, r7
 80060b8:	3101      	adds	r1, #1
 80060ba:	f7ff ff79 	bl	8005fb0 <_Balloc>
 80060be:	4680      	mov	r8, r0
 80060c0:	b928      	cbnz	r0, 80060ce <__multadd+0x5a>
 80060c2:	4602      	mov	r2, r0
 80060c4:	4b0c      	ldr	r3, [pc, #48]	; (80060f8 <__multadd+0x84>)
 80060c6:	480d      	ldr	r0, [pc, #52]	; (80060fc <__multadd+0x88>)
 80060c8:	21b5      	movs	r1, #181	; 0xb5
 80060ca:	f000 fc67 	bl	800699c <__assert_func>
 80060ce:	6922      	ldr	r2, [r4, #16]
 80060d0:	3202      	adds	r2, #2
 80060d2:	f104 010c 	add.w	r1, r4, #12
 80060d6:	0092      	lsls	r2, r2, #2
 80060d8:	300c      	adds	r0, #12
 80060da:	f7ff ff4f 	bl	8005f7c <memcpy>
 80060de:	4621      	mov	r1, r4
 80060e0:	4638      	mov	r0, r7
 80060e2:	f7ff ffa5 	bl	8006030 <_Bfree>
 80060e6:	4644      	mov	r4, r8
 80060e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80060ec:	3501      	adds	r5, #1
 80060ee:	615e      	str	r6, [r3, #20]
 80060f0:	6125      	str	r5, [r4, #16]
 80060f2:	4620      	mov	r0, r4
 80060f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060f8:	0800915f 	.word	0x0800915f
 80060fc:	08009170 	.word	0x08009170

08006100 <__hi0bits>:
 8006100:	0c03      	lsrs	r3, r0, #16
 8006102:	041b      	lsls	r3, r3, #16
 8006104:	b9d3      	cbnz	r3, 800613c <__hi0bits+0x3c>
 8006106:	0400      	lsls	r0, r0, #16
 8006108:	2310      	movs	r3, #16
 800610a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800610e:	bf04      	itt	eq
 8006110:	0200      	lsleq	r0, r0, #8
 8006112:	3308      	addeq	r3, #8
 8006114:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006118:	bf04      	itt	eq
 800611a:	0100      	lsleq	r0, r0, #4
 800611c:	3304      	addeq	r3, #4
 800611e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006122:	bf04      	itt	eq
 8006124:	0080      	lsleq	r0, r0, #2
 8006126:	3302      	addeq	r3, #2
 8006128:	2800      	cmp	r0, #0
 800612a:	db05      	blt.n	8006138 <__hi0bits+0x38>
 800612c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006130:	f103 0301 	add.w	r3, r3, #1
 8006134:	bf08      	it	eq
 8006136:	2320      	moveq	r3, #32
 8006138:	4618      	mov	r0, r3
 800613a:	4770      	bx	lr
 800613c:	2300      	movs	r3, #0
 800613e:	e7e4      	b.n	800610a <__hi0bits+0xa>

08006140 <__lo0bits>:
 8006140:	6803      	ldr	r3, [r0, #0]
 8006142:	f013 0207 	ands.w	r2, r3, #7
 8006146:	4601      	mov	r1, r0
 8006148:	d00b      	beq.n	8006162 <__lo0bits+0x22>
 800614a:	07da      	lsls	r2, r3, #31
 800614c:	d423      	bmi.n	8006196 <__lo0bits+0x56>
 800614e:	0798      	lsls	r0, r3, #30
 8006150:	bf49      	itett	mi
 8006152:	085b      	lsrmi	r3, r3, #1
 8006154:	089b      	lsrpl	r3, r3, #2
 8006156:	2001      	movmi	r0, #1
 8006158:	600b      	strmi	r3, [r1, #0]
 800615a:	bf5c      	itt	pl
 800615c:	600b      	strpl	r3, [r1, #0]
 800615e:	2002      	movpl	r0, #2
 8006160:	4770      	bx	lr
 8006162:	b298      	uxth	r0, r3
 8006164:	b9a8      	cbnz	r0, 8006192 <__lo0bits+0x52>
 8006166:	0c1b      	lsrs	r3, r3, #16
 8006168:	2010      	movs	r0, #16
 800616a:	b2da      	uxtb	r2, r3
 800616c:	b90a      	cbnz	r2, 8006172 <__lo0bits+0x32>
 800616e:	3008      	adds	r0, #8
 8006170:	0a1b      	lsrs	r3, r3, #8
 8006172:	071a      	lsls	r2, r3, #28
 8006174:	bf04      	itt	eq
 8006176:	091b      	lsreq	r3, r3, #4
 8006178:	3004      	addeq	r0, #4
 800617a:	079a      	lsls	r2, r3, #30
 800617c:	bf04      	itt	eq
 800617e:	089b      	lsreq	r3, r3, #2
 8006180:	3002      	addeq	r0, #2
 8006182:	07da      	lsls	r2, r3, #31
 8006184:	d403      	bmi.n	800618e <__lo0bits+0x4e>
 8006186:	085b      	lsrs	r3, r3, #1
 8006188:	f100 0001 	add.w	r0, r0, #1
 800618c:	d005      	beq.n	800619a <__lo0bits+0x5a>
 800618e:	600b      	str	r3, [r1, #0]
 8006190:	4770      	bx	lr
 8006192:	4610      	mov	r0, r2
 8006194:	e7e9      	b.n	800616a <__lo0bits+0x2a>
 8006196:	2000      	movs	r0, #0
 8006198:	4770      	bx	lr
 800619a:	2020      	movs	r0, #32
 800619c:	4770      	bx	lr
	...

080061a0 <__i2b>:
 80061a0:	b510      	push	{r4, lr}
 80061a2:	460c      	mov	r4, r1
 80061a4:	2101      	movs	r1, #1
 80061a6:	f7ff ff03 	bl	8005fb0 <_Balloc>
 80061aa:	4602      	mov	r2, r0
 80061ac:	b928      	cbnz	r0, 80061ba <__i2b+0x1a>
 80061ae:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <__i2b+0x24>)
 80061b0:	4805      	ldr	r0, [pc, #20]	; (80061c8 <__i2b+0x28>)
 80061b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80061b6:	f000 fbf1 	bl	800699c <__assert_func>
 80061ba:	2301      	movs	r3, #1
 80061bc:	6144      	str	r4, [r0, #20]
 80061be:	6103      	str	r3, [r0, #16]
 80061c0:	bd10      	pop	{r4, pc}
 80061c2:	bf00      	nop
 80061c4:	0800915f 	.word	0x0800915f
 80061c8:	08009170 	.word	0x08009170

080061cc <__multiply>:
 80061cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d0:	4691      	mov	r9, r2
 80061d2:	690a      	ldr	r2, [r1, #16]
 80061d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80061d8:	429a      	cmp	r2, r3
 80061da:	bfb8      	it	lt
 80061dc:	460b      	movlt	r3, r1
 80061de:	460c      	mov	r4, r1
 80061e0:	bfbc      	itt	lt
 80061e2:	464c      	movlt	r4, r9
 80061e4:	4699      	movlt	r9, r3
 80061e6:	6927      	ldr	r7, [r4, #16]
 80061e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80061ec:	68a3      	ldr	r3, [r4, #8]
 80061ee:	6861      	ldr	r1, [r4, #4]
 80061f0:	eb07 060a 	add.w	r6, r7, sl
 80061f4:	42b3      	cmp	r3, r6
 80061f6:	b085      	sub	sp, #20
 80061f8:	bfb8      	it	lt
 80061fa:	3101      	addlt	r1, #1
 80061fc:	f7ff fed8 	bl	8005fb0 <_Balloc>
 8006200:	b930      	cbnz	r0, 8006210 <__multiply+0x44>
 8006202:	4602      	mov	r2, r0
 8006204:	4b44      	ldr	r3, [pc, #272]	; (8006318 <__multiply+0x14c>)
 8006206:	4845      	ldr	r0, [pc, #276]	; (800631c <__multiply+0x150>)
 8006208:	f240 115d 	movw	r1, #349	; 0x15d
 800620c:	f000 fbc6 	bl	800699c <__assert_func>
 8006210:	f100 0514 	add.w	r5, r0, #20
 8006214:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006218:	462b      	mov	r3, r5
 800621a:	2200      	movs	r2, #0
 800621c:	4543      	cmp	r3, r8
 800621e:	d321      	bcc.n	8006264 <__multiply+0x98>
 8006220:	f104 0314 	add.w	r3, r4, #20
 8006224:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006228:	f109 0314 	add.w	r3, r9, #20
 800622c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006230:	9202      	str	r2, [sp, #8]
 8006232:	1b3a      	subs	r2, r7, r4
 8006234:	3a15      	subs	r2, #21
 8006236:	f022 0203 	bic.w	r2, r2, #3
 800623a:	3204      	adds	r2, #4
 800623c:	f104 0115 	add.w	r1, r4, #21
 8006240:	428f      	cmp	r7, r1
 8006242:	bf38      	it	cc
 8006244:	2204      	movcc	r2, #4
 8006246:	9201      	str	r2, [sp, #4]
 8006248:	9a02      	ldr	r2, [sp, #8]
 800624a:	9303      	str	r3, [sp, #12]
 800624c:	429a      	cmp	r2, r3
 800624e:	d80c      	bhi.n	800626a <__multiply+0x9e>
 8006250:	2e00      	cmp	r6, #0
 8006252:	dd03      	ble.n	800625c <__multiply+0x90>
 8006254:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006258:	2b00      	cmp	r3, #0
 800625a:	d05a      	beq.n	8006312 <__multiply+0x146>
 800625c:	6106      	str	r6, [r0, #16]
 800625e:	b005      	add	sp, #20
 8006260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006264:	f843 2b04 	str.w	r2, [r3], #4
 8006268:	e7d8      	b.n	800621c <__multiply+0x50>
 800626a:	f8b3 a000 	ldrh.w	sl, [r3]
 800626e:	f1ba 0f00 	cmp.w	sl, #0
 8006272:	d024      	beq.n	80062be <__multiply+0xf2>
 8006274:	f104 0e14 	add.w	lr, r4, #20
 8006278:	46a9      	mov	r9, r5
 800627a:	f04f 0c00 	mov.w	ip, #0
 800627e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006282:	f8d9 1000 	ldr.w	r1, [r9]
 8006286:	fa1f fb82 	uxth.w	fp, r2
 800628a:	b289      	uxth	r1, r1
 800628c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006290:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006294:	f8d9 2000 	ldr.w	r2, [r9]
 8006298:	4461      	add	r1, ip
 800629a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800629e:	fb0a c20b 	mla	r2, sl, fp, ip
 80062a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80062a6:	b289      	uxth	r1, r1
 80062a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80062ac:	4577      	cmp	r7, lr
 80062ae:	f849 1b04 	str.w	r1, [r9], #4
 80062b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80062b6:	d8e2      	bhi.n	800627e <__multiply+0xb2>
 80062b8:	9a01      	ldr	r2, [sp, #4]
 80062ba:	f845 c002 	str.w	ip, [r5, r2]
 80062be:	9a03      	ldr	r2, [sp, #12]
 80062c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80062c4:	3304      	adds	r3, #4
 80062c6:	f1b9 0f00 	cmp.w	r9, #0
 80062ca:	d020      	beq.n	800630e <__multiply+0x142>
 80062cc:	6829      	ldr	r1, [r5, #0]
 80062ce:	f104 0c14 	add.w	ip, r4, #20
 80062d2:	46ae      	mov	lr, r5
 80062d4:	f04f 0a00 	mov.w	sl, #0
 80062d8:	f8bc b000 	ldrh.w	fp, [ip]
 80062dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80062e0:	fb09 220b 	mla	r2, r9, fp, r2
 80062e4:	4492      	add	sl, r2
 80062e6:	b289      	uxth	r1, r1
 80062e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80062ec:	f84e 1b04 	str.w	r1, [lr], #4
 80062f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80062f4:	f8be 1000 	ldrh.w	r1, [lr]
 80062f8:	0c12      	lsrs	r2, r2, #16
 80062fa:	fb09 1102 	mla	r1, r9, r2, r1
 80062fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006302:	4567      	cmp	r7, ip
 8006304:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006308:	d8e6      	bhi.n	80062d8 <__multiply+0x10c>
 800630a:	9a01      	ldr	r2, [sp, #4]
 800630c:	50a9      	str	r1, [r5, r2]
 800630e:	3504      	adds	r5, #4
 8006310:	e79a      	b.n	8006248 <__multiply+0x7c>
 8006312:	3e01      	subs	r6, #1
 8006314:	e79c      	b.n	8006250 <__multiply+0x84>
 8006316:	bf00      	nop
 8006318:	0800915f 	.word	0x0800915f
 800631c:	08009170 	.word	0x08009170

08006320 <__pow5mult>:
 8006320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006324:	4615      	mov	r5, r2
 8006326:	f012 0203 	ands.w	r2, r2, #3
 800632a:	4606      	mov	r6, r0
 800632c:	460f      	mov	r7, r1
 800632e:	d007      	beq.n	8006340 <__pow5mult+0x20>
 8006330:	4c25      	ldr	r4, [pc, #148]	; (80063c8 <__pow5mult+0xa8>)
 8006332:	3a01      	subs	r2, #1
 8006334:	2300      	movs	r3, #0
 8006336:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800633a:	f7ff fe9b 	bl	8006074 <__multadd>
 800633e:	4607      	mov	r7, r0
 8006340:	10ad      	asrs	r5, r5, #2
 8006342:	d03d      	beq.n	80063c0 <__pow5mult+0xa0>
 8006344:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006346:	b97c      	cbnz	r4, 8006368 <__pow5mult+0x48>
 8006348:	2010      	movs	r0, #16
 800634a:	f7fe fa0f 	bl	800476c <malloc>
 800634e:	4602      	mov	r2, r0
 8006350:	6270      	str	r0, [r6, #36]	; 0x24
 8006352:	b928      	cbnz	r0, 8006360 <__pow5mult+0x40>
 8006354:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <__pow5mult+0xac>)
 8006356:	481e      	ldr	r0, [pc, #120]	; (80063d0 <__pow5mult+0xb0>)
 8006358:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800635c:	f000 fb1e 	bl	800699c <__assert_func>
 8006360:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006364:	6004      	str	r4, [r0, #0]
 8006366:	60c4      	str	r4, [r0, #12]
 8006368:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800636c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006370:	b94c      	cbnz	r4, 8006386 <__pow5mult+0x66>
 8006372:	f240 2171 	movw	r1, #625	; 0x271
 8006376:	4630      	mov	r0, r6
 8006378:	f7ff ff12 	bl	80061a0 <__i2b>
 800637c:	2300      	movs	r3, #0
 800637e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006382:	4604      	mov	r4, r0
 8006384:	6003      	str	r3, [r0, #0]
 8006386:	f04f 0900 	mov.w	r9, #0
 800638a:	07eb      	lsls	r3, r5, #31
 800638c:	d50a      	bpl.n	80063a4 <__pow5mult+0x84>
 800638e:	4639      	mov	r1, r7
 8006390:	4622      	mov	r2, r4
 8006392:	4630      	mov	r0, r6
 8006394:	f7ff ff1a 	bl	80061cc <__multiply>
 8006398:	4639      	mov	r1, r7
 800639a:	4680      	mov	r8, r0
 800639c:	4630      	mov	r0, r6
 800639e:	f7ff fe47 	bl	8006030 <_Bfree>
 80063a2:	4647      	mov	r7, r8
 80063a4:	106d      	asrs	r5, r5, #1
 80063a6:	d00b      	beq.n	80063c0 <__pow5mult+0xa0>
 80063a8:	6820      	ldr	r0, [r4, #0]
 80063aa:	b938      	cbnz	r0, 80063bc <__pow5mult+0x9c>
 80063ac:	4622      	mov	r2, r4
 80063ae:	4621      	mov	r1, r4
 80063b0:	4630      	mov	r0, r6
 80063b2:	f7ff ff0b 	bl	80061cc <__multiply>
 80063b6:	6020      	str	r0, [r4, #0]
 80063b8:	f8c0 9000 	str.w	r9, [r0]
 80063bc:	4604      	mov	r4, r0
 80063be:	e7e4      	b.n	800638a <__pow5mult+0x6a>
 80063c0:	4638      	mov	r0, r7
 80063c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063c6:	bf00      	nop
 80063c8:	080092c0 	.word	0x080092c0
 80063cc:	080090ed 	.word	0x080090ed
 80063d0:	08009170 	.word	0x08009170

080063d4 <__lshift>:
 80063d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d8:	460c      	mov	r4, r1
 80063da:	6849      	ldr	r1, [r1, #4]
 80063dc:	6923      	ldr	r3, [r4, #16]
 80063de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80063e2:	68a3      	ldr	r3, [r4, #8]
 80063e4:	4607      	mov	r7, r0
 80063e6:	4691      	mov	r9, r2
 80063e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063ec:	f108 0601 	add.w	r6, r8, #1
 80063f0:	42b3      	cmp	r3, r6
 80063f2:	db0b      	blt.n	800640c <__lshift+0x38>
 80063f4:	4638      	mov	r0, r7
 80063f6:	f7ff fddb 	bl	8005fb0 <_Balloc>
 80063fa:	4605      	mov	r5, r0
 80063fc:	b948      	cbnz	r0, 8006412 <__lshift+0x3e>
 80063fe:	4602      	mov	r2, r0
 8006400:	4b2a      	ldr	r3, [pc, #168]	; (80064ac <__lshift+0xd8>)
 8006402:	482b      	ldr	r0, [pc, #172]	; (80064b0 <__lshift+0xdc>)
 8006404:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006408:	f000 fac8 	bl	800699c <__assert_func>
 800640c:	3101      	adds	r1, #1
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	e7ee      	b.n	80063f0 <__lshift+0x1c>
 8006412:	2300      	movs	r3, #0
 8006414:	f100 0114 	add.w	r1, r0, #20
 8006418:	f100 0210 	add.w	r2, r0, #16
 800641c:	4618      	mov	r0, r3
 800641e:	4553      	cmp	r3, sl
 8006420:	db37      	blt.n	8006492 <__lshift+0xbe>
 8006422:	6920      	ldr	r0, [r4, #16]
 8006424:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006428:	f104 0314 	add.w	r3, r4, #20
 800642c:	f019 091f 	ands.w	r9, r9, #31
 8006430:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006434:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006438:	d02f      	beq.n	800649a <__lshift+0xc6>
 800643a:	f1c9 0e20 	rsb	lr, r9, #32
 800643e:	468a      	mov	sl, r1
 8006440:	f04f 0c00 	mov.w	ip, #0
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	fa02 f209 	lsl.w	r2, r2, r9
 800644a:	ea42 020c 	orr.w	r2, r2, ip
 800644e:	f84a 2b04 	str.w	r2, [sl], #4
 8006452:	f853 2b04 	ldr.w	r2, [r3], #4
 8006456:	4298      	cmp	r0, r3
 8006458:	fa22 fc0e 	lsr.w	ip, r2, lr
 800645c:	d8f2      	bhi.n	8006444 <__lshift+0x70>
 800645e:	1b03      	subs	r3, r0, r4
 8006460:	3b15      	subs	r3, #21
 8006462:	f023 0303 	bic.w	r3, r3, #3
 8006466:	3304      	adds	r3, #4
 8006468:	f104 0215 	add.w	r2, r4, #21
 800646c:	4290      	cmp	r0, r2
 800646e:	bf38      	it	cc
 8006470:	2304      	movcc	r3, #4
 8006472:	f841 c003 	str.w	ip, [r1, r3]
 8006476:	f1bc 0f00 	cmp.w	ip, #0
 800647a:	d001      	beq.n	8006480 <__lshift+0xac>
 800647c:	f108 0602 	add.w	r6, r8, #2
 8006480:	3e01      	subs	r6, #1
 8006482:	4638      	mov	r0, r7
 8006484:	612e      	str	r6, [r5, #16]
 8006486:	4621      	mov	r1, r4
 8006488:	f7ff fdd2 	bl	8006030 <_Bfree>
 800648c:	4628      	mov	r0, r5
 800648e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006492:	f842 0f04 	str.w	r0, [r2, #4]!
 8006496:	3301      	adds	r3, #1
 8006498:	e7c1      	b.n	800641e <__lshift+0x4a>
 800649a:	3904      	subs	r1, #4
 800649c:	f853 2b04 	ldr.w	r2, [r3], #4
 80064a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80064a4:	4298      	cmp	r0, r3
 80064a6:	d8f9      	bhi.n	800649c <__lshift+0xc8>
 80064a8:	e7ea      	b.n	8006480 <__lshift+0xac>
 80064aa:	bf00      	nop
 80064ac:	0800915f 	.word	0x0800915f
 80064b0:	08009170 	.word	0x08009170

080064b4 <__mcmp>:
 80064b4:	b530      	push	{r4, r5, lr}
 80064b6:	6902      	ldr	r2, [r0, #16]
 80064b8:	690c      	ldr	r4, [r1, #16]
 80064ba:	1b12      	subs	r2, r2, r4
 80064bc:	d10e      	bne.n	80064dc <__mcmp+0x28>
 80064be:	f100 0314 	add.w	r3, r0, #20
 80064c2:	3114      	adds	r1, #20
 80064c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80064c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80064cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80064d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80064d4:	42a5      	cmp	r5, r4
 80064d6:	d003      	beq.n	80064e0 <__mcmp+0x2c>
 80064d8:	d305      	bcc.n	80064e6 <__mcmp+0x32>
 80064da:	2201      	movs	r2, #1
 80064dc:	4610      	mov	r0, r2
 80064de:	bd30      	pop	{r4, r5, pc}
 80064e0:	4283      	cmp	r3, r0
 80064e2:	d3f3      	bcc.n	80064cc <__mcmp+0x18>
 80064e4:	e7fa      	b.n	80064dc <__mcmp+0x28>
 80064e6:	f04f 32ff 	mov.w	r2, #4294967295
 80064ea:	e7f7      	b.n	80064dc <__mcmp+0x28>

080064ec <__mdiff>:
 80064ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f0:	460c      	mov	r4, r1
 80064f2:	4606      	mov	r6, r0
 80064f4:	4611      	mov	r1, r2
 80064f6:	4620      	mov	r0, r4
 80064f8:	4690      	mov	r8, r2
 80064fa:	f7ff ffdb 	bl	80064b4 <__mcmp>
 80064fe:	1e05      	subs	r5, r0, #0
 8006500:	d110      	bne.n	8006524 <__mdiff+0x38>
 8006502:	4629      	mov	r1, r5
 8006504:	4630      	mov	r0, r6
 8006506:	f7ff fd53 	bl	8005fb0 <_Balloc>
 800650a:	b930      	cbnz	r0, 800651a <__mdiff+0x2e>
 800650c:	4b3a      	ldr	r3, [pc, #232]	; (80065f8 <__mdiff+0x10c>)
 800650e:	4602      	mov	r2, r0
 8006510:	f240 2132 	movw	r1, #562	; 0x232
 8006514:	4839      	ldr	r0, [pc, #228]	; (80065fc <__mdiff+0x110>)
 8006516:	f000 fa41 	bl	800699c <__assert_func>
 800651a:	2301      	movs	r3, #1
 800651c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006524:	bfa4      	itt	ge
 8006526:	4643      	movge	r3, r8
 8006528:	46a0      	movge	r8, r4
 800652a:	4630      	mov	r0, r6
 800652c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006530:	bfa6      	itte	ge
 8006532:	461c      	movge	r4, r3
 8006534:	2500      	movge	r5, #0
 8006536:	2501      	movlt	r5, #1
 8006538:	f7ff fd3a 	bl	8005fb0 <_Balloc>
 800653c:	b920      	cbnz	r0, 8006548 <__mdiff+0x5c>
 800653e:	4b2e      	ldr	r3, [pc, #184]	; (80065f8 <__mdiff+0x10c>)
 8006540:	4602      	mov	r2, r0
 8006542:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006546:	e7e5      	b.n	8006514 <__mdiff+0x28>
 8006548:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800654c:	6926      	ldr	r6, [r4, #16]
 800654e:	60c5      	str	r5, [r0, #12]
 8006550:	f104 0914 	add.w	r9, r4, #20
 8006554:	f108 0514 	add.w	r5, r8, #20
 8006558:	f100 0e14 	add.w	lr, r0, #20
 800655c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006560:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006564:	f108 0210 	add.w	r2, r8, #16
 8006568:	46f2      	mov	sl, lr
 800656a:	2100      	movs	r1, #0
 800656c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006570:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006574:	fa1f f883 	uxth.w	r8, r3
 8006578:	fa11 f18b 	uxtah	r1, r1, fp
 800657c:	0c1b      	lsrs	r3, r3, #16
 800657e:	eba1 0808 	sub.w	r8, r1, r8
 8006582:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006586:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800658a:	fa1f f888 	uxth.w	r8, r8
 800658e:	1419      	asrs	r1, r3, #16
 8006590:	454e      	cmp	r6, r9
 8006592:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006596:	f84a 3b04 	str.w	r3, [sl], #4
 800659a:	d8e7      	bhi.n	800656c <__mdiff+0x80>
 800659c:	1b33      	subs	r3, r6, r4
 800659e:	3b15      	subs	r3, #21
 80065a0:	f023 0303 	bic.w	r3, r3, #3
 80065a4:	3304      	adds	r3, #4
 80065a6:	3415      	adds	r4, #21
 80065a8:	42a6      	cmp	r6, r4
 80065aa:	bf38      	it	cc
 80065ac:	2304      	movcc	r3, #4
 80065ae:	441d      	add	r5, r3
 80065b0:	4473      	add	r3, lr
 80065b2:	469e      	mov	lr, r3
 80065b4:	462e      	mov	r6, r5
 80065b6:	4566      	cmp	r6, ip
 80065b8:	d30e      	bcc.n	80065d8 <__mdiff+0xec>
 80065ba:	f10c 0203 	add.w	r2, ip, #3
 80065be:	1b52      	subs	r2, r2, r5
 80065c0:	f022 0203 	bic.w	r2, r2, #3
 80065c4:	3d03      	subs	r5, #3
 80065c6:	45ac      	cmp	ip, r5
 80065c8:	bf38      	it	cc
 80065ca:	2200      	movcc	r2, #0
 80065cc:	441a      	add	r2, r3
 80065ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80065d2:	b17b      	cbz	r3, 80065f4 <__mdiff+0x108>
 80065d4:	6107      	str	r7, [r0, #16]
 80065d6:	e7a3      	b.n	8006520 <__mdiff+0x34>
 80065d8:	f856 8b04 	ldr.w	r8, [r6], #4
 80065dc:	fa11 f288 	uxtah	r2, r1, r8
 80065e0:	1414      	asrs	r4, r2, #16
 80065e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80065e6:	b292      	uxth	r2, r2
 80065e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80065ec:	f84e 2b04 	str.w	r2, [lr], #4
 80065f0:	1421      	asrs	r1, r4, #16
 80065f2:	e7e0      	b.n	80065b6 <__mdiff+0xca>
 80065f4:	3f01      	subs	r7, #1
 80065f6:	e7ea      	b.n	80065ce <__mdiff+0xe2>
 80065f8:	0800915f 	.word	0x0800915f
 80065fc:	08009170 	.word	0x08009170

08006600 <__d2b>:
 8006600:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006604:	4689      	mov	r9, r1
 8006606:	2101      	movs	r1, #1
 8006608:	ec57 6b10 	vmov	r6, r7, d0
 800660c:	4690      	mov	r8, r2
 800660e:	f7ff fccf 	bl	8005fb0 <_Balloc>
 8006612:	4604      	mov	r4, r0
 8006614:	b930      	cbnz	r0, 8006624 <__d2b+0x24>
 8006616:	4602      	mov	r2, r0
 8006618:	4b25      	ldr	r3, [pc, #148]	; (80066b0 <__d2b+0xb0>)
 800661a:	4826      	ldr	r0, [pc, #152]	; (80066b4 <__d2b+0xb4>)
 800661c:	f240 310a 	movw	r1, #778	; 0x30a
 8006620:	f000 f9bc 	bl	800699c <__assert_func>
 8006624:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006628:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800662c:	bb35      	cbnz	r5, 800667c <__d2b+0x7c>
 800662e:	2e00      	cmp	r6, #0
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	d028      	beq.n	8006686 <__d2b+0x86>
 8006634:	4668      	mov	r0, sp
 8006636:	9600      	str	r6, [sp, #0]
 8006638:	f7ff fd82 	bl	8006140 <__lo0bits>
 800663c:	9900      	ldr	r1, [sp, #0]
 800663e:	b300      	cbz	r0, 8006682 <__d2b+0x82>
 8006640:	9a01      	ldr	r2, [sp, #4]
 8006642:	f1c0 0320 	rsb	r3, r0, #32
 8006646:	fa02 f303 	lsl.w	r3, r2, r3
 800664a:	430b      	orrs	r3, r1
 800664c:	40c2      	lsrs	r2, r0
 800664e:	6163      	str	r3, [r4, #20]
 8006650:	9201      	str	r2, [sp, #4]
 8006652:	9b01      	ldr	r3, [sp, #4]
 8006654:	61a3      	str	r3, [r4, #24]
 8006656:	2b00      	cmp	r3, #0
 8006658:	bf14      	ite	ne
 800665a:	2202      	movne	r2, #2
 800665c:	2201      	moveq	r2, #1
 800665e:	6122      	str	r2, [r4, #16]
 8006660:	b1d5      	cbz	r5, 8006698 <__d2b+0x98>
 8006662:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006666:	4405      	add	r5, r0
 8006668:	f8c9 5000 	str.w	r5, [r9]
 800666c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006670:	f8c8 0000 	str.w	r0, [r8]
 8006674:	4620      	mov	r0, r4
 8006676:	b003      	add	sp, #12
 8006678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800667c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006680:	e7d5      	b.n	800662e <__d2b+0x2e>
 8006682:	6161      	str	r1, [r4, #20]
 8006684:	e7e5      	b.n	8006652 <__d2b+0x52>
 8006686:	a801      	add	r0, sp, #4
 8006688:	f7ff fd5a 	bl	8006140 <__lo0bits>
 800668c:	9b01      	ldr	r3, [sp, #4]
 800668e:	6163      	str	r3, [r4, #20]
 8006690:	2201      	movs	r2, #1
 8006692:	6122      	str	r2, [r4, #16]
 8006694:	3020      	adds	r0, #32
 8006696:	e7e3      	b.n	8006660 <__d2b+0x60>
 8006698:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800669c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80066a0:	f8c9 0000 	str.w	r0, [r9]
 80066a4:	6918      	ldr	r0, [r3, #16]
 80066a6:	f7ff fd2b 	bl	8006100 <__hi0bits>
 80066aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80066ae:	e7df      	b.n	8006670 <__d2b+0x70>
 80066b0:	0800915f 	.word	0x0800915f
 80066b4:	08009170 	.word	0x08009170

080066b8 <_calloc_r>:
 80066b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066ba:	fba1 2402 	umull	r2, r4, r1, r2
 80066be:	b94c      	cbnz	r4, 80066d4 <_calloc_r+0x1c>
 80066c0:	4611      	mov	r1, r2
 80066c2:	9201      	str	r2, [sp, #4]
 80066c4:	f7fe f8ce 	bl	8004864 <_malloc_r>
 80066c8:	9a01      	ldr	r2, [sp, #4]
 80066ca:	4605      	mov	r5, r0
 80066cc:	b930      	cbnz	r0, 80066dc <_calloc_r+0x24>
 80066ce:	4628      	mov	r0, r5
 80066d0:	b003      	add	sp, #12
 80066d2:	bd30      	pop	{r4, r5, pc}
 80066d4:	220c      	movs	r2, #12
 80066d6:	6002      	str	r2, [r0, #0]
 80066d8:	2500      	movs	r5, #0
 80066da:	e7f8      	b.n	80066ce <_calloc_r+0x16>
 80066dc:	4621      	mov	r1, r4
 80066de:	f7fe f84d 	bl	800477c <memset>
 80066e2:	e7f4      	b.n	80066ce <_calloc_r+0x16>

080066e4 <__ssputs_r>:
 80066e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e8:	688e      	ldr	r6, [r1, #8]
 80066ea:	429e      	cmp	r6, r3
 80066ec:	4682      	mov	sl, r0
 80066ee:	460c      	mov	r4, r1
 80066f0:	4690      	mov	r8, r2
 80066f2:	461f      	mov	r7, r3
 80066f4:	d838      	bhi.n	8006768 <__ssputs_r+0x84>
 80066f6:	898a      	ldrh	r2, [r1, #12]
 80066f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066fc:	d032      	beq.n	8006764 <__ssputs_r+0x80>
 80066fe:	6825      	ldr	r5, [r4, #0]
 8006700:	6909      	ldr	r1, [r1, #16]
 8006702:	eba5 0901 	sub.w	r9, r5, r1
 8006706:	6965      	ldr	r5, [r4, #20]
 8006708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800670c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006710:	3301      	adds	r3, #1
 8006712:	444b      	add	r3, r9
 8006714:	106d      	asrs	r5, r5, #1
 8006716:	429d      	cmp	r5, r3
 8006718:	bf38      	it	cc
 800671a:	461d      	movcc	r5, r3
 800671c:	0553      	lsls	r3, r2, #21
 800671e:	d531      	bpl.n	8006784 <__ssputs_r+0xa0>
 8006720:	4629      	mov	r1, r5
 8006722:	f7fe f89f 	bl	8004864 <_malloc_r>
 8006726:	4606      	mov	r6, r0
 8006728:	b950      	cbnz	r0, 8006740 <__ssputs_r+0x5c>
 800672a:	230c      	movs	r3, #12
 800672c:	f8ca 3000 	str.w	r3, [sl]
 8006730:	89a3      	ldrh	r3, [r4, #12]
 8006732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006736:	81a3      	strh	r3, [r4, #12]
 8006738:	f04f 30ff 	mov.w	r0, #4294967295
 800673c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006740:	6921      	ldr	r1, [r4, #16]
 8006742:	464a      	mov	r2, r9
 8006744:	f7ff fc1a 	bl	8005f7c <memcpy>
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800674e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006752:	81a3      	strh	r3, [r4, #12]
 8006754:	6126      	str	r6, [r4, #16]
 8006756:	6165      	str	r5, [r4, #20]
 8006758:	444e      	add	r6, r9
 800675a:	eba5 0509 	sub.w	r5, r5, r9
 800675e:	6026      	str	r6, [r4, #0]
 8006760:	60a5      	str	r5, [r4, #8]
 8006762:	463e      	mov	r6, r7
 8006764:	42be      	cmp	r6, r7
 8006766:	d900      	bls.n	800676a <__ssputs_r+0x86>
 8006768:	463e      	mov	r6, r7
 800676a:	6820      	ldr	r0, [r4, #0]
 800676c:	4632      	mov	r2, r6
 800676e:	4641      	mov	r1, r8
 8006770:	f000 f959 	bl	8006a26 <memmove>
 8006774:	68a3      	ldr	r3, [r4, #8]
 8006776:	1b9b      	subs	r3, r3, r6
 8006778:	60a3      	str	r3, [r4, #8]
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	4433      	add	r3, r6
 800677e:	6023      	str	r3, [r4, #0]
 8006780:	2000      	movs	r0, #0
 8006782:	e7db      	b.n	800673c <__ssputs_r+0x58>
 8006784:	462a      	mov	r2, r5
 8006786:	f000 f968 	bl	8006a5a <_realloc_r>
 800678a:	4606      	mov	r6, r0
 800678c:	2800      	cmp	r0, #0
 800678e:	d1e1      	bne.n	8006754 <__ssputs_r+0x70>
 8006790:	6921      	ldr	r1, [r4, #16]
 8006792:	4650      	mov	r0, sl
 8006794:	f7fd fffa 	bl	800478c <_free_r>
 8006798:	e7c7      	b.n	800672a <__ssputs_r+0x46>
	...

0800679c <_svfiprintf_r>:
 800679c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a0:	4698      	mov	r8, r3
 80067a2:	898b      	ldrh	r3, [r1, #12]
 80067a4:	061b      	lsls	r3, r3, #24
 80067a6:	b09d      	sub	sp, #116	; 0x74
 80067a8:	4607      	mov	r7, r0
 80067aa:	460d      	mov	r5, r1
 80067ac:	4614      	mov	r4, r2
 80067ae:	d50e      	bpl.n	80067ce <_svfiprintf_r+0x32>
 80067b0:	690b      	ldr	r3, [r1, #16]
 80067b2:	b963      	cbnz	r3, 80067ce <_svfiprintf_r+0x32>
 80067b4:	2140      	movs	r1, #64	; 0x40
 80067b6:	f7fe f855 	bl	8004864 <_malloc_r>
 80067ba:	6028      	str	r0, [r5, #0]
 80067bc:	6128      	str	r0, [r5, #16]
 80067be:	b920      	cbnz	r0, 80067ca <_svfiprintf_r+0x2e>
 80067c0:	230c      	movs	r3, #12
 80067c2:	603b      	str	r3, [r7, #0]
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295
 80067c8:	e0d1      	b.n	800696e <_svfiprintf_r+0x1d2>
 80067ca:	2340      	movs	r3, #64	; 0x40
 80067cc:	616b      	str	r3, [r5, #20]
 80067ce:	2300      	movs	r3, #0
 80067d0:	9309      	str	r3, [sp, #36]	; 0x24
 80067d2:	2320      	movs	r3, #32
 80067d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80067dc:	2330      	movs	r3, #48	; 0x30
 80067de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006988 <_svfiprintf_r+0x1ec>
 80067e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067e6:	f04f 0901 	mov.w	r9, #1
 80067ea:	4623      	mov	r3, r4
 80067ec:	469a      	mov	sl, r3
 80067ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067f2:	b10a      	cbz	r2, 80067f8 <_svfiprintf_r+0x5c>
 80067f4:	2a25      	cmp	r2, #37	; 0x25
 80067f6:	d1f9      	bne.n	80067ec <_svfiprintf_r+0x50>
 80067f8:	ebba 0b04 	subs.w	fp, sl, r4
 80067fc:	d00b      	beq.n	8006816 <_svfiprintf_r+0x7a>
 80067fe:	465b      	mov	r3, fp
 8006800:	4622      	mov	r2, r4
 8006802:	4629      	mov	r1, r5
 8006804:	4638      	mov	r0, r7
 8006806:	f7ff ff6d 	bl	80066e4 <__ssputs_r>
 800680a:	3001      	adds	r0, #1
 800680c:	f000 80aa 	beq.w	8006964 <_svfiprintf_r+0x1c8>
 8006810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006812:	445a      	add	r2, fp
 8006814:	9209      	str	r2, [sp, #36]	; 0x24
 8006816:	f89a 3000 	ldrb.w	r3, [sl]
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 80a2 	beq.w	8006964 <_svfiprintf_r+0x1c8>
 8006820:	2300      	movs	r3, #0
 8006822:	f04f 32ff 	mov.w	r2, #4294967295
 8006826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800682a:	f10a 0a01 	add.w	sl, sl, #1
 800682e:	9304      	str	r3, [sp, #16]
 8006830:	9307      	str	r3, [sp, #28]
 8006832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006836:	931a      	str	r3, [sp, #104]	; 0x68
 8006838:	4654      	mov	r4, sl
 800683a:	2205      	movs	r2, #5
 800683c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006840:	4851      	ldr	r0, [pc, #324]	; (8006988 <_svfiprintf_r+0x1ec>)
 8006842:	f7f9 fcd5 	bl	80001f0 <memchr>
 8006846:	9a04      	ldr	r2, [sp, #16]
 8006848:	b9d8      	cbnz	r0, 8006882 <_svfiprintf_r+0xe6>
 800684a:	06d0      	lsls	r0, r2, #27
 800684c:	bf44      	itt	mi
 800684e:	2320      	movmi	r3, #32
 8006850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006854:	0711      	lsls	r1, r2, #28
 8006856:	bf44      	itt	mi
 8006858:	232b      	movmi	r3, #43	; 0x2b
 800685a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800685e:	f89a 3000 	ldrb.w	r3, [sl]
 8006862:	2b2a      	cmp	r3, #42	; 0x2a
 8006864:	d015      	beq.n	8006892 <_svfiprintf_r+0xf6>
 8006866:	9a07      	ldr	r2, [sp, #28]
 8006868:	4654      	mov	r4, sl
 800686a:	2000      	movs	r0, #0
 800686c:	f04f 0c0a 	mov.w	ip, #10
 8006870:	4621      	mov	r1, r4
 8006872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006876:	3b30      	subs	r3, #48	; 0x30
 8006878:	2b09      	cmp	r3, #9
 800687a:	d94e      	bls.n	800691a <_svfiprintf_r+0x17e>
 800687c:	b1b0      	cbz	r0, 80068ac <_svfiprintf_r+0x110>
 800687e:	9207      	str	r2, [sp, #28]
 8006880:	e014      	b.n	80068ac <_svfiprintf_r+0x110>
 8006882:	eba0 0308 	sub.w	r3, r0, r8
 8006886:	fa09 f303 	lsl.w	r3, r9, r3
 800688a:	4313      	orrs	r3, r2
 800688c:	9304      	str	r3, [sp, #16]
 800688e:	46a2      	mov	sl, r4
 8006890:	e7d2      	b.n	8006838 <_svfiprintf_r+0x9c>
 8006892:	9b03      	ldr	r3, [sp, #12]
 8006894:	1d19      	adds	r1, r3, #4
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	9103      	str	r1, [sp, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	bfbb      	ittet	lt
 800689e:	425b      	neglt	r3, r3
 80068a0:	f042 0202 	orrlt.w	r2, r2, #2
 80068a4:	9307      	strge	r3, [sp, #28]
 80068a6:	9307      	strlt	r3, [sp, #28]
 80068a8:	bfb8      	it	lt
 80068aa:	9204      	strlt	r2, [sp, #16]
 80068ac:	7823      	ldrb	r3, [r4, #0]
 80068ae:	2b2e      	cmp	r3, #46	; 0x2e
 80068b0:	d10c      	bne.n	80068cc <_svfiprintf_r+0x130>
 80068b2:	7863      	ldrb	r3, [r4, #1]
 80068b4:	2b2a      	cmp	r3, #42	; 0x2a
 80068b6:	d135      	bne.n	8006924 <_svfiprintf_r+0x188>
 80068b8:	9b03      	ldr	r3, [sp, #12]
 80068ba:	1d1a      	adds	r2, r3, #4
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	9203      	str	r2, [sp, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	bfb8      	it	lt
 80068c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80068c8:	3402      	adds	r4, #2
 80068ca:	9305      	str	r3, [sp, #20]
 80068cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006998 <_svfiprintf_r+0x1fc>
 80068d0:	7821      	ldrb	r1, [r4, #0]
 80068d2:	2203      	movs	r2, #3
 80068d4:	4650      	mov	r0, sl
 80068d6:	f7f9 fc8b 	bl	80001f0 <memchr>
 80068da:	b140      	cbz	r0, 80068ee <_svfiprintf_r+0x152>
 80068dc:	2340      	movs	r3, #64	; 0x40
 80068de:	eba0 000a 	sub.w	r0, r0, sl
 80068e2:	fa03 f000 	lsl.w	r0, r3, r0
 80068e6:	9b04      	ldr	r3, [sp, #16]
 80068e8:	4303      	orrs	r3, r0
 80068ea:	3401      	adds	r4, #1
 80068ec:	9304      	str	r3, [sp, #16]
 80068ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f2:	4826      	ldr	r0, [pc, #152]	; (800698c <_svfiprintf_r+0x1f0>)
 80068f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068f8:	2206      	movs	r2, #6
 80068fa:	f7f9 fc79 	bl	80001f0 <memchr>
 80068fe:	2800      	cmp	r0, #0
 8006900:	d038      	beq.n	8006974 <_svfiprintf_r+0x1d8>
 8006902:	4b23      	ldr	r3, [pc, #140]	; (8006990 <_svfiprintf_r+0x1f4>)
 8006904:	bb1b      	cbnz	r3, 800694e <_svfiprintf_r+0x1b2>
 8006906:	9b03      	ldr	r3, [sp, #12]
 8006908:	3307      	adds	r3, #7
 800690a:	f023 0307 	bic.w	r3, r3, #7
 800690e:	3308      	adds	r3, #8
 8006910:	9303      	str	r3, [sp, #12]
 8006912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006914:	4433      	add	r3, r6
 8006916:	9309      	str	r3, [sp, #36]	; 0x24
 8006918:	e767      	b.n	80067ea <_svfiprintf_r+0x4e>
 800691a:	fb0c 3202 	mla	r2, ip, r2, r3
 800691e:	460c      	mov	r4, r1
 8006920:	2001      	movs	r0, #1
 8006922:	e7a5      	b.n	8006870 <_svfiprintf_r+0xd4>
 8006924:	2300      	movs	r3, #0
 8006926:	3401      	adds	r4, #1
 8006928:	9305      	str	r3, [sp, #20]
 800692a:	4619      	mov	r1, r3
 800692c:	f04f 0c0a 	mov.w	ip, #10
 8006930:	4620      	mov	r0, r4
 8006932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006936:	3a30      	subs	r2, #48	; 0x30
 8006938:	2a09      	cmp	r2, #9
 800693a:	d903      	bls.n	8006944 <_svfiprintf_r+0x1a8>
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0c5      	beq.n	80068cc <_svfiprintf_r+0x130>
 8006940:	9105      	str	r1, [sp, #20]
 8006942:	e7c3      	b.n	80068cc <_svfiprintf_r+0x130>
 8006944:	fb0c 2101 	mla	r1, ip, r1, r2
 8006948:	4604      	mov	r4, r0
 800694a:	2301      	movs	r3, #1
 800694c:	e7f0      	b.n	8006930 <_svfiprintf_r+0x194>
 800694e:	ab03      	add	r3, sp, #12
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	462a      	mov	r2, r5
 8006954:	4b0f      	ldr	r3, [pc, #60]	; (8006994 <_svfiprintf_r+0x1f8>)
 8006956:	a904      	add	r1, sp, #16
 8006958:	4638      	mov	r0, r7
 800695a:	f7fe f897 	bl	8004a8c <_printf_float>
 800695e:	1c42      	adds	r2, r0, #1
 8006960:	4606      	mov	r6, r0
 8006962:	d1d6      	bne.n	8006912 <_svfiprintf_r+0x176>
 8006964:	89ab      	ldrh	r3, [r5, #12]
 8006966:	065b      	lsls	r3, r3, #25
 8006968:	f53f af2c 	bmi.w	80067c4 <_svfiprintf_r+0x28>
 800696c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800696e:	b01d      	add	sp, #116	; 0x74
 8006970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006974:	ab03      	add	r3, sp, #12
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	462a      	mov	r2, r5
 800697a:	4b06      	ldr	r3, [pc, #24]	; (8006994 <_svfiprintf_r+0x1f8>)
 800697c:	a904      	add	r1, sp, #16
 800697e:	4638      	mov	r0, r7
 8006980:	f7fe fb28 	bl	8004fd4 <_printf_i>
 8006984:	e7eb      	b.n	800695e <_svfiprintf_r+0x1c2>
 8006986:	bf00      	nop
 8006988:	080092cc 	.word	0x080092cc
 800698c:	080092d6 	.word	0x080092d6
 8006990:	08004a8d 	.word	0x08004a8d
 8006994:	080066e5 	.word	0x080066e5
 8006998:	080092d2 	.word	0x080092d2

0800699c <__assert_func>:
 800699c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800699e:	4614      	mov	r4, r2
 80069a0:	461a      	mov	r2, r3
 80069a2:	4b09      	ldr	r3, [pc, #36]	; (80069c8 <__assert_func+0x2c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4605      	mov	r5, r0
 80069a8:	68d8      	ldr	r0, [r3, #12]
 80069aa:	b14c      	cbz	r4, 80069c0 <__assert_func+0x24>
 80069ac:	4b07      	ldr	r3, [pc, #28]	; (80069cc <__assert_func+0x30>)
 80069ae:	9100      	str	r1, [sp, #0]
 80069b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80069b4:	4906      	ldr	r1, [pc, #24]	; (80069d0 <__assert_func+0x34>)
 80069b6:	462b      	mov	r3, r5
 80069b8:	f000 f80e 	bl	80069d8 <fiprintf>
 80069bc:	f000 faa4 	bl	8006f08 <abort>
 80069c0:	4b04      	ldr	r3, [pc, #16]	; (80069d4 <__assert_func+0x38>)
 80069c2:	461c      	mov	r4, r3
 80069c4:	e7f3      	b.n	80069ae <__assert_func+0x12>
 80069c6:	bf00      	nop
 80069c8:	20000024 	.word	0x20000024
 80069cc:	080092dd 	.word	0x080092dd
 80069d0:	080092ea 	.word	0x080092ea
 80069d4:	08009318 	.word	0x08009318

080069d8 <fiprintf>:
 80069d8:	b40e      	push	{r1, r2, r3}
 80069da:	b503      	push	{r0, r1, lr}
 80069dc:	4601      	mov	r1, r0
 80069de:	ab03      	add	r3, sp, #12
 80069e0:	4805      	ldr	r0, [pc, #20]	; (80069f8 <fiprintf+0x20>)
 80069e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069e6:	6800      	ldr	r0, [r0, #0]
 80069e8:	9301      	str	r3, [sp, #4]
 80069ea:	f000 f88f 	bl	8006b0c <_vfiprintf_r>
 80069ee:	b002      	add	sp, #8
 80069f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069f4:	b003      	add	sp, #12
 80069f6:	4770      	bx	lr
 80069f8:	20000024 	.word	0x20000024

080069fc <__retarget_lock_init_recursive>:
 80069fc:	4770      	bx	lr

080069fe <__retarget_lock_acquire_recursive>:
 80069fe:	4770      	bx	lr

08006a00 <__retarget_lock_release_recursive>:
 8006a00:	4770      	bx	lr

08006a02 <__ascii_mbtowc>:
 8006a02:	b082      	sub	sp, #8
 8006a04:	b901      	cbnz	r1, 8006a08 <__ascii_mbtowc+0x6>
 8006a06:	a901      	add	r1, sp, #4
 8006a08:	b142      	cbz	r2, 8006a1c <__ascii_mbtowc+0x1a>
 8006a0a:	b14b      	cbz	r3, 8006a20 <__ascii_mbtowc+0x1e>
 8006a0c:	7813      	ldrb	r3, [r2, #0]
 8006a0e:	600b      	str	r3, [r1, #0]
 8006a10:	7812      	ldrb	r2, [r2, #0]
 8006a12:	1e10      	subs	r0, r2, #0
 8006a14:	bf18      	it	ne
 8006a16:	2001      	movne	r0, #1
 8006a18:	b002      	add	sp, #8
 8006a1a:	4770      	bx	lr
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	e7fb      	b.n	8006a18 <__ascii_mbtowc+0x16>
 8006a20:	f06f 0001 	mvn.w	r0, #1
 8006a24:	e7f8      	b.n	8006a18 <__ascii_mbtowc+0x16>

08006a26 <memmove>:
 8006a26:	4288      	cmp	r0, r1
 8006a28:	b510      	push	{r4, lr}
 8006a2a:	eb01 0402 	add.w	r4, r1, r2
 8006a2e:	d902      	bls.n	8006a36 <memmove+0x10>
 8006a30:	4284      	cmp	r4, r0
 8006a32:	4623      	mov	r3, r4
 8006a34:	d807      	bhi.n	8006a46 <memmove+0x20>
 8006a36:	1e43      	subs	r3, r0, #1
 8006a38:	42a1      	cmp	r1, r4
 8006a3a:	d008      	beq.n	8006a4e <memmove+0x28>
 8006a3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a40:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a44:	e7f8      	b.n	8006a38 <memmove+0x12>
 8006a46:	4402      	add	r2, r0
 8006a48:	4601      	mov	r1, r0
 8006a4a:	428a      	cmp	r2, r1
 8006a4c:	d100      	bne.n	8006a50 <memmove+0x2a>
 8006a4e:	bd10      	pop	{r4, pc}
 8006a50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a54:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a58:	e7f7      	b.n	8006a4a <memmove+0x24>

08006a5a <_realloc_r>:
 8006a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a5e:	4680      	mov	r8, r0
 8006a60:	4614      	mov	r4, r2
 8006a62:	460e      	mov	r6, r1
 8006a64:	b921      	cbnz	r1, 8006a70 <_realloc_r+0x16>
 8006a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	f7fd befa 	b.w	8004864 <_malloc_r>
 8006a70:	b92a      	cbnz	r2, 8006a7e <_realloc_r+0x24>
 8006a72:	f7fd fe8b 	bl	800478c <_free_r>
 8006a76:	4625      	mov	r5, r4
 8006a78:	4628      	mov	r0, r5
 8006a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a7e:	f000 fc67 	bl	8007350 <_malloc_usable_size_r>
 8006a82:	4284      	cmp	r4, r0
 8006a84:	4607      	mov	r7, r0
 8006a86:	d802      	bhi.n	8006a8e <_realloc_r+0x34>
 8006a88:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a8c:	d812      	bhi.n	8006ab4 <_realloc_r+0x5a>
 8006a8e:	4621      	mov	r1, r4
 8006a90:	4640      	mov	r0, r8
 8006a92:	f7fd fee7 	bl	8004864 <_malloc_r>
 8006a96:	4605      	mov	r5, r0
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d0ed      	beq.n	8006a78 <_realloc_r+0x1e>
 8006a9c:	42bc      	cmp	r4, r7
 8006a9e:	4622      	mov	r2, r4
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	bf28      	it	cs
 8006aa4:	463a      	movcs	r2, r7
 8006aa6:	f7ff fa69 	bl	8005f7c <memcpy>
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4640      	mov	r0, r8
 8006aae:	f7fd fe6d 	bl	800478c <_free_r>
 8006ab2:	e7e1      	b.n	8006a78 <_realloc_r+0x1e>
 8006ab4:	4635      	mov	r5, r6
 8006ab6:	e7df      	b.n	8006a78 <_realloc_r+0x1e>

08006ab8 <__sfputc_r>:
 8006ab8:	6893      	ldr	r3, [r2, #8]
 8006aba:	3b01      	subs	r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	b410      	push	{r4}
 8006ac0:	6093      	str	r3, [r2, #8]
 8006ac2:	da08      	bge.n	8006ad6 <__sfputc_r+0x1e>
 8006ac4:	6994      	ldr	r4, [r2, #24]
 8006ac6:	42a3      	cmp	r3, r4
 8006ac8:	db01      	blt.n	8006ace <__sfputc_r+0x16>
 8006aca:	290a      	cmp	r1, #10
 8006acc:	d103      	bne.n	8006ad6 <__sfputc_r+0x1e>
 8006ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ad2:	f000 b94b 	b.w	8006d6c <__swbuf_r>
 8006ad6:	6813      	ldr	r3, [r2, #0]
 8006ad8:	1c58      	adds	r0, r3, #1
 8006ada:	6010      	str	r0, [r2, #0]
 8006adc:	7019      	strb	r1, [r3, #0]
 8006ade:	4608      	mov	r0, r1
 8006ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <__sfputs_r>:
 8006ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae8:	4606      	mov	r6, r0
 8006aea:	460f      	mov	r7, r1
 8006aec:	4614      	mov	r4, r2
 8006aee:	18d5      	adds	r5, r2, r3
 8006af0:	42ac      	cmp	r4, r5
 8006af2:	d101      	bne.n	8006af8 <__sfputs_r+0x12>
 8006af4:	2000      	movs	r0, #0
 8006af6:	e007      	b.n	8006b08 <__sfputs_r+0x22>
 8006af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006afc:	463a      	mov	r2, r7
 8006afe:	4630      	mov	r0, r6
 8006b00:	f7ff ffda 	bl	8006ab8 <__sfputc_r>
 8006b04:	1c43      	adds	r3, r0, #1
 8006b06:	d1f3      	bne.n	8006af0 <__sfputs_r+0xa>
 8006b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b0c <_vfiprintf_r>:
 8006b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b10:	460d      	mov	r5, r1
 8006b12:	b09d      	sub	sp, #116	; 0x74
 8006b14:	4614      	mov	r4, r2
 8006b16:	4698      	mov	r8, r3
 8006b18:	4606      	mov	r6, r0
 8006b1a:	b118      	cbz	r0, 8006b24 <_vfiprintf_r+0x18>
 8006b1c:	6983      	ldr	r3, [r0, #24]
 8006b1e:	b90b      	cbnz	r3, 8006b24 <_vfiprintf_r+0x18>
 8006b20:	f000 fb14 	bl	800714c <__sinit>
 8006b24:	4b89      	ldr	r3, [pc, #548]	; (8006d4c <_vfiprintf_r+0x240>)
 8006b26:	429d      	cmp	r5, r3
 8006b28:	d11b      	bne.n	8006b62 <_vfiprintf_r+0x56>
 8006b2a:	6875      	ldr	r5, [r6, #4]
 8006b2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b2e:	07d9      	lsls	r1, r3, #31
 8006b30:	d405      	bmi.n	8006b3e <_vfiprintf_r+0x32>
 8006b32:	89ab      	ldrh	r3, [r5, #12]
 8006b34:	059a      	lsls	r2, r3, #22
 8006b36:	d402      	bmi.n	8006b3e <_vfiprintf_r+0x32>
 8006b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b3a:	f7ff ff60 	bl	80069fe <__retarget_lock_acquire_recursive>
 8006b3e:	89ab      	ldrh	r3, [r5, #12]
 8006b40:	071b      	lsls	r3, r3, #28
 8006b42:	d501      	bpl.n	8006b48 <_vfiprintf_r+0x3c>
 8006b44:	692b      	ldr	r3, [r5, #16]
 8006b46:	b9eb      	cbnz	r3, 8006b84 <_vfiprintf_r+0x78>
 8006b48:	4629      	mov	r1, r5
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f000 f96e 	bl	8006e2c <__swsetup_r>
 8006b50:	b1c0      	cbz	r0, 8006b84 <_vfiprintf_r+0x78>
 8006b52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b54:	07dc      	lsls	r4, r3, #31
 8006b56:	d50e      	bpl.n	8006b76 <_vfiprintf_r+0x6a>
 8006b58:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5c:	b01d      	add	sp, #116	; 0x74
 8006b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b62:	4b7b      	ldr	r3, [pc, #492]	; (8006d50 <_vfiprintf_r+0x244>)
 8006b64:	429d      	cmp	r5, r3
 8006b66:	d101      	bne.n	8006b6c <_vfiprintf_r+0x60>
 8006b68:	68b5      	ldr	r5, [r6, #8]
 8006b6a:	e7df      	b.n	8006b2c <_vfiprintf_r+0x20>
 8006b6c:	4b79      	ldr	r3, [pc, #484]	; (8006d54 <_vfiprintf_r+0x248>)
 8006b6e:	429d      	cmp	r5, r3
 8006b70:	bf08      	it	eq
 8006b72:	68f5      	ldreq	r5, [r6, #12]
 8006b74:	e7da      	b.n	8006b2c <_vfiprintf_r+0x20>
 8006b76:	89ab      	ldrh	r3, [r5, #12]
 8006b78:	0598      	lsls	r0, r3, #22
 8006b7a:	d4ed      	bmi.n	8006b58 <_vfiprintf_r+0x4c>
 8006b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b7e:	f7ff ff3f 	bl	8006a00 <__retarget_lock_release_recursive>
 8006b82:	e7e9      	b.n	8006b58 <_vfiprintf_r+0x4c>
 8006b84:	2300      	movs	r3, #0
 8006b86:	9309      	str	r3, [sp, #36]	; 0x24
 8006b88:	2320      	movs	r3, #32
 8006b8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b92:	2330      	movs	r3, #48	; 0x30
 8006b94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006d58 <_vfiprintf_r+0x24c>
 8006b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b9c:	f04f 0901 	mov.w	r9, #1
 8006ba0:	4623      	mov	r3, r4
 8006ba2:	469a      	mov	sl, r3
 8006ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ba8:	b10a      	cbz	r2, 8006bae <_vfiprintf_r+0xa2>
 8006baa:	2a25      	cmp	r2, #37	; 0x25
 8006bac:	d1f9      	bne.n	8006ba2 <_vfiprintf_r+0x96>
 8006bae:	ebba 0b04 	subs.w	fp, sl, r4
 8006bb2:	d00b      	beq.n	8006bcc <_vfiprintf_r+0xc0>
 8006bb4:	465b      	mov	r3, fp
 8006bb6:	4622      	mov	r2, r4
 8006bb8:	4629      	mov	r1, r5
 8006bba:	4630      	mov	r0, r6
 8006bbc:	f7ff ff93 	bl	8006ae6 <__sfputs_r>
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	f000 80aa 	beq.w	8006d1a <_vfiprintf_r+0x20e>
 8006bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bc8:	445a      	add	r2, fp
 8006bca:	9209      	str	r2, [sp, #36]	; 0x24
 8006bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 80a2 	beq.w	8006d1a <_vfiprintf_r+0x20e>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006be0:	f10a 0a01 	add.w	sl, sl, #1
 8006be4:	9304      	str	r3, [sp, #16]
 8006be6:	9307      	str	r3, [sp, #28]
 8006be8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bec:	931a      	str	r3, [sp, #104]	; 0x68
 8006bee:	4654      	mov	r4, sl
 8006bf0:	2205      	movs	r2, #5
 8006bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf6:	4858      	ldr	r0, [pc, #352]	; (8006d58 <_vfiprintf_r+0x24c>)
 8006bf8:	f7f9 fafa 	bl	80001f0 <memchr>
 8006bfc:	9a04      	ldr	r2, [sp, #16]
 8006bfe:	b9d8      	cbnz	r0, 8006c38 <_vfiprintf_r+0x12c>
 8006c00:	06d1      	lsls	r1, r2, #27
 8006c02:	bf44      	itt	mi
 8006c04:	2320      	movmi	r3, #32
 8006c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c0a:	0713      	lsls	r3, r2, #28
 8006c0c:	bf44      	itt	mi
 8006c0e:	232b      	movmi	r3, #43	; 0x2b
 8006c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c14:	f89a 3000 	ldrb.w	r3, [sl]
 8006c18:	2b2a      	cmp	r3, #42	; 0x2a
 8006c1a:	d015      	beq.n	8006c48 <_vfiprintf_r+0x13c>
 8006c1c:	9a07      	ldr	r2, [sp, #28]
 8006c1e:	4654      	mov	r4, sl
 8006c20:	2000      	movs	r0, #0
 8006c22:	f04f 0c0a 	mov.w	ip, #10
 8006c26:	4621      	mov	r1, r4
 8006c28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c2c:	3b30      	subs	r3, #48	; 0x30
 8006c2e:	2b09      	cmp	r3, #9
 8006c30:	d94e      	bls.n	8006cd0 <_vfiprintf_r+0x1c4>
 8006c32:	b1b0      	cbz	r0, 8006c62 <_vfiprintf_r+0x156>
 8006c34:	9207      	str	r2, [sp, #28]
 8006c36:	e014      	b.n	8006c62 <_vfiprintf_r+0x156>
 8006c38:	eba0 0308 	sub.w	r3, r0, r8
 8006c3c:	fa09 f303 	lsl.w	r3, r9, r3
 8006c40:	4313      	orrs	r3, r2
 8006c42:	9304      	str	r3, [sp, #16]
 8006c44:	46a2      	mov	sl, r4
 8006c46:	e7d2      	b.n	8006bee <_vfiprintf_r+0xe2>
 8006c48:	9b03      	ldr	r3, [sp, #12]
 8006c4a:	1d19      	adds	r1, r3, #4
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	9103      	str	r1, [sp, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	bfbb      	ittet	lt
 8006c54:	425b      	neglt	r3, r3
 8006c56:	f042 0202 	orrlt.w	r2, r2, #2
 8006c5a:	9307      	strge	r3, [sp, #28]
 8006c5c:	9307      	strlt	r3, [sp, #28]
 8006c5e:	bfb8      	it	lt
 8006c60:	9204      	strlt	r2, [sp, #16]
 8006c62:	7823      	ldrb	r3, [r4, #0]
 8006c64:	2b2e      	cmp	r3, #46	; 0x2e
 8006c66:	d10c      	bne.n	8006c82 <_vfiprintf_r+0x176>
 8006c68:	7863      	ldrb	r3, [r4, #1]
 8006c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c6c:	d135      	bne.n	8006cda <_vfiprintf_r+0x1ce>
 8006c6e:	9b03      	ldr	r3, [sp, #12]
 8006c70:	1d1a      	adds	r2, r3, #4
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	9203      	str	r2, [sp, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	bfb8      	it	lt
 8006c7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c7e:	3402      	adds	r4, #2
 8006c80:	9305      	str	r3, [sp, #20]
 8006c82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006d68 <_vfiprintf_r+0x25c>
 8006c86:	7821      	ldrb	r1, [r4, #0]
 8006c88:	2203      	movs	r2, #3
 8006c8a:	4650      	mov	r0, sl
 8006c8c:	f7f9 fab0 	bl	80001f0 <memchr>
 8006c90:	b140      	cbz	r0, 8006ca4 <_vfiprintf_r+0x198>
 8006c92:	2340      	movs	r3, #64	; 0x40
 8006c94:	eba0 000a 	sub.w	r0, r0, sl
 8006c98:	fa03 f000 	lsl.w	r0, r3, r0
 8006c9c:	9b04      	ldr	r3, [sp, #16]
 8006c9e:	4303      	orrs	r3, r0
 8006ca0:	3401      	adds	r4, #1
 8006ca2:	9304      	str	r3, [sp, #16]
 8006ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ca8:	482c      	ldr	r0, [pc, #176]	; (8006d5c <_vfiprintf_r+0x250>)
 8006caa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cae:	2206      	movs	r2, #6
 8006cb0:	f7f9 fa9e 	bl	80001f0 <memchr>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	d03f      	beq.n	8006d38 <_vfiprintf_r+0x22c>
 8006cb8:	4b29      	ldr	r3, [pc, #164]	; (8006d60 <_vfiprintf_r+0x254>)
 8006cba:	bb1b      	cbnz	r3, 8006d04 <_vfiprintf_r+0x1f8>
 8006cbc:	9b03      	ldr	r3, [sp, #12]
 8006cbe:	3307      	adds	r3, #7
 8006cc0:	f023 0307 	bic.w	r3, r3, #7
 8006cc4:	3308      	adds	r3, #8
 8006cc6:	9303      	str	r3, [sp, #12]
 8006cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cca:	443b      	add	r3, r7
 8006ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8006cce:	e767      	b.n	8006ba0 <_vfiprintf_r+0x94>
 8006cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cd4:	460c      	mov	r4, r1
 8006cd6:	2001      	movs	r0, #1
 8006cd8:	e7a5      	b.n	8006c26 <_vfiprintf_r+0x11a>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	3401      	adds	r4, #1
 8006cde:	9305      	str	r3, [sp, #20]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	f04f 0c0a 	mov.w	ip, #10
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cec:	3a30      	subs	r2, #48	; 0x30
 8006cee:	2a09      	cmp	r2, #9
 8006cf0:	d903      	bls.n	8006cfa <_vfiprintf_r+0x1ee>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d0c5      	beq.n	8006c82 <_vfiprintf_r+0x176>
 8006cf6:	9105      	str	r1, [sp, #20]
 8006cf8:	e7c3      	b.n	8006c82 <_vfiprintf_r+0x176>
 8006cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cfe:	4604      	mov	r4, r0
 8006d00:	2301      	movs	r3, #1
 8006d02:	e7f0      	b.n	8006ce6 <_vfiprintf_r+0x1da>
 8006d04:	ab03      	add	r3, sp, #12
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	462a      	mov	r2, r5
 8006d0a:	4b16      	ldr	r3, [pc, #88]	; (8006d64 <_vfiprintf_r+0x258>)
 8006d0c:	a904      	add	r1, sp, #16
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f7fd febc 	bl	8004a8c <_printf_float>
 8006d14:	4607      	mov	r7, r0
 8006d16:	1c78      	adds	r0, r7, #1
 8006d18:	d1d6      	bne.n	8006cc8 <_vfiprintf_r+0x1bc>
 8006d1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d1c:	07d9      	lsls	r1, r3, #31
 8006d1e:	d405      	bmi.n	8006d2c <_vfiprintf_r+0x220>
 8006d20:	89ab      	ldrh	r3, [r5, #12]
 8006d22:	059a      	lsls	r2, r3, #22
 8006d24:	d402      	bmi.n	8006d2c <_vfiprintf_r+0x220>
 8006d26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d28:	f7ff fe6a 	bl	8006a00 <__retarget_lock_release_recursive>
 8006d2c:	89ab      	ldrh	r3, [r5, #12]
 8006d2e:	065b      	lsls	r3, r3, #25
 8006d30:	f53f af12 	bmi.w	8006b58 <_vfiprintf_r+0x4c>
 8006d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d36:	e711      	b.n	8006b5c <_vfiprintf_r+0x50>
 8006d38:	ab03      	add	r3, sp, #12
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	462a      	mov	r2, r5
 8006d3e:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <_vfiprintf_r+0x258>)
 8006d40:	a904      	add	r1, sp, #16
 8006d42:	4630      	mov	r0, r6
 8006d44:	f7fe f946 	bl	8004fd4 <_printf_i>
 8006d48:	e7e4      	b.n	8006d14 <_vfiprintf_r+0x208>
 8006d4a:	bf00      	nop
 8006d4c:	08009444 	.word	0x08009444
 8006d50:	08009464 	.word	0x08009464
 8006d54:	08009424 	.word	0x08009424
 8006d58:	080092cc 	.word	0x080092cc
 8006d5c:	080092d6 	.word	0x080092d6
 8006d60:	08004a8d 	.word	0x08004a8d
 8006d64:	08006ae7 	.word	0x08006ae7
 8006d68:	080092d2 	.word	0x080092d2

08006d6c <__swbuf_r>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	460e      	mov	r6, r1
 8006d70:	4614      	mov	r4, r2
 8006d72:	4605      	mov	r5, r0
 8006d74:	b118      	cbz	r0, 8006d7e <__swbuf_r+0x12>
 8006d76:	6983      	ldr	r3, [r0, #24]
 8006d78:	b90b      	cbnz	r3, 8006d7e <__swbuf_r+0x12>
 8006d7a:	f000 f9e7 	bl	800714c <__sinit>
 8006d7e:	4b21      	ldr	r3, [pc, #132]	; (8006e04 <__swbuf_r+0x98>)
 8006d80:	429c      	cmp	r4, r3
 8006d82:	d12b      	bne.n	8006ddc <__swbuf_r+0x70>
 8006d84:	686c      	ldr	r4, [r5, #4]
 8006d86:	69a3      	ldr	r3, [r4, #24]
 8006d88:	60a3      	str	r3, [r4, #8]
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	071a      	lsls	r2, r3, #28
 8006d8e:	d52f      	bpl.n	8006df0 <__swbuf_r+0x84>
 8006d90:	6923      	ldr	r3, [r4, #16]
 8006d92:	b36b      	cbz	r3, 8006df0 <__swbuf_r+0x84>
 8006d94:	6923      	ldr	r3, [r4, #16]
 8006d96:	6820      	ldr	r0, [r4, #0]
 8006d98:	1ac0      	subs	r0, r0, r3
 8006d9a:	6963      	ldr	r3, [r4, #20]
 8006d9c:	b2f6      	uxtb	r6, r6
 8006d9e:	4283      	cmp	r3, r0
 8006da0:	4637      	mov	r7, r6
 8006da2:	dc04      	bgt.n	8006dae <__swbuf_r+0x42>
 8006da4:	4621      	mov	r1, r4
 8006da6:	4628      	mov	r0, r5
 8006da8:	f000 f93c 	bl	8007024 <_fflush_r>
 8006dac:	bb30      	cbnz	r0, 8006dfc <__swbuf_r+0x90>
 8006dae:	68a3      	ldr	r3, [r4, #8]
 8006db0:	3b01      	subs	r3, #1
 8006db2:	60a3      	str	r3, [r4, #8]
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	6022      	str	r2, [r4, #0]
 8006dba:	701e      	strb	r6, [r3, #0]
 8006dbc:	6963      	ldr	r3, [r4, #20]
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	4283      	cmp	r3, r0
 8006dc2:	d004      	beq.n	8006dce <__swbuf_r+0x62>
 8006dc4:	89a3      	ldrh	r3, [r4, #12]
 8006dc6:	07db      	lsls	r3, r3, #31
 8006dc8:	d506      	bpl.n	8006dd8 <__swbuf_r+0x6c>
 8006dca:	2e0a      	cmp	r6, #10
 8006dcc:	d104      	bne.n	8006dd8 <__swbuf_r+0x6c>
 8006dce:	4621      	mov	r1, r4
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	f000 f927 	bl	8007024 <_fflush_r>
 8006dd6:	b988      	cbnz	r0, 8006dfc <__swbuf_r+0x90>
 8006dd8:	4638      	mov	r0, r7
 8006dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ddc:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <__swbuf_r+0x9c>)
 8006dde:	429c      	cmp	r4, r3
 8006de0:	d101      	bne.n	8006de6 <__swbuf_r+0x7a>
 8006de2:	68ac      	ldr	r4, [r5, #8]
 8006de4:	e7cf      	b.n	8006d86 <__swbuf_r+0x1a>
 8006de6:	4b09      	ldr	r3, [pc, #36]	; (8006e0c <__swbuf_r+0xa0>)
 8006de8:	429c      	cmp	r4, r3
 8006dea:	bf08      	it	eq
 8006dec:	68ec      	ldreq	r4, [r5, #12]
 8006dee:	e7ca      	b.n	8006d86 <__swbuf_r+0x1a>
 8006df0:	4621      	mov	r1, r4
 8006df2:	4628      	mov	r0, r5
 8006df4:	f000 f81a 	bl	8006e2c <__swsetup_r>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d0cb      	beq.n	8006d94 <__swbuf_r+0x28>
 8006dfc:	f04f 37ff 	mov.w	r7, #4294967295
 8006e00:	e7ea      	b.n	8006dd8 <__swbuf_r+0x6c>
 8006e02:	bf00      	nop
 8006e04:	08009444 	.word	0x08009444
 8006e08:	08009464 	.word	0x08009464
 8006e0c:	08009424 	.word	0x08009424

08006e10 <__ascii_wctomb>:
 8006e10:	b149      	cbz	r1, 8006e26 <__ascii_wctomb+0x16>
 8006e12:	2aff      	cmp	r2, #255	; 0xff
 8006e14:	bf85      	ittet	hi
 8006e16:	238a      	movhi	r3, #138	; 0x8a
 8006e18:	6003      	strhi	r3, [r0, #0]
 8006e1a:	700a      	strbls	r2, [r1, #0]
 8006e1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006e20:	bf98      	it	ls
 8006e22:	2001      	movls	r0, #1
 8006e24:	4770      	bx	lr
 8006e26:	4608      	mov	r0, r1
 8006e28:	4770      	bx	lr
	...

08006e2c <__swsetup_r>:
 8006e2c:	4b32      	ldr	r3, [pc, #200]	; (8006ef8 <__swsetup_r+0xcc>)
 8006e2e:	b570      	push	{r4, r5, r6, lr}
 8006e30:	681d      	ldr	r5, [r3, #0]
 8006e32:	4606      	mov	r6, r0
 8006e34:	460c      	mov	r4, r1
 8006e36:	b125      	cbz	r5, 8006e42 <__swsetup_r+0x16>
 8006e38:	69ab      	ldr	r3, [r5, #24]
 8006e3a:	b913      	cbnz	r3, 8006e42 <__swsetup_r+0x16>
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	f000 f985 	bl	800714c <__sinit>
 8006e42:	4b2e      	ldr	r3, [pc, #184]	; (8006efc <__swsetup_r+0xd0>)
 8006e44:	429c      	cmp	r4, r3
 8006e46:	d10f      	bne.n	8006e68 <__swsetup_r+0x3c>
 8006e48:	686c      	ldr	r4, [r5, #4]
 8006e4a:	89a3      	ldrh	r3, [r4, #12]
 8006e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e50:	0719      	lsls	r1, r3, #28
 8006e52:	d42c      	bmi.n	8006eae <__swsetup_r+0x82>
 8006e54:	06dd      	lsls	r5, r3, #27
 8006e56:	d411      	bmi.n	8006e7c <__swsetup_r+0x50>
 8006e58:	2309      	movs	r3, #9
 8006e5a:	6033      	str	r3, [r6, #0]
 8006e5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e60:	81a3      	strh	r3, [r4, #12]
 8006e62:	f04f 30ff 	mov.w	r0, #4294967295
 8006e66:	e03e      	b.n	8006ee6 <__swsetup_r+0xba>
 8006e68:	4b25      	ldr	r3, [pc, #148]	; (8006f00 <__swsetup_r+0xd4>)
 8006e6a:	429c      	cmp	r4, r3
 8006e6c:	d101      	bne.n	8006e72 <__swsetup_r+0x46>
 8006e6e:	68ac      	ldr	r4, [r5, #8]
 8006e70:	e7eb      	b.n	8006e4a <__swsetup_r+0x1e>
 8006e72:	4b24      	ldr	r3, [pc, #144]	; (8006f04 <__swsetup_r+0xd8>)
 8006e74:	429c      	cmp	r4, r3
 8006e76:	bf08      	it	eq
 8006e78:	68ec      	ldreq	r4, [r5, #12]
 8006e7a:	e7e6      	b.n	8006e4a <__swsetup_r+0x1e>
 8006e7c:	0758      	lsls	r0, r3, #29
 8006e7e:	d512      	bpl.n	8006ea6 <__swsetup_r+0x7a>
 8006e80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e82:	b141      	cbz	r1, 8006e96 <__swsetup_r+0x6a>
 8006e84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e88:	4299      	cmp	r1, r3
 8006e8a:	d002      	beq.n	8006e92 <__swsetup_r+0x66>
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	f7fd fc7d 	bl	800478c <_free_r>
 8006e92:	2300      	movs	r3, #0
 8006e94:	6363      	str	r3, [r4, #52]	; 0x34
 8006e96:	89a3      	ldrh	r3, [r4, #12]
 8006e98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e9c:	81a3      	strh	r3, [r4, #12]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	6063      	str	r3, [r4, #4]
 8006ea2:	6923      	ldr	r3, [r4, #16]
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	f043 0308 	orr.w	r3, r3, #8
 8006eac:	81a3      	strh	r3, [r4, #12]
 8006eae:	6923      	ldr	r3, [r4, #16]
 8006eb0:	b94b      	cbnz	r3, 8006ec6 <__swsetup_r+0x9a>
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ebc:	d003      	beq.n	8006ec6 <__swsetup_r+0x9a>
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	f000 fa05 	bl	80072d0 <__smakebuf_r>
 8006ec6:	89a0      	ldrh	r0, [r4, #12]
 8006ec8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ecc:	f010 0301 	ands.w	r3, r0, #1
 8006ed0:	d00a      	beq.n	8006ee8 <__swsetup_r+0xbc>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60a3      	str	r3, [r4, #8]
 8006ed6:	6963      	ldr	r3, [r4, #20]
 8006ed8:	425b      	negs	r3, r3
 8006eda:	61a3      	str	r3, [r4, #24]
 8006edc:	6923      	ldr	r3, [r4, #16]
 8006ede:	b943      	cbnz	r3, 8006ef2 <__swsetup_r+0xc6>
 8006ee0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ee4:	d1ba      	bne.n	8006e5c <__swsetup_r+0x30>
 8006ee6:	bd70      	pop	{r4, r5, r6, pc}
 8006ee8:	0781      	lsls	r1, r0, #30
 8006eea:	bf58      	it	pl
 8006eec:	6963      	ldrpl	r3, [r4, #20]
 8006eee:	60a3      	str	r3, [r4, #8]
 8006ef0:	e7f4      	b.n	8006edc <__swsetup_r+0xb0>
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	e7f7      	b.n	8006ee6 <__swsetup_r+0xba>
 8006ef6:	bf00      	nop
 8006ef8:	20000024 	.word	0x20000024
 8006efc:	08009444 	.word	0x08009444
 8006f00:	08009464 	.word	0x08009464
 8006f04:	08009424 	.word	0x08009424

08006f08 <abort>:
 8006f08:	b508      	push	{r3, lr}
 8006f0a:	2006      	movs	r0, #6
 8006f0c:	f000 fa50 	bl	80073b0 <raise>
 8006f10:	2001      	movs	r0, #1
 8006f12:	f7fb fb7f 	bl	8002614 <_exit>
	...

08006f18 <__sflush_r>:
 8006f18:	898a      	ldrh	r2, [r1, #12]
 8006f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f1e:	4605      	mov	r5, r0
 8006f20:	0710      	lsls	r0, r2, #28
 8006f22:	460c      	mov	r4, r1
 8006f24:	d458      	bmi.n	8006fd8 <__sflush_r+0xc0>
 8006f26:	684b      	ldr	r3, [r1, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	dc05      	bgt.n	8006f38 <__sflush_r+0x20>
 8006f2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	dc02      	bgt.n	8006f38 <__sflush_r+0x20>
 8006f32:	2000      	movs	r0, #0
 8006f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f3a:	2e00      	cmp	r6, #0
 8006f3c:	d0f9      	beq.n	8006f32 <__sflush_r+0x1a>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f44:	682f      	ldr	r7, [r5, #0]
 8006f46:	602b      	str	r3, [r5, #0]
 8006f48:	d032      	beq.n	8006fb0 <__sflush_r+0x98>
 8006f4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f4c:	89a3      	ldrh	r3, [r4, #12]
 8006f4e:	075a      	lsls	r2, r3, #29
 8006f50:	d505      	bpl.n	8006f5e <__sflush_r+0x46>
 8006f52:	6863      	ldr	r3, [r4, #4]
 8006f54:	1ac0      	subs	r0, r0, r3
 8006f56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f58:	b10b      	cbz	r3, 8006f5e <__sflush_r+0x46>
 8006f5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f5c:	1ac0      	subs	r0, r0, r3
 8006f5e:	2300      	movs	r3, #0
 8006f60:	4602      	mov	r2, r0
 8006f62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f64:	6a21      	ldr	r1, [r4, #32]
 8006f66:	4628      	mov	r0, r5
 8006f68:	47b0      	blx	r6
 8006f6a:	1c43      	adds	r3, r0, #1
 8006f6c:	89a3      	ldrh	r3, [r4, #12]
 8006f6e:	d106      	bne.n	8006f7e <__sflush_r+0x66>
 8006f70:	6829      	ldr	r1, [r5, #0]
 8006f72:	291d      	cmp	r1, #29
 8006f74:	d82c      	bhi.n	8006fd0 <__sflush_r+0xb8>
 8006f76:	4a2a      	ldr	r2, [pc, #168]	; (8007020 <__sflush_r+0x108>)
 8006f78:	40ca      	lsrs	r2, r1
 8006f7a:	07d6      	lsls	r6, r2, #31
 8006f7c:	d528      	bpl.n	8006fd0 <__sflush_r+0xb8>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	6062      	str	r2, [r4, #4]
 8006f82:	04d9      	lsls	r1, r3, #19
 8006f84:	6922      	ldr	r2, [r4, #16]
 8006f86:	6022      	str	r2, [r4, #0]
 8006f88:	d504      	bpl.n	8006f94 <__sflush_r+0x7c>
 8006f8a:	1c42      	adds	r2, r0, #1
 8006f8c:	d101      	bne.n	8006f92 <__sflush_r+0x7a>
 8006f8e:	682b      	ldr	r3, [r5, #0]
 8006f90:	b903      	cbnz	r3, 8006f94 <__sflush_r+0x7c>
 8006f92:	6560      	str	r0, [r4, #84]	; 0x54
 8006f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f96:	602f      	str	r7, [r5, #0]
 8006f98:	2900      	cmp	r1, #0
 8006f9a:	d0ca      	beq.n	8006f32 <__sflush_r+0x1a>
 8006f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fa0:	4299      	cmp	r1, r3
 8006fa2:	d002      	beq.n	8006faa <__sflush_r+0x92>
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	f7fd fbf1 	bl	800478c <_free_r>
 8006faa:	2000      	movs	r0, #0
 8006fac:	6360      	str	r0, [r4, #52]	; 0x34
 8006fae:	e7c1      	b.n	8006f34 <__sflush_r+0x1c>
 8006fb0:	6a21      	ldr	r1, [r4, #32]
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	47b0      	blx	r6
 8006fb8:	1c41      	adds	r1, r0, #1
 8006fba:	d1c7      	bne.n	8006f4c <__sflush_r+0x34>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0c4      	beq.n	8006f4c <__sflush_r+0x34>
 8006fc2:	2b1d      	cmp	r3, #29
 8006fc4:	d001      	beq.n	8006fca <__sflush_r+0xb2>
 8006fc6:	2b16      	cmp	r3, #22
 8006fc8:	d101      	bne.n	8006fce <__sflush_r+0xb6>
 8006fca:	602f      	str	r7, [r5, #0]
 8006fcc:	e7b1      	b.n	8006f32 <__sflush_r+0x1a>
 8006fce:	89a3      	ldrh	r3, [r4, #12]
 8006fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fd4:	81a3      	strh	r3, [r4, #12]
 8006fd6:	e7ad      	b.n	8006f34 <__sflush_r+0x1c>
 8006fd8:	690f      	ldr	r7, [r1, #16]
 8006fda:	2f00      	cmp	r7, #0
 8006fdc:	d0a9      	beq.n	8006f32 <__sflush_r+0x1a>
 8006fde:	0793      	lsls	r3, r2, #30
 8006fe0:	680e      	ldr	r6, [r1, #0]
 8006fe2:	bf08      	it	eq
 8006fe4:	694b      	ldreq	r3, [r1, #20]
 8006fe6:	600f      	str	r7, [r1, #0]
 8006fe8:	bf18      	it	ne
 8006fea:	2300      	movne	r3, #0
 8006fec:	eba6 0807 	sub.w	r8, r6, r7
 8006ff0:	608b      	str	r3, [r1, #8]
 8006ff2:	f1b8 0f00 	cmp.w	r8, #0
 8006ff6:	dd9c      	ble.n	8006f32 <__sflush_r+0x1a>
 8006ff8:	6a21      	ldr	r1, [r4, #32]
 8006ffa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ffc:	4643      	mov	r3, r8
 8006ffe:	463a      	mov	r2, r7
 8007000:	4628      	mov	r0, r5
 8007002:	47b0      	blx	r6
 8007004:	2800      	cmp	r0, #0
 8007006:	dc06      	bgt.n	8007016 <__sflush_r+0xfe>
 8007008:	89a3      	ldrh	r3, [r4, #12]
 800700a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800700e:	81a3      	strh	r3, [r4, #12]
 8007010:	f04f 30ff 	mov.w	r0, #4294967295
 8007014:	e78e      	b.n	8006f34 <__sflush_r+0x1c>
 8007016:	4407      	add	r7, r0
 8007018:	eba8 0800 	sub.w	r8, r8, r0
 800701c:	e7e9      	b.n	8006ff2 <__sflush_r+0xda>
 800701e:	bf00      	nop
 8007020:	20400001 	.word	0x20400001

08007024 <_fflush_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	690b      	ldr	r3, [r1, #16]
 8007028:	4605      	mov	r5, r0
 800702a:	460c      	mov	r4, r1
 800702c:	b913      	cbnz	r3, 8007034 <_fflush_r+0x10>
 800702e:	2500      	movs	r5, #0
 8007030:	4628      	mov	r0, r5
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	b118      	cbz	r0, 800703e <_fflush_r+0x1a>
 8007036:	6983      	ldr	r3, [r0, #24]
 8007038:	b90b      	cbnz	r3, 800703e <_fflush_r+0x1a>
 800703a:	f000 f887 	bl	800714c <__sinit>
 800703e:	4b14      	ldr	r3, [pc, #80]	; (8007090 <_fflush_r+0x6c>)
 8007040:	429c      	cmp	r4, r3
 8007042:	d11b      	bne.n	800707c <_fflush_r+0x58>
 8007044:	686c      	ldr	r4, [r5, #4]
 8007046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0ef      	beq.n	800702e <_fflush_r+0xa>
 800704e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007050:	07d0      	lsls	r0, r2, #31
 8007052:	d404      	bmi.n	800705e <_fflush_r+0x3a>
 8007054:	0599      	lsls	r1, r3, #22
 8007056:	d402      	bmi.n	800705e <_fflush_r+0x3a>
 8007058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800705a:	f7ff fcd0 	bl	80069fe <__retarget_lock_acquire_recursive>
 800705e:	4628      	mov	r0, r5
 8007060:	4621      	mov	r1, r4
 8007062:	f7ff ff59 	bl	8006f18 <__sflush_r>
 8007066:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007068:	07da      	lsls	r2, r3, #31
 800706a:	4605      	mov	r5, r0
 800706c:	d4e0      	bmi.n	8007030 <_fflush_r+0xc>
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	059b      	lsls	r3, r3, #22
 8007072:	d4dd      	bmi.n	8007030 <_fflush_r+0xc>
 8007074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007076:	f7ff fcc3 	bl	8006a00 <__retarget_lock_release_recursive>
 800707a:	e7d9      	b.n	8007030 <_fflush_r+0xc>
 800707c:	4b05      	ldr	r3, [pc, #20]	; (8007094 <_fflush_r+0x70>)
 800707e:	429c      	cmp	r4, r3
 8007080:	d101      	bne.n	8007086 <_fflush_r+0x62>
 8007082:	68ac      	ldr	r4, [r5, #8]
 8007084:	e7df      	b.n	8007046 <_fflush_r+0x22>
 8007086:	4b04      	ldr	r3, [pc, #16]	; (8007098 <_fflush_r+0x74>)
 8007088:	429c      	cmp	r4, r3
 800708a:	bf08      	it	eq
 800708c:	68ec      	ldreq	r4, [r5, #12]
 800708e:	e7da      	b.n	8007046 <_fflush_r+0x22>
 8007090:	08009444 	.word	0x08009444
 8007094:	08009464 	.word	0x08009464
 8007098:	08009424 	.word	0x08009424

0800709c <std>:
 800709c:	2300      	movs	r3, #0
 800709e:	b510      	push	{r4, lr}
 80070a0:	4604      	mov	r4, r0
 80070a2:	e9c0 3300 	strd	r3, r3, [r0]
 80070a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070aa:	6083      	str	r3, [r0, #8]
 80070ac:	8181      	strh	r1, [r0, #12]
 80070ae:	6643      	str	r3, [r0, #100]	; 0x64
 80070b0:	81c2      	strh	r2, [r0, #14]
 80070b2:	6183      	str	r3, [r0, #24]
 80070b4:	4619      	mov	r1, r3
 80070b6:	2208      	movs	r2, #8
 80070b8:	305c      	adds	r0, #92	; 0x5c
 80070ba:	f7fd fb5f 	bl	800477c <memset>
 80070be:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <std+0x38>)
 80070c0:	6263      	str	r3, [r4, #36]	; 0x24
 80070c2:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <std+0x3c>)
 80070c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80070c6:	4b05      	ldr	r3, [pc, #20]	; (80070dc <std+0x40>)
 80070c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070ca:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <std+0x44>)
 80070cc:	6224      	str	r4, [r4, #32]
 80070ce:	6323      	str	r3, [r4, #48]	; 0x30
 80070d0:	bd10      	pop	{r4, pc}
 80070d2:	bf00      	nop
 80070d4:	080073e9 	.word	0x080073e9
 80070d8:	0800740b 	.word	0x0800740b
 80070dc:	08007443 	.word	0x08007443
 80070e0:	08007467 	.word	0x08007467

080070e4 <_cleanup_r>:
 80070e4:	4901      	ldr	r1, [pc, #4]	; (80070ec <_cleanup_r+0x8>)
 80070e6:	f000 b8af 	b.w	8007248 <_fwalk_reent>
 80070ea:	bf00      	nop
 80070ec:	08007025 	.word	0x08007025

080070f0 <__sfmoreglue>:
 80070f0:	b570      	push	{r4, r5, r6, lr}
 80070f2:	2268      	movs	r2, #104	; 0x68
 80070f4:	1e4d      	subs	r5, r1, #1
 80070f6:	4355      	muls	r5, r2
 80070f8:	460e      	mov	r6, r1
 80070fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070fe:	f7fd fbb1 	bl	8004864 <_malloc_r>
 8007102:	4604      	mov	r4, r0
 8007104:	b140      	cbz	r0, 8007118 <__sfmoreglue+0x28>
 8007106:	2100      	movs	r1, #0
 8007108:	e9c0 1600 	strd	r1, r6, [r0]
 800710c:	300c      	adds	r0, #12
 800710e:	60a0      	str	r0, [r4, #8]
 8007110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007114:	f7fd fb32 	bl	800477c <memset>
 8007118:	4620      	mov	r0, r4
 800711a:	bd70      	pop	{r4, r5, r6, pc}

0800711c <__sfp_lock_acquire>:
 800711c:	4801      	ldr	r0, [pc, #4]	; (8007124 <__sfp_lock_acquire+0x8>)
 800711e:	f7ff bc6e 	b.w	80069fe <__retarget_lock_acquire_recursive>
 8007122:	bf00      	nop
 8007124:	200002a9 	.word	0x200002a9

08007128 <__sfp_lock_release>:
 8007128:	4801      	ldr	r0, [pc, #4]	; (8007130 <__sfp_lock_release+0x8>)
 800712a:	f7ff bc69 	b.w	8006a00 <__retarget_lock_release_recursive>
 800712e:	bf00      	nop
 8007130:	200002a9 	.word	0x200002a9

08007134 <__sinit_lock_acquire>:
 8007134:	4801      	ldr	r0, [pc, #4]	; (800713c <__sinit_lock_acquire+0x8>)
 8007136:	f7ff bc62 	b.w	80069fe <__retarget_lock_acquire_recursive>
 800713a:	bf00      	nop
 800713c:	200002aa 	.word	0x200002aa

08007140 <__sinit_lock_release>:
 8007140:	4801      	ldr	r0, [pc, #4]	; (8007148 <__sinit_lock_release+0x8>)
 8007142:	f7ff bc5d 	b.w	8006a00 <__retarget_lock_release_recursive>
 8007146:	bf00      	nop
 8007148:	200002aa 	.word	0x200002aa

0800714c <__sinit>:
 800714c:	b510      	push	{r4, lr}
 800714e:	4604      	mov	r4, r0
 8007150:	f7ff fff0 	bl	8007134 <__sinit_lock_acquire>
 8007154:	69a3      	ldr	r3, [r4, #24]
 8007156:	b11b      	cbz	r3, 8007160 <__sinit+0x14>
 8007158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800715c:	f7ff bff0 	b.w	8007140 <__sinit_lock_release>
 8007160:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007164:	6523      	str	r3, [r4, #80]	; 0x50
 8007166:	4b13      	ldr	r3, [pc, #76]	; (80071b4 <__sinit+0x68>)
 8007168:	4a13      	ldr	r2, [pc, #76]	; (80071b8 <__sinit+0x6c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	62a2      	str	r2, [r4, #40]	; 0x28
 800716e:	42a3      	cmp	r3, r4
 8007170:	bf04      	itt	eq
 8007172:	2301      	moveq	r3, #1
 8007174:	61a3      	streq	r3, [r4, #24]
 8007176:	4620      	mov	r0, r4
 8007178:	f000 f820 	bl	80071bc <__sfp>
 800717c:	6060      	str	r0, [r4, #4]
 800717e:	4620      	mov	r0, r4
 8007180:	f000 f81c 	bl	80071bc <__sfp>
 8007184:	60a0      	str	r0, [r4, #8]
 8007186:	4620      	mov	r0, r4
 8007188:	f000 f818 	bl	80071bc <__sfp>
 800718c:	2200      	movs	r2, #0
 800718e:	60e0      	str	r0, [r4, #12]
 8007190:	2104      	movs	r1, #4
 8007192:	6860      	ldr	r0, [r4, #4]
 8007194:	f7ff ff82 	bl	800709c <std>
 8007198:	68a0      	ldr	r0, [r4, #8]
 800719a:	2201      	movs	r2, #1
 800719c:	2109      	movs	r1, #9
 800719e:	f7ff ff7d 	bl	800709c <std>
 80071a2:	68e0      	ldr	r0, [r4, #12]
 80071a4:	2202      	movs	r2, #2
 80071a6:	2112      	movs	r1, #18
 80071a8:	f7ff ff78 	bl	800709c <std>
 80071ac:	2301      	movs	r3, #1
 80071ae:	61a3      	str	r3, [r4, #24]
 80071b0:	e7d2      	b.n	8007158 <__sinit+0xc>
 80071b2:	bf00      	nop
 80071b4:	080090a8 	.word	0x080090a8
 80071b8:	080070e5 	.word	0x080070e5

080071bc <__sfp>:
 80071bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071be:	4607      	mov	r7, r0
 80071c0:	f7ff ffac 	bl	800711c <__sfp_lock_acquire>
 80071c4:	4b1e      	ldr	r3, [pc, #120]	; (8007240 <__sfp+0x84>)
 80071c6:	681e      	ldr	r6, [r3, #0]
 80071c8:	69b3      	ldr	r3, [r6, #24]
 80071ca:	b913      	cbnz	r3, 80071d2 <__sfp+0x16>
 80071cc:	4630      	mov	r0, r6
 80071ce:	f7ff ffbd 	bl	800714c <__sinit>
 80071d2:	3648      	adds	r6, #72	; 0x48
 80071d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80071d8:	3b01      	subs	r3, #1
 80071da:	d503      	bpl.n	80071e4 <__sfp+0x28>
 80071dc:	6833      	ldr	r3, [r6, #0]
 80071de:	b30b      	cbz	r3, 8007224 <__sfp+0x68>
 80071e0:	6836      	ldr	r6, [r6, #0]
 80071e2:	e7f7      	b.n	80071d4 <__sfp+0x18>
 80071e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80071e8:	b9d5      	cbnz	r5, 8007220 <__sfp+0x64>
 80071ea:	4b16      	ldr	r3, [pc, #88]	; (8007244 <__sfp+0x88>)
 80071ec:	60e3      	str	r3, [r4, #12]
 80071ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071f2:	6665      	str	r5, [r4, #100]	; 0x64
 80071f4:	f7ff fc02 	bl	80069fc <__retarget_lock_init_recursive>
 80071f8:	f7ff ff96 	bl	8007128 <__sfp_lock_release>
 80071fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007200:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007204:	6025      	str	r5, [r4, #0]
 8007206:	61a5      	str	r5, [r4, #24]
 8007208:	2208      	movs	r2, #8
 800720a:	4629      	mov	r1, r5
 800720c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007210:	f7fd fab4 	bl	800477c <memset>
 8007214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800721c:	4620      	mov	r0, r4
 800721e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007220:	3468      	adds	r4, #104	; 0x68
 8007222:	e7d9      	b.n	80071d8 <__sfp+0x1c>
 8007224:	2104      	movs	r1, #4
 8007226:	4638      	mov	r0, r7
 8007228:	f7ff ff62 	bl	80070f0 <__sfmoreglue>
 800722c:	4604      	mov	r4, r0
 800722e:	6030      	str	r0, [r6, #0]
 8007230:	2800      	cmp	r0, #0
 8007232:	d1d5      	bne.n	80071e0 <__sfp+0x24>
 8007234:	f7ff ff78 	bl	8007128 <__sfp_lock_release>
 8007238:	230c      	movs	r3, #12
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	e7ee      	b.n	800721c <__sfp+0x60>
 800723e:	bf00      	nop
 8007240:	080090a8 	.word	0x080090a8
 8007244:	ffff0001 	.word	0xffff0001

08007248 <_fwalk_reent>:
 8007248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800724c:	4606      	mov	r6, r0
 800724e:	4688      	mov	r8, r1
 8007250:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007254:	2700      	movs	r7, #0
 8007256:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800725a:	f1b9 0901 	subs.w	r9, r9, #1
 800725e:	d505      	bpl.n	800726c <_fwalk_reent+0x24>
 8007260:	6824      	ldr	r4, [r4, #0]
 8007262:	2c00      	cmp	r4, #0
 8007264:	d1f7      	bne.n	8007256 <_fwalk_reent+0xe>
 8007266:	4638      	mov	r0, r7
 8007268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800726c:	89ab      	ldrh	r3, [r5, #12]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d907      	bls.n	8007282 <_fwalk_reent+0x3a>
 8007272:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007276:	3301      	adds	r3, #1
 8007278:	d003      	beq.n	8007282 <_fwalk_reent+0x3a>
 800727a:	4629      	mov	r1, r5
 800727c:	4630      	mov	r0, r6
 800727e:	47c0      	blx	r8
 8007280:	4307      	orrs	r7, r0
 8007282:	3568      	adds	r5, #104	; 0x68
 8007284:	e7e9      	b.n	800725a <_fwalk_reent+0x12>

08007286 <__swhatbuf_r>:
 8007286:	b570      	push	{r4, r5, r6, lr}
 8007288:	460e      	mov	r6, r1
 800728a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800728e:	2900      	cmp	r1, #0
 8007290:	b096      	sub	sp, #88	; 0x58
 8007292:	4614      	mov	r4, r2
 8007294:	461d      	mov	r5, r3
 8007296:	da08      	bge.n	80072aa <__swhatbuf_r+0x24>
 8007298:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	602a      	str	r2, [r5, #0]
 80072a0:	061a      	lsls	r2, r3, #24
 80072a2:	d410      	bmi.n	80072c6 <__swhatbuf_r+0x40>
 80072a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072a8:	e00e      	b.n	80072c8 <__swhatbuf_r+0x42>
 80072aa:	466a      	mov	r2, sp
 80072ac:	f000 f902 	bl	80074b4 <_fstat_r>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	dbf1      	blt.n	8007298 <__swhatbuf_r+0x12>
 80072b4:	9a01      	ldr	r2, [sp, #4]
 80072b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072be:	425a      	negs	r2, r3
 80072c0:	415a      	adcs	r2, r3
 80072c2:	602a      	str	r2, [r5, #0]
 80072c4:	e7ee      	b.n	80072a4 <__swhatbuf_r+0x1e>
 80072c6:	2340      	movs	r3, #64	; 0x40
 80072c8:	2000      	movs	r0, #0
 80072ca:	6023      	str	r3, [r4, #0]
 80072cc:	b016      	add	sp, #88	; 0x58
 80072ce:	bd70      	pop	{r4, r5, r6, pc}

080072d0 <__smakebuf_r>:
 80072d0:	898b      	ldrh	r3, [r1, #12]
 80072d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072d4:	079d      	lsls	r5, r3, #30
 80072d6:	4606      	mov	r6, r0
 80072d8:	460c      	mov	r4, r1
 80072da:	d507      	bpl.n	80072ec <__smakebuf_r+0x1c>
 80072dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	6123      	str	r3, [r4, #16]
 80072e4:	2301      	movs	r3, #1
 80072e6:	6163      	str	r3, [r4, #20]
 80072e8:	b002      	add	sp, #8
 80072ea:	bd70      	pop	{r4, r5, r6, pc}
 80072ec:	ab01      	add	r3, sp, #4
 80072ee:	466a      	mov	r2, sp
 80072f0:	f7ff ffc9 	bl	8007286 <__swhatbuf_r>
 80072f4:	9900      	ldr	r1, [sp, #0]
 80072f6:	4605      	mov	r5, r0
 80072f8:	4630      	mov	r0, r6
 80072fa:	f7fd fab3 	bl	8004864 <_malloc_r>
 80072fe:	b948      	cbnz	r0, 8007314 <__smakebuf_r+0x44>
 8007300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007304:	059a      	lsls	r2, r3, #22
 8007306:	d4ef      	bmi.n	80072e8 <__smakebuf_r+0x18>
 8007308:	f023 0303 	bic.w	r3, r3, #3
 800730c:	f043 0302 	orr.w	r3, r3, #2
 8007310:	81a3      	strh	r3, [r4, #12]
 8007312:	e7e3      	b.n	80072dc <__smakebuf_r+0xc>
 8007314:	4b0d      	ldr	r3, [pc, #52]	; (800734c <__smakebuf_r+0x7c>)
 8007316:	62b3      	str	r3, [r6, #40]	; 0x28
 8007318:	89a3      	ldrh	r3, [r4, #12]
 800731a:	6020      	str	r0, [r4, #0]
 800731c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007320:	81a3      	strh	r3, [r4, #12]
 8007322:	9b00      	ldr	r3, [sp, #0]
 8007324:	6163      	str	r3, [r4, #20]
 8007326:	9b01      	ldr	r3, [sp, #4]
 8007328:	6120      	str	r0, [r4, #16]
 800732a:	b15b      	cbz	r3, 8007344 <__smakebuf_r+0x74>
 800732c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007330:	4630      	mov	r0, r6
 8007332:	f000 f8d1 	bl	80074d8 <_isatty_r>
 8007336:	b128      	cbz	r0, 8007344 <__smakebuf_r+0x74>
 8007338:	89a3      	ldrh	r3, [r4, #12]
 800733a:	f023 0303 	bic.w	r3, r3, #3
 800733e:	f043 0301 	orr.w	r3, r3, #1
 8007342:	81a3      	strh	r3, [r4, #12]
 8007344:	89a0      	ldrh	r0, [r4, #12]
 8007346:	4305      	orrs	r5, r0
 8007348:	81a5      	strh	r5, [r4, #12]
 800734a:	e7cd      	b.n	80072e8 <__smakebuf_r+0x18>
 800734c:	080070e5 	.word	0x080070e5

08007350 <_malloc_usable_size_r>:
 8007350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007354:	1f18      	subs	r0, r3, #4
 8007356:	2b00      	cmp	r3, #0
 8007358:	bfbc      	itt	lt
 800735a:	580b      	ldrlt	r3, [r1, r0]
 800735c:	18c0      	addlt	r0, r0, r3
 800735e:	4770      	bx	lr

08007360 <_raise_r>:
 8007360:	291f      	cmp	r1, #31
 8007362:	b538      	push	{r3, r4, r5, lr}
 8007364:	4604      	mov	r4, r0
 8007366:	460d      	mov	r5, r1
 8007368:	d904      	bls.n	8007374 <_raise_r+0x14>
 800736a:	2316      	movs	r3, #22
 800736c:	6003      	str	r3, [r0, #0]
 800736e:	f04f 30ff 	mov.w	r0, #4294967295
 8007372:	bd38      	pop	{r3, r4, r5, pc}
 8007374:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007376:	b112      	cbz	r2, 800737e <_raise_r+0x1e>
 8007378:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800737c:	b94b      	cbnz	r3, 8007392 <_raise_r+0x32>
 800737e:	4620      	mov	r0, r4
 8007380:	f000 f830 	bl	80073e4 <_getpid_r>
 8007384:	462a      	mov	r2, r5
 8007386:	4601      	mov	r1, r0
 8007388:	4620      	mov	r0, r4
 800738a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800738e:	f000 b817 	b.w	80073c0 <_kill_r>
 8007392:	2b01      	cmp	r3, #1
 8007394:	d00a      	beq.n	80073ac <_raise_r+0x4c>
 8007396:	1c59      	adds	r1, r3, #1
 8007398:	d103      	bne.n	80073a2 <_raise_r+0x42>
 800739a:	2316      	movs	r3, #22
 800739c:	6003      	str	r3, [r0, #0]
 800739e:	2001      	movs	r0, #1
 80073a0:	e7e7      	b.n	8007372 <_raise_r+0x12>
 80073a2:	2400      	movs	r4, #0
 80073a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80073a8:	4628      	mov	r0, r5
 80073aa:	4798      	blx	r3
 80073ac:	2000      	movs	r0, #0
 80073ae:	e7e0      	b.n	8007372 <_raise_r+0x12>

080073b0 <raise>:
 80073b0:	4b02      	ldr	r3, [pc, #8]	; (80073bc <raise+0xc>)
 80073b2:	4601      	mov	r1, r0
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	f7ff bfd3 	b.w	8007360 <_raise_r>
 80073ba:	bf00      	nop
 80073bc:	20000024 	.word	0x20000024

080073c0 <_kill_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	4d07      	ldr	r5, [pc, #28]	; (80073e0 <_kill_r+0x20>)
 80073c4:	2300      	movs	r3, #0
 80073c6:	4604      	mov	r4, r0
 80073c8:	4608      	mov	r0, r1
 80073ca:	4611      	mov	r1, r2
 80073cc:	602b      	str	r3, [r5, #0]
 80073ce:	f7fb f911 	bl	80025f4 <_kill>
 80073d2:	1c43      	adds	r3, r0, #1
 80073d4:	d102      	bne.n	80073dc <_kill_r+0x1c>
 80073d6:	682b      	ldr	r3, [r5, #0]
 80073d8:	b103      	cbz	r3, 80073dc <_kill_r+0x1c>
 80073da:	6023      	str	r3, [r4, #0]
 80073dc:	bd38      	pop	{r3, r4, r5, pc}
 80073de:	bf00      	nop
 80073e0:	200002a4 	.word	0x200002a4

080073e4 <_getpid_r>:
 80073e4:	f7fb b8fe 	b.w	80025e4 <_getpid>

080073e8 <__sread>:
 80073e8:	b510      	push	{r4, lr}
 80073ea:	460c      	mov	r4, r1
 80073ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f0:	f000 f894 	bl	800751c <_read_r>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	bfab      	itete	ge
 80073f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073fa:	89a3      	ldrhlt	r3, [r4, #12]
 80073fc:	181b      	addge	r3, r3, r0
 80073fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007402:	bfac      	ite	ge
 8007404:	6563      	strge	r3, [r4, #84]	; 0x54
 8007406:	81a3      	strhlt	r3, [r4, #12]
 8007408:	bd10      	pop	{r4, pc}

0800740a <__swrite>:
 800740a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800740e:	461f      	mov	r7, r3
 8007410:	898b      	ldrh	r3, [r1, #12]
 8007412:	05db      	lsls	r3, r3, #23
 8007414:	4605      	mov	r5, r0
 8007416:	460c      	mov	r4, r1
 8007418:	4616      	mov	r6, r2
 800741a:	d505      	bpl.n	8007428 <__swrite+0x1e>
 800741c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007420:	2302      	movs	r3, #2
 8007422:	2200      	movs	r2, #0
 8007424:	f000 f868 	bl	80074f8 <_lseek_r>
 8007428:	89a3      	ldrh	r3, [r4, #12]
 800742a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800742e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007432:	81a3      	strh	r3, [r4, #12]
 8007434:	4632      	mov	r2, r6
 8007436:	463b      	mov	r3, r7
 8007438:	4628      	mov	r0, r5
 800743a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800743e:	f000 b817 	b.w	8007470 <_write_r>

08007442 <__sseek>:
 8007442:	b510      	push	{r4, lr}
 8007444:	460c      	mov	r4, r1
 8007446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800744a:	f000 f855 	bl	80074f8 <_lseek_r>
 800744e:	1c43      	adds	r3, r0, #1
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	bf15      	itete	ne
 8007454:	6560      	strne	r0, [r4, #84]	; 0x54
 8007456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800745a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800745e:	81a3      	strheq	r3, [r4, #12]
 8007460:	bf18      	it	ne
 8007462:	81a3      	strhne	r3, [r4, #12]
 8007464:	bd10      	pop	{r4, pc}

08007466 <__sclose>:
 8007466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800746a:	f000 b813 	b.w	8007494 <_close_r>
	...

08007470 <_write_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4d07      	ldr	r5, [pc, #28]	; (8007490 <_write_r+0x20>)
 8007474:	4604      	mov	r4, r0
 8007476:	4608      	mov	r0, r1
 8007478:	4611      	mov	r1, r2
 800747a:	2200      	movs	r2, #0
 800747c:	602a      	str	r2, [r5, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	f7fb f8ef 	bl	8002662 <_write>
 8007484:	1c43      	adds	r3, r0, #1
 8007486:	d102      	bne.n	800748e <_write_r+0x1e>
 8007488:	682b      	ldr	r3, [r5, #0]
 800748a:	b103      	cbz	r3, 800748e <_write_r+0x1e>
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	bd38      	pop	{r3, r4, r5, pc}
 8007490:	200002a4 	.word	0x200002a4

08007494 <_close_r>:
 8007494:	b538      	push	{r3, r4, r5, lr}
 8007496:	4d06      	ldr	r5, [pc, #24]	; (80074b0 <_close_r+0x1c>)
 8007498:	2300      	movs	r3, #0
 800749a:	4604      	mov	r4, r0
 800749c:	4608      	mov	r0, r1
 800749e:	602b      	str	r3, [r5, #0]
 80074a0:	f7fb f8fb 	bl	800269a <_close>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d102      	bne.n	80074ae <_close_r+0x1a>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	b103      	cbz	r3, 80074ae <_close_r+0x1a>
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	200002a4 	.word	0x200002a4

080074b4 <_fstat_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4d07      	ldr	r5, [pc, #28]	; (80074d4 <_fstat_r+0x20>)
 80074b8:	2300      	movs	r3, #0
 80074ba:	4604      	mov	r4, r0
 80074bc:	4608      	mov	r0, r1
 80074be:	4611      	mov	r1, r2
 80074c0:	602b      	str	r3, [r5, #0]
 80074c2:	f7fb f8f6 	bl	80026b2 <_fstat>
 80074c6:	1c43      	adds	r3, r0, #1
 80074c8:	d102      	bne.n	80074d0 <_fstat_r+0x1c>
 80074ca:	682b      	ldr	r3, [r5, #0]
 80074cc:	b103      	cbz	r3, 80074d0 <_fstat_r+0x1c>
 80074ce:	6023      	str	r3, [r4, #0]
 80074d0:	bd38      	pop	{r3, r4, r5, pc}
 80074d2:	bf00      	nop
 80074d4:	200002a4 	.word	0x200002a4

080074d8 <_isatty_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	4d06      	ldr	r5, [pc, #24]	; (80074f4 <_isatty_r+0x1c>)
 80074dc:	2300      	movs	r3, #0
 80074de:	4604      	mov	r4, r0
 80074e0:	4608      	mov	r0, r1
 80074e2:	602b      	str	r3, [r5, #0]
 80074e4:	f7fb f8f5 	bl	80026d2 <_isatty>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d102      	bne.n	80074f2 <_isatty_r+0x1a>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	b103      	cbz	r3, 80074f2 <_isatty_r+0x1a>
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	200002a4 	.word	0x200002a4

080074f8 <_lseek_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	4d07      	ldr	r5, [pc, #28]	; (8007518 <_lseek_r+0x20>)
 80074fc:	4604      	mov	r4, r0
 80074fe:	4608      	mov	r0, r1
 8007500:	4611      	mov	r1, r2
 8007502:	2200      	movs	r2, #0
 8007504:	602a      	str	r2, [r5, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	f7fb f8ee 	bl	80026e8 <_lseek>
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	d102      	bne.n	8007516 <_lseek_r+0x1e>
 8007510:	682b      	ldr	r3, [r5, #0]
 8007512:	b103      	cbz	r3, 8007516 <_lseek_r+0x1e>
 8007514:	6023      	str	r3, [r4, #0]
 8007516:	bd38      	pop	{r3, r4, r5, pc}
 8007518:	200002a4 	.word	0x200002a4

0800751c <_read_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	4d07      	ldr	r5, [pc, #28]	; (800753c <_read_r+0x20>)
 8007520:	4604      	mov	r4, r0
 8007522:	4608      	mov	r0, r1
 8007524:	4611      	mov	r1, r2
 8007526:	2200      	movs	r2, #0
 8007528:	602a      	str	r2, [r5, #0]
 800752a:	461a      	mov	r2, r3
 800752c:	f7fb f87c 	bl	8002628 <_read>
 8007530:	1c43      	adds	r3, r0, #1
 8007532:	d102      	bne.n	800753a <_read_r+0x1e>
 8007534:	682b      	ldr	r3, [r5, #0]
 8007536:	b103      	cbz	r3, 800753a <_read_r+0x1e>
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	bd38      	pop	{r3, r4, r5, pc}
 800753c:	200002a4 	.word	0x200002a4

08007540 <atan>:
 8007540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	ec55 4b10 	vmov	r4, r5, d0
 8007548:	4bc3      	ldr	r3, [pc, #780]	; (8007858 <atan+0x318>)
 800754a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800754e:	429e      	cmp	r6, r3
 8007550:	46ab      	mov	fp, r5
 8007552:	dd18      	ble.n	8007586 <atan+0x46>
 8007554:	4bc1      	ldr	r3, [pc, #772]	; (800785c <atan+0x31c>)
 8007556:	429e      	cmp	r6, r3
 8007558:	dc01      	bgt.n	800755e <atan+0x1e>
 800755a:	d109      	bne.n	8007570 <atan+0x30>
 800755c:	b144      	cbz	r4, 8007570 <atan+0x30>
 800755e:	4622      	mov	r2, r4
 8007560:	462b      	mov	r3, r5
 8007562:	4620      	mov	r0, r4
 8007564:	4629      	mov	r1, r5
 8007566:	f7f8 fe99 	bl	800029c <__adddf3>
 800756a:	4604      	mov	r4, r0
 800756c:	460d      	mov	r5, r1
 800756e:	e006      	b.n	800757e <atan+0x3e>
 8007570:	f1bb 0f00 	cmp.w	fp, #0
 8007574:	f300 8131 	bgt.w	80077da <atan+0x29a>
 8007578:	a59b      	add	r5, pc, #620	; (adr r5, 80077e8 <atan+0x2a8>)
 800757a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800757e:	ec45 4b10 	vmov	d0, r4, r5
 8007582:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007586:	4bb6      	ldr	r3, [pc, #728]	; (8007860 <atan+0x320>)
 8007588:	429e      	cmp	r6, r3
 800758a:	dc14      	bgt.n	80075b6 <atan+0x76>
 800758c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007590:	429e      	cmp	r6, r3
 8007592:	dc0d      	bgt.n	80075b0 <atan+0x70>
 8007594:	a396      	add	r3, pc, #600	; (adr r3, 80077f0 <atan+0x2b0>)
 8007596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759a:	ee10 0a10 	vmov	r0, s0
 800759e:	4629      	mov	r1, r5
 80075a0:	f7f8 fe7c 	bl	800029c <__adddf3>
 80075a4:	4baf      	ldr	r3, [pc, #700]	; (8007864 <atan+0x324>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	f7f9 fabe 	bl	8000b28 <__aeabi_dcmpgt>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	d1e6      	bne.n	800757e <atan+0x3e>
 80075b0:	f04f 3aff 	mov.w	sl, #4294967295
 80075b4:	e02b      	b.n	800760e <atan+0xce>
 80075b6:	f000 f9b7 	bl	8007928 <fabs>
 80075ba:	4bab      	ldr	r3, [pc, #684]	; (8007868 <atan+0x328>)
 80075bc:	429e      	cmp	r6, r3
 80075be:	ec55 4b10 	vmov	r4, r5, d0
 80075c2:	f300 80bf 	bgt.w	8007744 <atan+0x204>
 80075c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80075ca:	429e      	cmp	r6, r3
 80075cc:	f300 80a0 	bgt.w	8007710 <atan+0x1d0>
 80075d0:	ee10 2a10 	vmov	r2, s0
 80075d4:	ee10 0a10 	vmov	r0, s0
 80075d8:	462b      	mov	r3, r5
 80075da:	4629      	mov	r1, r5
 80075dc:	f7f8 fe5e 	bl	800029c <__adddf3>
 80075e0:	4ba0      	ldr	r3, [pc, #640]	; (8007864 <atan+0x324>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	f7f8 fe58 	bl	8000298 <__aeabi_dsub>
 80075e8:	2200      	movs	r2, #0
 80075ea:	4606      	mov	r6, r0
 80075ec:	460f      	mov	r7, r1
 80075ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075f2:	4620      	mov	r0, r4
 80075f4:	4629      	mov	r1, r5
 80075f6:	f7f8 fe51 	bl	800029c <__adddf3>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4630      	mov	r0, r6
 8007600:	4639      	mov	r1, r7
 8007602:	f7f9 f92b 	bl	800085c <__aeabi_ddiv>
 8007606:	f04f 0a00 	mov.w	sl, #0
 800760a:	4604      	mov	r4, r0
 800760c:	460d      	mov	r5, r1
 800760e:	4622      	mov	r2, r4
 8007610:	462b      	mov	r3, r5
 8007612:	4620      	mov	r0, r4
 8007614:	4629      	mov	r1, r5
 8007616:	f7f8 fff7 	bl	8000608 <__aeabi_dmul>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	4680      	mov	r8, r0
 8007620:	4689      	mov	r9, r1
 8007622:	f7f8 fff1 	bl	8000608 <__aeabi_dmul>
 8007626:	a374      	add	r3, pc, #464	; (adr r3, 80077f8 <atan+0x2b8>)
 8007628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762c:	4606      	mov	r6, r0
 800762e:	460f      	mov	r7, r1
 8007630:	f7f8 ffea 	bl	8000608 <__aeabi_dmul>
 8007634:	a372      	add	r3, pc, #456	; (adr r3, 8007800 <atan+0x2c0>)
 8007636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763a:	f7f8 fe2f 	bl	800029c <__adddf3>
 800763e:	4632      	mov	r2, r6
 8007640:	463b      	mov	r3, r7
 8007642:	f7f8 ffe1 	bl	8000608 <__aeabi_dmul>
 8007646:	a370      	add	r3, pc, #448	; (adr r3, 8007808 <atan+0x2c8>)
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f7f8 fe26 	bl	800029c <__adddf3>
 8007650:	4632      	mov	r2, r6
 8007652:	463b      	mov	r3, r7
 8007654:	f7f8 ffd8 	bl	8000608 <__aeabi_dmul>
 8007658:	a36d      	add	r3, pc, #436	; (adr r3, 8007810 <atan+0x2d0>)
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	f7f8 fe1d 	bl	800029c <__adddf3>
 8007662:	4632      	mov	r2, r6
 8007664:	463b      	mov	r3, r7
 8007666:	f7f8 ffcf 	bl	8000608 <__aeabi_dmul>
 800766a:	a36b      	add	r3, pc, #428	; (adr r3, 8007818 <atan+0x2d8>)
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007670:	f7f8 fe14 	bl	800029c <__adddf3>
 8007674:	4632      	mov	r2, r6
 8007676:	463b      	mov	r3, r7
 8007678:	f7f8 ffc6 	bl	8000608 <__aeabi_dmul>
 800767c:	a368      	add	r3, pc, #416	; (adr r3, 8007820 <atan+0x2e0>)
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	f7f8 fe0b 	bl	800029c <__adddf3>
 8007686:	4642      	mov	r2, r8
 8007688:	464b      	mov	r3, r9
 800768a:	f7f8 ffbd 	bl	8000608 <__aeabi_dmul>
 800768e:	a366      	add	r3, pc, #408	; (adr r3, 8007828 <atan+0x2e8>)
 8007690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007694:	4680      	mov	r8, r0
 8007696:	4689      	mov	r9, r1
 8007698:	4630      	mov	r0, r6
 800769a:	4639      	mov	r1, r7
 800769c:	f7f8 ffb4 	bl	8000608 <__aeabi_dmul>
 80076a0:	a363      	add	r3, pc, #396	; (adr r3, 8007830 <atan+0x2f0>)
 80076a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a6:	f7f8 fdf7 	bl	8000298 <__aeabi_dsub>
 80076aa:	4632      	mov	r2, r6
 80076ac:	463b      	mov	r3, r7
 80076ae:	f7f8 ffab 	bl	8000608 <__aeabi_dmul>
 80076b2:	a361      	add	r3, pc, #388	; (adr r3, 8007838 <atan+0x2f8>)
 80076b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b8:	f7f8 fdee 	bl	8000298 <__aeabi_dsub>
 80076bc:	4632      	mov	r2, r6
 80076be:	463b      	mov	r3, r7
 80076c0:	f7f8 ffa2 	bl	8000608 <__aeabi_dmul>
 80076c4:	a35e      	add	r3, pc, #376	; (adr r3, 8007840 <atan+0x300>)
 80076c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ca:	f7f8 fde5 	bl	8000298 <__aeabi_dsub>
 80076ce:	4632      	mov	r2, r6
 80076d0:	463b      	mov	r3, r7
 80076d2:	f7f8 ff99 	bl	8000608 <__aeabi_dmul>
 80076d6:	a35c      	add	r3, pc, #368	; (adr r3, 8007848 <atan+0x308>)
 80076d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076dc:	f7f8 fddc 	bl	8000298 <__aeabi_dsub>
 80076e0:	4632      	mov	r2, r6
 80076e2:	463b      	mov	r3, r7
 80076e4:	f7f8 ff90 	bl	8000608 <__aeabi_dmul>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4640      	mov	r0, r8
 80076ee:	4649      	mov	r1, r9
 80076f0:	f7f8 fdd4 	bl	800029c <__adddf3>
 80076f4:	4622      	mov	r2, r4
 80076f6:	462b      	mov	r3, r5
 80076f8:	f7f8 ff86 	bl	8000608 <__aeabi_dmul>
 80076fc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	d14b      	bne.n	800779e <atan+0x25e>
 8007706:	4620      	mov	r0, r4
 8007708:	4629      	mov	r1, r5
 800770a:	f7f8 fdc5 	bl	8000298 <__aeabi_dsub>
 800770e:	e72c      	b.n	800756a <atan+0x2a>
 8007710:	ee10 0a10 	vmov	r0, s0
 8007714:	4b53      	ldr	r3, [pc, #332]	; (8007864 <atan+0x324>)
 8007716:	2200      	movs	r2, #0
 8007718:	4629      	mov	r1, r5
 800771a:	f7f8 fdbd 	bl	8000298 <__aeabi_dsub>
 800771e:	4b51      	ldr	r3, [pc, #324]	; (8007864 <atan+0x324>)
 8007720:	4606      	mov	r6, r0
 8007722:	460f      	mov	r7, r1
 8007724:	2200      	movs	r2, #0
 8007726:	4620      	mov	r0, r4
 8007728:	4629      	mov	r1, r5
 800772a:	f7f8 fdb7 	bl	800029c <__adddf3>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4630      	mov	r0, r6
 8007734:	4639      	mov	r1, r7
 8007736:	f7f9 f891 	bl	800085c <__aeabi_ddiv>
 800773a:	f04f 0a01 	mov.w	sl, #1
 800773e:	4604      	mov	r4, r0
 8007740:	460d      	mov	r5, r1
 8007742:	e764      	b.n	800760e <atan+0xce>
 8007744:	4b49      	ldr	r3, [pc, #292]	; (800786c <atan+0x32c>)
 8007746:	429e      	cmp	r6, r3
 8007748:	da1d      	bge.n	8007786 <atan+0x246>
 800774a:	ee10 0a10 	vmov	r0, s0
 800774e:	4b48      	ldr	r3, [pc, #288]	; (8007870 <atan+0x330>)
 8007750:	2200      	movs	r2, #0
 8007752:	4629      	mov	r1, r5
 8007754:	f7f8 fda0 	bl	8000298 <__aeabi_dsub>
 8007758:	4b45      	ldr	r3, [pc, #276]	; (8007870 <atan+0x330>)
 800775a:	4606      	mov	r6, r0
 800775c:	460f      	mov	r7, r1
 800775e:	2200      	movs	r2, #0
 8007760:	4620      	mov	r0, r4
 8007762:	4629      	mov	r1, r5
 8007764:	f7f8 ff50 	bl	8000608 <__aeabi_dmul>
 8007768:	4b3e      	ldr	r3, [pc, #248]	; (8007864 <atan+0x324>)
 800776a:	2200      	movs	r2, #0
 800776c:	f7f8 fd96 	bl	800029c <__adddf3>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4630      	mov	r0, r6
 8007776:	4639      	mov	r1, r7
 8007778:	f7f9 f870 	bl	800085c <__aeabi_ddiv>
 800777c:	f04f 0a02 	mov.w	sl, #2
 8007780:	4604      	mov	r4, r0
 8007782:	460d      	mov	r5, r1
 8007784:	e743      	b.n	800760e <atan+0xce>
 8007786:	462b      	mov	r3, r5
 8007788:	ee10 2a10 	vmov	r2, s0
 800778c:	4939      	ldr	r1, [pc, #228]	; (8007874 <atan+0x334>)
 800778e:	2000      	movs	r0, #0
 8007790:	f7f9 f864 	bl	800085c <__aeabi_ddiv>
 8007794:	f04f 0a03 	mov.w	sl, #3
 8007798:	4604      	mov	r4, r0
 800779a:	460d      	mov	r5, r1
 800779c:	e737      	b.n	800760e <atan+0xce>
 800779e:	4b36      	ldr	r3, [pc, #216]	; (8007878 <atan+0x338>)
 80077a0:	4e36      	ldr	r6, [pc, #216]	; (800787c <atan+0x33c>)
 80077a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80077a6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80077aa:	e9da 2300 	ldrd	r2, r3, [sl]
 80077ae:	f7f8 fd73 	bl	8000298 <__aeabi_dsub>
 80077b2:	4622      	mov	r2, r4
 80077b4:	462b      	mov	r3, r5
 80077b6:	f7f8 fd6f 	bl	8000298 <__aeabi_dsub>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	e9d6 0100 	ldrd	r0, r1, [r6]
 80077c2:	f7f8 fd69 	bl	8000298 <__aeabi_dsub>
 80077c6:	f1bb 0f00 	cmp.w	fp, #0
 80077ca:	4604      	mov	r4, r0
 80077cc:	460d      	mov	r5, r1
 80077ce:	f6bf aed6 	bge.w	800757e <atan+0x3e>
 80077d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077d6:	461d      	mov	r5, r3
 80077d8:	e6d1      	b.n	800757e <atan+0x3e>
 80077da:	a51d      	add	r5, pc, #116	; (adr r5, 8007850 <atan+0x310>)
 80077dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80077e0:	e6cd      	b.n	800757e <atan+0x3e>
 80077e2:	bf00      	nop
 80077e4:	f3af 8000 	nop.w
 80077e8:	54442d18 	.word	0x54442d18
 80077ec:	bff921fb 	.word	0xbff921fb
 80077f0:	8800759c 	.word	0x8800759c
 80077f4:	7e37e43c 	.word	0x7e37e43c
 80077f8:	e322da11 	.word	0xe322da11
 80077fc:	3f90ad3a 	.word	0x3f90ad3a
 8007800:	24760deb 	.word	0x24760deb
 8007804:	3fa97b4b 	.word	0x3fa97b4b
 8007808:	a0d03d51 	.word	0xa0d03d51
 800780c:	3fb10d66 	.word	0x3fb10d66
 8007810:	c54c206e 	.word	0xc54c206e
 8007814:	3fb745cd 	.word	0x3fb745cd
 8007818:	920083ff 	.word	0x920083ff
 800781c:	3fc24924 	.word	0x3fc24924
 8007820:	5555550d 	.word	0x5555550d
 8007824:	3fd55555 	.word	0x3fd55555
 8007828:	2c6a6c2f 	.word	0x2c6a6c2f
 800782c:	bfa2b444 	.word	0xbfa2b444
 8007830:	52defd9a 	.word	0x52defd9a
 8007834:	3fadde2d 	.word	0x3fadde2d
 8007838:	af749a6d 	.word	0xaf749a6d
 800783c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007840:	fe231671 	.word	0xfe231671
 8007844:	3fbc71c6 	.word	0x3fbc71c6
 8007848:	9998ebc4 	.word	0x9998ebc4
 800784c:	3fc99999 	.word	0x3fc99999
 8007850:	54442d18 	.word	0x54442d18
 8007854:	3ff921fb 	.word	0x3ff921fb
 8007858:	440fffff 	.word	0x440fffff
 800785c:	7ff00000 	.word	0x7ff00000
 8007860:	3fdbffff 	.word	0x3fdbffff
 8007864:	3ff00000 	.word	0x3ff00000
 8007868:	3ff2ffff 	.word	0x3ff2ffff
 800786c:	40038000 	.word	0x40038000
 8007870:	3ff80000 	.word	0x3ff80000
 8007874:	bff00000 	.word	0xbff00000
 8007878:	080094a8 	.word	0x080094a8
 800787c:	08009488 	.word	0x08009488

08007880 <cos>:
 8007880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007882:	ec53 2b10 	vmov	r2, r3, d0
 8007886:	4826      	ldr	r0, [pc, #152]	; (8007920 <cos+0xa0>)
 8007888:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800788c:	4281      	cmp	r1, r0
 800788e:	dc06      	bgt.n	800789e <cos+0x1e>
 8007890:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007918 <cos+0x98>
 8007894:	b005      	add	sp, #20
 8007896:	f85d eb04 	ldr.w	lr, [sp], #4
 800789a:	f000 baf9 	b.w	8007e90 <__kernel_cos>
 800789e:	4821      	ldr	r0, [pc, #132]	; (8007924 <cos+0xa4>)
 80078a0:	4281      	cmp	r1, r0
 80078a2:	dd09      	ble.n	80078b8 <cos+0x38>
 80078a4:	ee10 0a10 	vmov	r0, s0
 80078a8:	4619      	mov	r1, r3
 80078aa:	f7f8 fcf5 	bl	8000298 <__aeabi_dsub>
 80078ae:	ec41 0b10 	vmov	d0, r0, r1
 80078b2:	b005      	add	sp, #20
 80078b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80078b8:	4668      	mov	r0, sp
 80078ba:	f000 f8dd 	bl	8007a78 <__ieee754_rem_pio2>
 80078be:	f000 0003 	and.w	r0, r0, #3
 80078c2:	2801      	cmp	r0, #1
 80078c4:	d00b      	beq.n	80078de <cos+0x5e>
 80078c6:	2802      	cmp	r0, #2
 80078c8:	d016      	beq.n	80078f8 <cos+0x78>
 80078ca:	b9e0      	cbnz	r0, 8007906 <cos+0x86>
 80078cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80078d0:	ed9d 0b00 	vldr	d0, [sp]
 80078d4:	f000 fadc 	bl	8007e90 <__kernel_cos>
 80078d8:	ec51 0b10 	vmov	r0, r1, d0
 80078dc:	e7e7      	b.n	80078ae <cos+0x2e>
 80078de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80078e2:	ed9d 0b00 	vldr	d0, [sp]
 80078e6:	f000 feeb 	bl	80086c0 <__kernel_sin>
 80078ea:	ec53 2b10 	vmov	r2, r3, d0
 80078ee:	ee10 0a10 	vmov	r0, s0
 80078f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80078f6:	e7da      	b.n	80078ae <cos+0x2e>
 80078f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80078fc:	ed9d 0b00 	vldr	d0, [sp]
 8007900:	f000 fac6 	bl	8007e90 <__kernel_cos>
 8007904:	e7f1      	b.n	80078ea <cos+0x6a>
 8007906:	ed9d 1b02 	vldr	d1, [sp, #8]
 800790a:	ed9d 0b00 	vldr	d0, [sp]
 800790e:	2001      	movs	r0, #1
 8007910:	f000 fed6 	bl	80086c0 <__kernel_sin>
 8007914:	e7e0      	b.n	80078d8 <cos+0x58>
 8007916:	bf00      	nop
	...
 8007920:	3fe921fb 	.word	0x3fe921fb
 8007924:	7fefffff 	.word	0x7fefffff

08007928 <fabs>:
 8007928:	ec51 0b10 	vmov	r0, r1, d0
 800792c:	ee10 2a10 	vmov	r2, s0
 8007930:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007934:	ec43 2b10 	vmov	d0, r2, r3
 8007938:	4770      	bx	lr

0800793a <lround>:
 800793a:	b570      	push	{r4, r5, r6, lr}
 800793c:	ec55 4b10 	vmov	r4, r5, d0
 8007940:	1e2b      	subs	r3, r5, #0
 8007942:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007946:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800794a:	bfb4      	ite	lt
 800794c:	f04f 30ff 	movlt.w	r0, #4294967295
 8007950:	2001      	movge	r0, #1
 8007952:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007956:	2e13      	cmp	r6, #19
 8007958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800795c:	dc0f      	bgt.n	800797e <lround+0x44>
 800795e:	2e00      	cmp	r6, #0
 8007960:	da03      	bge.n	800796a <lround+0x30>
 8007962:	3601      	adds	r6, #1
 8007964:	bf18      	it	ne
 8007966:	2000      	movne	r0, #0
 8007968:	bd70      	pop	{r4, r5, r6, pc}
 800796a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800796e:	4132      	asrs	r2, r6
 8007970:	441a      	add	r2, r3
 8007972:	f1c6 0314 	rsb	r3, r6, #20
 8007976:	fa22 f303 	lsr.w	r3, r2, r3
 800797a:	4358      	muls	r0, r3
 800797c:	e7f4      	b.n	8007968 <lround+0x2e>
 800797e:	2e1e      	cmp	r6, #30
 8007980:	d819      	bhi.n	80079b6 <lround+0x7c>
 8007982:	2e33      	cmp	r6, #51	; 0x33
 8007984:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8007988:	dd05      	ble.n	8007996 <lround+0x5c>
 800798a:	f2a2 4233 	subw	r2, r2, #1075	; 0x433
 800798e:	4094      	lsls	r4, r2
 8007990:	408b      	lsls	r3, r1
 8007992:	4323      	orrs	r3, r4
 8007994:	e7f1      	b.n	800797a <lround+0x40>
 8007996:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800799a:	40ca      	lsrs	r2, r1
 800799c:	1912      	adds	r2, r2, r4
 800799e:	bf28      	it	cs
 80079a0:	3301      	addcs	r3, #1
 80079a2:	f1c6 0434 	rsb	r4, r6, #52	; 0x34
 80079a6:	2e14      	cmp	r6, #20
 80079a8:	fa03 f301 	lsl.w	r3, r3, r1
 80079ac:	bf14      	ite	ne
 80079ae:	40e2      	lsrne	r2, r4
 80079b0:	2200      	moveq	r2, #0
 80079b2:	4313      	orrs	r3, r2
 80079b4:	e7e1      	b.n	800797a <lround+0x40>
 80079b6:	ee10 0a10 	vmov	r0, s0
 80079ba:	4629      	mov	r1, r5
 80079bc:	f7f9 f8d4 	bl	8000b68 <__aeabi_d2iz>
 80079c0:	e7d2      	b.n	8007968 <lround+0x2e>
 80079c2:	0000      	movs	r0, r0
 80079c4:	0000      	movs	r0, r0
	...

080079c8 <sin>:
 80079c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079ca:	ec53 2b10 	vmov	r2, r3, d0
 80079ce:	4828      	ldr	r0, [pc, #160]	; (8007a70 <sin+0xa8>)
 80079d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80079d4:	4281      	cmp	r1, r0
 80079d6:	dc07      	bgt.n	80079e8 <sin+0x20>
 80079d8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007a68 <sin+0xa0>
 80079dc:	2000      	movs	r0, #0
 80079de:	b005      	add	sp, #20
 80079e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079e4:	f000 be6c 	b.w	80086c0 <__kernel_sin>
 80079e8:	4822      	ldr	r0, [pc, #136]	; (8007a74 <sin+0xac>)
 80079ea:	4281      	cmp	r1, r0
 80079ec:	dd09      	ble.n	8007a02 <sin+0x3a>
 80079ee:	ee10 0a10 	vmov	r0, s0
 80079f2:	4619      	mov	r1, r3
 80079f4:	f7f8 fc50 	bl	8000298 <__aeabi_dsub>
 80079f8:	ec41 0b10 	vmov	d0, r0, r1
 80079fc:	b005      	add	sp, #20
 80079fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a02:	4668      	mov	r0, sp
 8007a04:	f000 f838 	bl	8007a78 <__ieee754_rem_pio2>
 8007a08:	f000 0003 	and.w	r0, r0, #3
 8007a0c:	2801      	cmp	r0, #1
 8007a0e:	d00c      	beq.n	8007a2a <sin+0x62>
 8007a10:	2802      	cmp	r0, #2
 8007a12:	d011      	beq.n	8007a38 <sin+0x70>
 8007a14:	b9f0      	cbnz	r0, 8007a54 <sin+0x8c>
 8007a16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a1a:	ed9d 0b00 	vldr	d0, [sp]
 8007a1e:	2001      	movs	r0, #1
 8007a20:	f000 fe4e 	bl	80086c0 <__kernel_sin>
 8007a24:	ec51 0b10 	vmov	r0, r1, d0
 8007a28:	e7e6      	b.n	80079f8 <sin+0x30>
 8007a2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a2e:	ed9d 0b00 	vldr	d0, [sp]
 8007a32:	f000 fa2d 	bl	8007e90 <__kernel_cos>
 8007a36:	e7f5      	b.n	8007a24 <sin+0x5c>
 8007a38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a3c:	ed9d 0b00 	vldr	d0, [sp]
 8007a40:	2001      	movs	r0, #1
 8007a42:	f000 fe3d 	bl	80086c0 <__kernel_sin>
 8007a46:	ec53 2b10 	vmov	r2, r3, d0
 8007a4a:	ee10 0a10 	vmov	r0, s0
 8007a4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007a52:	e7d1      	b.n	80079f8 <sin+0x30>
 8007a54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a58:	ed9d 0b00 	vldr	d0, [sp]
 8007a5c:	f000 fa18 	bl	8007e90 <__kernel_cos>
 8007a60:	e7f1      	b.n	8007a46 <sin+0x7e>
 8007a62:	bf00      	nop
 8007a64:	f3af 8000 	nop.w
	...
 8007a70:	3fe921fb 	.word	0x3fe921fb
 8007a74:	7fefffff 	.word	0x7fefffff

08007a78 <__ieee754_rem_pio2>:
 8007a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	ed2d 8b02 	vpush	{d8}
 8007a80:	ec55 4b10 	vmov	r4, r5, d0
 8007a84:	4bca      	ldr	r3, [pc, #808]	; (8007db0 <__ieee754_rem_pio2+0x338>)
 8007a86:	b08b      	sub	sp, #44	; 0x2c
 8007a88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007a8c:	4598      	cmp	r8, r3
 8007a8e:	4682      	mov	sl, r0
 8007a90:	9502      	str	r5, [sp, #8]
 8007a92:	dc08      	bgt.n	8007aa6 <__ieee754_rem_pio2+0x2e>
 8007a94:	2200      	movs	r2, #0
 8007a96:	2300      	movs	r3, #0
 8007a98:	ed80 0b00 	vstr	d0, [r0]
 8007a9c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007aa0:	f04f 0b00 	mov.w	fp, #0
 8007aa4:	e028      	b.n	8007af8 <__ieee754_rem_pio2+0x80>
 8007aa6:	4bc3      	ldr	r3, [pc, #780]	; (8007db4 <__ieee754_rem_pio2+0x33c>)
 8007aa8:	4598      	cmp	r8, r3
 8007aaa:	dc78      	bgt.n	8007b9e <__ieee754_rem_pio2+0x126>
 8007aac:	9b02      	ldr	r3, [sp, #8]
 8007aae:	4ec2      	ldr	r6, [pc, #776]	; (8007db8 <__ieee754_rem_pio2+0x340>)
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	ee10 0a10 	vmov	r0, s0
 8007ab6:	a3b0      	add	r3, pc, #704	; (adr r3, 8007d78 <__ieee754_rem_pio2+0x300>)
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	4629      	mov	r1, r5
 8007abe:	dd39      	ble.n	8007b34 <__ieee754_rem_pio2+0xbc>
 8007ac0:	f7f8 fbea 	bl	8000298 <__aeabi_dsub>
 8007ac4:	45b0      	cmp	r8, r6
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	460d      	mov	r5, r1
 8007aca:	d01b      	beq.n	8007b04 <__ieee754_rem_pio2+0x8c>
 8007acc:	a3ac      	add	r3, pc, #688	; (adr r3, 8007d80 <__ieee754_rem_pio2+0x308>)
 8007ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad2:	f7f8 fbe1 	bl	8000298 <__aeabi_dsub>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	e9ca 2300 	strd	r2, r3, [sl]
 8007ade:	4620      	mov	r0, r4
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	f7f8 fbd9 	bl	8000298 <__aeabi_dsub>
 8007ae6:	a3a6      	add	r3, pc, #664	; (adr r3, 8007d80 <__ieee754_rem_pio2+0x308>)
 8007ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aec:	f7f8 fbd4 	bl	8000298 <__aeabi_dsub>
 8007af0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007af4:	f04f 0b01 	mov.w	fp, #1
 8007af8:	4658      	mov	r0, fp
 8007afa:	b00b      	add	sp, #44	; 0x2c
 8007afc:	ecbd 8b02 	vpop	{d8}
 8007b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b04:	a3a0      	add	r3, pc, #640	; (adr r3, 8007d88 <__ieee754_rem_pio2+0x310>)
 8007b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0a:	f7f8 fbc5 	bl	8000298 <__aeabi_dsub>
 8007b0e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007d90 <__ieee754_rem_pio2+0x318>)
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	4604      	mov	r4, r0
 8007b16:	460d      	mov	r5, r1
 8007b18:	f7f8 fbbe 	bl	8000298 <__aeabi_dsub>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	e9ca 2300 	strd	r2, r3, [sl]
 8007b24:	4620      	mov	r0, r4
 8007b26:	4629      	mov	r1, r5
 8007b28:	f7f8 fbb6 	bl	8000298 <__aeabi_dsub>
 8007b2c:	a398      	add	r3, pc, #608	; (adr r3, 8007d90 <__ieee754_rem_pio2+0x318>)
 8007b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b32:	e7db      	b.n	8007aec <__ieee754_rem_pio2+0x74>
 8007b34:	f7f8 fbb2 	bl	800029c <__adddf3>
 8007b38:	45b0      	cmp	r8, r6
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	460d      	mov	r5, r1
 8007b3e:	d016      	beq.n	8007b6e <__ieee754_rem_pio2+0xf6>
 8007b40:	a38f      	add	r3, pc, #572	; (adr r3, 8007d80 <__ieee754_rem_pio2+0x308>)
 8007b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b46:	f7f8 fba9 	bl	800029c <__adddf3>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	e9ca 2300 	strd	r2, r3, [sl]
 8007b52:	4620      	mov	r0, r4
 8007b54:	4629      	mov	r1, r5
 8007b56:	f7f8 fb9f 	bl	8000298 <__aeabi_dsub>
 8007b5a:	a389      	add	r3, pc, #548	; (adr r3, 8007d80 <__ieee754_rem_pio2+0x308>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f7f8 fb9c 	bl	800029c <__adddf3>
 8007b64:	f04f 3bff 	mov.w	fp, #4294967295
 8007b68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007b6c:	e7c4      	b.n	8007af8 <__ieee754_rem_pio2+0x80>
 8007b6e:	a386      	add	r3, pc, #536	; (adr r3, 8007d88 <__ieee754_rem_pio2+0x310>)
 8007b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b74:	f7f8 fb92 	bl	800029c <__adddf3>
 8007b78:	a385      	add	r3, pc, #532	; (adr r3, 8007d90 <__ieee754_rem_pio2+0x318>)
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	4604      	mov	r4, r0
 8007b80:	460d      	mov	r5, r1
 8007b82:	f7f8 fb8b 	bl	800029c <__adddf3>
 8007b86:	4602      	mov	r2, r0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	e9ca 2300 	strd	r2, r3, [sl]
 8007b8e:	4620      	mov	r0, r4
 8007b90:	4629      	mov	r1, r5
 8007b92:	f7f8 fb81 	bl	8000298 <__aeabi_dsub>
 8007b96:	a37e      	add	r3, pc, #504	; (adr r3, 8007d90 <__ieee754_rem_pio2+0x318>)
 8007b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9c:	e7e0      	b.n	8007b60 <__ieee754_rem_pio2+0xe8>
 8007b9e:	4b87      	ldr	r3, [pc, #540]	; (8007dbc <__ieee754_rem_pio2+0x344>)
 8007ba0:	4598      	cmp	r8, r3
 8007ba2:	f300 80d9 	bgt.w	8007d58 <__ieee754_rem_pio2+0x2e0>
 8007ba6:	f7ff febf 	bl	8007928 <fabs>
 8007baa:	ec55 4b10 	vmov	r4, r5, d0
 8007bae:	ee10 0a10 	vmov	r0, s0
 8007bb2:	a379      	add	r3, pc, #484	; (adr r3, 8007d98 <__ieee754_rem_pio2+0x320>)
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	4629      	mov	r1, r5
 8007bba:	f7f8 fd25 	bl	8000608 <__aeabi_dmul>
 8007bbe:	4b80      	ldr	r3, [pc, #512]	; (8007dc0 <__ieee754_rem_pio2+0x348>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f7f8 fb6b 	bl	800029c <__adddf3>
 8007bc6:	f7f8 ffcf 	bl	8000b68 <__aeabi_d2iz>
 8007bca:	4683      	mov	fp, r0
 8007bcc:	f7f8 fcb2 	bl	8000534 <__aeabi_i2d>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	ec43 2b18 	vmov	d8, r2, r3
 8007bd8:	a367      	add	r3, pc, #412	; (adr r3, 8007d78 <__ieee754_rem_pio2+0x300>)
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	f7f8 fd13 	bl	8000608 <__aeabi_dmul>
 8007be2:	4602      	mov	r2, r0
 8007be4:	460b      	mov	r3, r1
 8007be6:	4620      	mov	r0, r4
 8007be8:	4629      	mov	r1, r5
 8007bea:	f7f8 fb55 	bl	8000298 <__aeabi_dsub>
 8007bee:	a364      	add	r3, pc, #400	; (adr r3, 8007d80 <__ieee754_rem_pio2+0x308>)
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	4606      	mov	r6, r0
 8007bf6:	460f      	mov	r7, r1
 8007bf8:	ec51 0b18 	vmov	r0, r1, d8
 8007bfc:	f7f8 fd04 	bl	8000608 <__aeabi_dmul>
 8007c00:	f1bb 0f1f 	cmp.w	fp, #31
 8007c04:	4604      	mov	r4, r0
 8007c06:	460d      	mov	r5, r1
 8007c08:	dc0d      	bgt.n	8007c26 <__ieee754_rem_pio2+0x1ae>
 8007c0a:	4b6e      	ldr	r3, [pc, #440]	; (8007dc4 <__ieee754_rem_pio2+0x34c>)
 8007c0c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c14:	4543      	cmp	r3, r8
 8007c16:	d006      	beq.n	8007c26 <__ieee754_rem_pio2+0x1ae>
 8007c18:	4622      	mov	r2, r4
 8007c1a:	462b      	mov	r3, r5
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	4639      	mov	r1, r7
 8007c20:	f7f8 fb3a 	bl	8000298 <__aeabi_dsub>
 8007c24:	e00f      	b.n	8007c46 <__ieee754_rem_pio2+0x1ce>
 8007c26:	462b      	mov	r3, r5
 8007c28:	4622      	mov	r2, r4
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	4639      	mov	r1, r7
 8007c2e:	f7f8 fb33 	bl	8000298 <__aeabi_dsub>
 8007c32:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007c36:	9303      	str	r3, [sp, #12]
 8007c38:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007c3c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007c40:	f1b8 0f10 	cmp.w	r8, #16
 8007c44:	dc02      	bgt.n	8007c4c <__ieee754_rem_pio2+0x1d4>
 8007c46:	e9ca 0100 	strd	r0, r1, [sl]
 8007c4a:	e039      	b.n	8007cc0 <__ieee754_rem_pio2+0x248>
 8007c4c:	a34e      	add	r3, pc, #312	; (adr r3, 8007d88 <__ieee754_rem_pio2+0x310>)
 8007c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c52:	ec51 0b18 	vmov	r0, r1, d8
 8007c56:	f7f8 fcd7 	bl	8000608 <__aeabi_dmul>
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	460d      	mov	r5, r1
 8007c5e:	4602      	mov	r2, r0
 8007c60:	460b      	mov	r3, r1
 8007c62:	4630      	mov	r0, r6
 8007c64:	4639      	mov	r1, r7
 8007c66:	f7f8 fb17 	bl	8000298 <__aeabi_dsub>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	4680      	mov	r8, r0
 8007c70:	4689      	mov	r9, r1
 8007c72:	4630      	mov	r0, r6
 8007c74:	4639      	mov	r1, r7
 8007c76:	f7f8 fb0f 	bl	8000298 <__aeabi_dsub>
 8007c7a:	4622      	mov	r2, r4
 8007c7c:	462b      	mov	r3, r5
 8007c7e:	f7f8 fb0b 	bl	8000298 <__aeabi_dsub>
 8007c82:	a343      	add	r3, pc, #268	; (adr r3, 8007d90 <__ieee754_rem_pio2+0x318>)
 8007c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c88:	4604      	mov	r4, r0
 8007c8a:	460d      	mov	r5, r1
 8007c8c:	ec51 0b18 	vmov	r0, r1, d8
 8007c90:	f7f8 fcba 	bl	8000608 <__aeabi_dmul>
 8007c94:	4622      	mov	r2, r4
 8007c96:	462b      	mov	r3, r5
 8007c98:	f7f8 fafe 	bl	8000298 <__aeabi_dsub>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	460d      	mov	r5, r1
 8007ca4:	4640      	mov	r0, r8
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	f7f8 faf6 	bl	8000298 <__aeabi_dsub>
 8007cac:	9a03      	ldr	r2, [sp, #12]
 8007cae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	2b31      	cmp	r3, #49	; 0x31
 8007cb6:	dc24      	bgt.n	8007d02 <__ieee754_rem_pio2+0x28a>
 8007cb8:	e9ca 0100 	strd	r0, r1, [sl]
 8007cbc:	4646      	mov	r6, r8
 8007cbe:	464f      	mov	r7, r9
 8007cc0:	e9da 8900 	ldrd	r8, r9, [sl]
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	4642      	mov	r2, r8
 8007cc8:	464b      	mov	r3, r9
 8007cca:	4639      	mov	r1, r7
 8007ccc:	f7f8 fae4 	bl	8000298 <__aeabi_dsub>
 8007cd0:	462b      	mov	r3, r5
 8007cd2:	4622      	mov	r2, r4
 8007cd4:	f7f8 fae0 	bl	8000298 <__aeabi_dsub>
 8007cd8:	9b02      	ldr	r3, [sp, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007ce0:	f6bf af0a 	bge.w	8007af8 <__ieee754_rem_pio2+0x80>
 8007ce4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007ce8:	f8ca 3004 	str.w	r3, [sl, #4]
 8007cec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cf0:	f8ca 8000 	str.w	r8, [sl]
 8007cf4:	f8ca 0008 	str.w	r0, [sl, #8]
 8007cf8:	f8ca 300c 	str.w	r3, [sl, #12]
 8007cfc:	f1cb 0b00 	rsb	fp, fp, #0
 8007d00:	e6fa      	b.n	8007af8 <__ieee754_rem_pio2+0x80>
 8007d02:	a327      	add	r3, pc, #156	; (adr r3, 8007da0 <__ieee754_rem_pio2+0x328>)
 8007d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d08:	ec51 0b18 	vmov	r0, r1, d8
 8007d0c:	f7f8 fc7c 	bl	8000608 <__aeabi_dmul>
 8007d10:	4604      	mov	r4, r0
 8007d12:	460d      	mov	r5, r1
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4640      	mov	r0, r8
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	f7f8 fabc 	bl	8000298 <__aeabi_dsub>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4606      	mov	r6, r0
 8007d26:	460f      	mov	r7, r1
 8007d28:	4640      	mov	r0, r8
 8007d2a:	4649      	mov	r1, r9
 8007d2c:	f7f8 fab4 	bl	8000298 <__aeabi_dsub>
 8007d30:	4622      	mov	r2, r4
 8007d32:	462b      	mov	r3, r5
 8007d34:	f7f8 fab0 	bl	8000298 <__aeabi_dsub>
 8007d38:	a31b      	add	r3, pc, #108	; (adr r3, 8007da8 <__ieee754_rem_pio2+0x330>)
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3e:	4604      	mov	r4, r0
 8007d40:	460d      	mov	r5, r1
 8007d42:	ec51 0b18 	vmov	r0, r1, d8
 8007d46:	f7f8 fc5f 	bl	8000608 <__aeabi_dmul>
 8007d4a:	4622      	mov	r2, r4
 8007d4c:	462b      	mov	r3, r5
 8007d4e:	f7f8 faa3 	bl	8000298 <__aeabi_dsub>
 8007d52:	4604      	mov	r4, r0
 8007d54:	460d      	mov	r5, r1
 8007d56:	e75f      	b.n	8007c18 <__ieee754_rem_pio2+0x1a0>
 8007d58:	4b1b      	ldr	r3, [pc, #108]	; (8007dc8 <__ieee754_rem_pio2+0x350>)
 8007d5a:	4598      	cmp	r8, r3
 8007d5c:	dd36      	ble.n	8007dcc <__ieee754_rem_pio2+0x354>
 8007d5e:	ee10 2a10 	vmov	r2, s0
 8007d62:	462b      	mov	r3, r5
 8007d64:	4620      	mov	r0, r4
 8007d66:	4629      	mov	r1, r5
 8007d68:	f7f8 fa96 	bl	8000298 <__aeabi_dsub>
 8007d6c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007d70:	e9ca 0100 	strd	r0, r1, [sl]
 8007d74:	e694      	b.n	8007aa0 <__ieee754_rem_pio2+0x28>
 8007d76:	bf00      	nop
 8007d78:	54400000 	.word	0x54400000
 8007d7c:	3ff921fb 	.word	0x3ff921fb
 8007d80:	1a626331 	.word	0x1a626331
 8007d84:	3dd0b461 	.word	0x3dd0b461
 8007d88:	1a600000 	.word	0x1a600000
 8007d8c:	3dd0b461 	.word	0x3dd0b461
 8007d90:	2e037073 	.word	0x2e037073
 8007d94:	3ba3198a 	.word	0x3ba3198a
 8007d98:	6dc9c883 	.word	0x6dc9c883
 8007d9c:	3fe45f30 	.word	0x3fe45f30
 8007da0:	2e000000 	.word	0x2e000000
 8007da4:	3ba3198a 	.word	0x3ba3198a
 8007da8:	252049c1 	.word	0x252049c1
 8007dac:	397b839a 	.word	0x397b839a
 8007db0:	3fe921fb 	.word	0x3fe921fb
 8007db4:	4002d97b 	.word	0x4002d97b
 8007db8:	3ff921fb 	.word	0x3ff921fb
 8007dbc:	413921fb 	.word	0x413921fb
 8007dc0:	3fe00000 	.word	0x3fe00000
 8007dc4:	080094c8 	.word	0x080094c8
 8007dc8:	7fefffff 	.word	0x7fefffff
 8007dcc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007dd0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007dd4:	ee10 0a10 	vmov	r0, s0
 8007dd8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007ddc:	ee10 6a10 	vmov	r6, s0
 8007de0:	460f      	mov	r7, r1
 8007de2:	f7f8 fec1 	bl	8000b68 <__aeabi_d2iz>
 8007de6:	f7f8 fba5 	bl	8000534 <__aeabi_i2d>
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	4630      	mov	r0, r6
 8007df0:	4639      	mov	r1, r7
 8007df2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007df6:	f7f8 fa4f 	bl	8000298 <__aeabi_dsub>
 8007dfa:	4b23      	ldr	r3, [pc, #140]	; (8007e88 <__ieee754_rem_pio2+0x410>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f7f8 fc03 	bl	8000608 <__aeabi_dmul>
 8007e02:	460f      	mov	r7, r1
 8007e04:	4606      	mov	r6, r0
 8007e06:	f7f8 feaf 	bl	8000b68 <__aeabi_d2iz>
 8007e0a:	f7f8 fb93 	bl	8000534 <__aeabi_i2d>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	4630      	mov	r0, r6
 8007e14:	4639      	mov	r1, r7
 8007e16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e1a:	f7f8 fa3d 	bl	8000298 <__aeabi_dsub>
 8007e1e:	4b1a      	ldr	r3, [pc, #104]	; (8007e88 <__ieee754_rem_pio2+0x410>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	f7f8 fbf1 	bl	8000608 <__aeabi_dmul>
 8007e26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e2a:	ad04      	add	r5, sp, #16
 8007e2c:	f04f 0803 	mov.w	r8, #3
 8007e30:	46a9      	mov	r9, r5
 8007e32:	2600      	movs	r6, #0
 8007e34:	2700      	movs	r7, #0
 8007e36:	4632      	mov	r2, r6
 8007e38:	463b      	mov	r3, r7
 8007e3a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007e3e:	46c3      	mov	fp, r8
 8007e40:	3d08      	subs	r5, #8
 8007e42:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e46:	f7f8 fe47 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	d1f3      	bne.n	8007e36 <__ieee754_rem_pio2+0x3be>
 8007e4e:	4b0f      	ldr	r3, [pc, #60]	; (8007e8c <__ieee754_rem_pio2+0x414>)
 8007e50:	9301      	str	r3, [sp, #4]
 8007e52:	2302      	movs	r3, #2
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	4622      	mov	r2, r4
 8007e58:	465b      	mov	r3, fp
 8007e5a:	4651      	mov	r1, sl
 8007e5c:	4648      	mov	r0, r9
 8007e5e:	f000 f8df 	bl	8008020 <__kernel_rem_pio2>
 8007e62:	9b02      	ldr	r3, [sp, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	4683      	mov	fp, r0
 8007e68:	f6bf ae46 	bge.w	8007af8 <__ieee754_rem_pio2+0x80>
 8007e6c:	e9da 2100 	ldrd	r2, r1, [sl]
 8007e70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e74:	e9ca 2300 	strd	r2, r3, [sl]
 8007e78:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007e7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e80:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007e84:	e73a      	b.n	8007cfc <__ieee754_rem_pio2+0x284>
 8007e86:	bf00      	nop
 8007e88:	41700000 	.word	0x41700000
 8007e8c:	08009548 	.word	0x08009548

08007e90 <__kernel_cos>:
 8007e90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	ec57 6b10 	vmov	r6, r7, d0
 8007e98:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007e9c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007ea0:	ed8d 1b00 	vstr	d1, [sp]
 8007ea4:	da07      	bge.n	8007eb6 <__kernel_cos+0x26>
 8007ea6:	ee10 0a10 	vmov	r0, s0
 8007eaa:	4639      	mov	r1, r7
 8007eac:	f7f8 fe5c 	bl	8000b68 <__aeabi_d2iz>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	f000 8088 	beq.w	8007fc6 <__kernel_cos+0x136>
 8007eb6:	4632      	mov	r2, r6
 8007eb8:	463b      	mov	r3, r7
 8007eba:	4630      	mov	r0, r6
 8007ebc:	4639      	mov	r1, r7
 8007ebe:	f7f8 fba3 	bl	8000608 <__aeabi_dmul>
 8007ec2:	4b51      	ldr	r3, [pc, #324]	; (8008008 <__kernel_cos+0x178>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	460d      	mov	r5, r1
 8007eca:	f7f8 fb9d 	bl	8000608 <__aeabi_dmul>
 8007ece:	a340      	add	r3, pc, #256	; (adr r3, 8007fd0 <__kernel_cos+0x140>)
 8007ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed4:	4682      	mov	sl, r0
 8007ed6:	468b      	mov	fp, r1
 8007ed8:	4620      	mov	r0, r4
 8007eda:	4629      	mov	r1, r5
 8007edc:	f7f8 fb94 	bl	8000608 <__aeabi_dmul>
 8007ee0:	a33d      	add	r3, pc, #244	; (adr r3, 8007fd8 <__kernel_cos+0x148>)
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	f7f8 f9d9 	bl	800029c <__adddf3>
 8007eea:	4622      	mov	r2, r4
 8007eec:	462b      	mov	r3, r5
 8007eee:	f7f8 fb8b 	bl	8000608 <__aeabi_dmul>
 8007ef2:	a33b      	add	r3, pc, #236	; (adr r3, 8007fe0 <__kernel_cos+0x150>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f7f8 f9ce 	bl	8000298 <__aeabi_dsub>
 8007efc:	4622      	mov	r2, r4
 8007efe:	462b      	mov	r3, r5
 8007f00:	f7f8 fb82 	bl	8000608 <__aeabi_dmul>
 8007f04:	a338      	add	r3, pc, #224	; (adr r3, 8007fe8 <__kernel_cos+0x158>)
 8007f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0a:	f7f8 f9c7 	bl	800029c <__adddf3>
 8007f0e:	4622      	mov	r2, r4
 8007f10:	462b      	mov	r3, r5
 8007f12:	f7f8 fb79 	bl	8000608 <__aeabi_dmul>
 8007f16:	a336      	add	r3, pc, #216	; (adr r3, 8007ff0 <__kernel_cos+0x160>)
 8007f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1c:	f7f8 f9bc 	bl	8000298 <__aeabi_dsub>
 8007f20:	4622      	mov	r2, r4
 8007f22:	462b      	mov	r3, r5
 8007f24:	f7f8 fb70 	bl	8000608 <__aeabi_dmul>
 8007f28:	a333      	add	r3, pc, #204	; (adr r3, 8007ff8 <__kernel_cos+0x168>)
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	f7f8 f9b5 	bl	800029c <__adddf3>
 8007f32:	4622      	mov	r2, r4
 8007f34:	462b      	mov	r3, r5
 8007f36:	f7f8 fb67 	bl	8000608 <__aeabi_dmul>
 8007f3a:	4622      	mov	r2, r4
 8007f3c:	462b      	mov	r3, r5
 8007f3e:	f7f8 fb63 	bl	8000608 <__aeabi_dmul>
 8007f42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f46:	4604      	mov	r4, r0
 8007f48:	460d      	mov	r5, r1
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	f7f8 fb5b 	bl	8000608 <__aeabi_dmul>
 8007f52:	460b      	mov	r3, r1
 8007f54:	4602      	mov	r2, r0
 8007f56:	4629      	mov	r1, r5
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f7f8 f99d 	bl	8000298 <__aeabi_dsub>
 8007f5e:	4b2b      	ldr	r3, [pc, #172]	; (800800c <__kernel_cos+0x17c>)
 8007f60:	4598      	cmp	r8, r3
 8007f62:	4606      	mov	r6, r0
 8007f64:	460f      	mov	r7, r1
 8007f66:	dc10      	bgt.n	8007f8a <__kernel_cos+0xfa>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4650      	mov	r0, sl
 8007f6e:	4659      	mov	r1, fp
 8007f70:	f7f8 f992 	bl	8000298 <__aeabi_dsub>
 8007f74:	460b      	mov	r3, r1
 8007f76:	4926      	ldr	r1, [pc, #152]	; (8008010 <__kernel_cos+0x180>)
 8007f78:	4602      	mov	r2, r0
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	f7f8 f98c 	bl	8000298 <__aeabi_dsub>
 8007f80:	ec41 0b10 	vmov	d0, r0, r1
 8007f84:	b003      	add	sp, #12
 8007f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8a:	4b22      	ldr	r3, [pc, #136]	; (8008014 <__kernel_cos+0x184>)
 8007f8c:	4920      	ldr	r1, [pc, #128]	; (8008010 <__kernel_cos+0x180>)
 8007f8e:	4598      	cmp	r8, r3
 8007f90:	bfcc      	ite	gt
 8007f92:	4d21      	ldrgt	r5, [pc, #132]	; (8008018 <__kernel_cos+0x188>)
 8007f94:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007f98:	2400      	movs	r4, #0
 8007f9a:	4622      	mov	r2, r4
 8007f9c:	462b      	mov	r3, r5
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	f7f8 f97a 	bl	8000298 <__aeabi_dsub>
 8007fa4:	4622      	mov	r2, r4
 8007fa6:	4680      	mov	r8, r0
 8007fa8:	4689      	mov	r9, r1
 8007faa:	462b      	mov	r3, r5
 8007fac:	4650      	mov	r0, sl
 8007fae:	4659      	mov	r1, fp
 8007fb0:	f7f8 f972 	bl	8000298 <__aeabi_dsub>
 8007fb4:	4632      	mov	r2, r6
 8007fb6:	463b      	mov	r3, r7
 8007fb8:	f7f8 f96e 	bl	8000298 <__aeabi_dsub>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	4640      	mov	r0, r8
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	e7da      	b.n	8007f7c <__kernel_cos+0xec>
 8007fc6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008000 <__kernel_cos+0x170>
 8007fca:	e7db      	b.n	8007f84 <__kernel_cos+0xf4>
 8007fcc:	f3af 8000 	nop.w
 8007fd0:	be8838d4 	.word	0xbe8838d4
 8007fd4:	bda8fae9 	.word	0xbda8fae9
 8007fd8:	bdb4b1c4 	.word	0xbdb4b1c4
 8007fdc:	3e21ee9e 	.word	0x3e21ee9e
 8007fe0:	809c52ad 	.word	0x809c52ad
 8007fe4:	3e927e4f 	.word	0x3e927e4f
 8007fe8:	19cb1590 	.word	0x19cb1590
 8007fec:	3efa01a0 	.word	0x3efa01a0
 8007ff0:	16c15177 	.word	0x16c15177
 8007ff4:	3f56c16c 	.word	0x3f56c16c
 8007ff8:	5555554c 	.word	0x5555554c
 8007ffc:	3fa55555 	.word	0x3fa55555
 8008000:	00000000 	.word	0x00000000
 8008004:	3ff00000 	.word	0x3ff00000
 8008008:	3fe00000 	.word	0x3fe00000
 800800c:	3fd33332 	.word	0x3fd33332
 8008010:	3ff00000 	.word	0x3ff00000
 8008014:	3fe90000 	.word	0x3fe90000
 8008018:	3fd20000 	.word	0x3fd20000
 800801c:	00000000 	.word	0x00000000

08008020 <__kernel_rem_pio2>:
 8008020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008024:	ed2d 8b02 	vpush	{d8}
 8008028:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800802c:	f112 0f14 	cmn.w	r2, #20
 8008030:	9308      	str	r3, [sp, #32]
 8008032:	9101      	str	r1, [sp, #4]
 8008034:	4bc4      	ldr	r3, [pc, #784]	; (8008348 <__kernel_rem_pio2+0x328>)
 8008036:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008038:	900b      	str	r0, [sp, #44]	; 0x2c
 800803a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800803e:	9302      	str	r3, [sp, #8]
 8008040:	9b08      	ldr	r3, [sp, #32]
 8008042:	f103 33ff 	add.w	r3, r3, #4294967295
 8008046:	bfa8      	it	ge
 8008048:	1ed4      	subge	r4, r2, #3
 800804a:	9306      	str	r3, [sp, #24]
 800804c:	bfb2      	itee	lt
 800804e:	2400      	movlt	r4, #0
 8008050:	2318      	movge	r3, #24
 8008052:	fb94 f4f3 	sdivge	r4, r4, r3
 8008056:	f06f 0317 	mvn.w	r3, #23
 800805a:	fb04 3303 	mla	r3, r4, r3, r3
 800805e:	eb03 0a02 	add.w	sl, r3, r2
 8008062:	9b02      	ldr	r3, [sp, #8]
 8008064:	9a06      	ldr	r2, [sp, #24]
 8008066:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008338 <__kernel_rem_pio2+0x318>
 800806a:	eb03 0802 	add.w	r8, r3, r2
 800806e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008070:	1aa7      	subs	r7, r4, r2
 8008072:	ae22      	add	r6, sp, #136	; 0x88
 8008074:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008078:	2500      	movs	r5, #0
 800807a:	4545      	cmp	r5, r8
 800807c:	dd13      	ble.n	80080a6 <__kernel_rem_pio2+0x86>
 800807e:	9b08      	ldr	r3, [sp, #32]
 8008080:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008338 <__kernel_rem_pio2+0x318>
 8008084:	aa22      	add	r2, sp, #136	; 0x88
 8008086:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800808a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800808e:	f04f 0800 	mov.w	r8, #0
 8008092:	9b02      	ldr	r3, [sp, #8]
 8008094:	4598      	cmp	r8, r3
 8008096:	dc2f      	bgt.n	80080f8 <__kernel_rem_pio2+0xd8>
 8008098:	ed8d 8b04 	vstr	d8, [sp, #16]
 800809c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80080a0:	462f      	mov	r7, r5
 80080a2:	2600      	movs	r6, #0
 80080a4:	e01b      	b.n	80080de <__kernel_rem_pio2+0xbe>
 80080a6:	42ef      	cmn	r7, r5
 80080a8:	d407      	bmi.n	80080ba <__kernel_rem_pio2+0x9a>
 80080aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80080ae:	f7f8 fa41 	bl	8000534 <__aeabi_i2d>
 80080b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80080b6:	3501      	adds	r5, #1
 80080b8:	e7df      	b.n	800807a <__kernel_rem_pio2+0x5a>
 80080ba:	ec51 0b18 	vmov	r0, r1, d8
 80080be:	e7f8      	b.n	80080b2 <__kernel_rem_pio2+0x92>
 80080c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80080c8:	f7f8 fa9e 	bl	8000608 <__aeabi_dmul>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080d4:	f7f8 f8e2 	bl	800029c <__adddf3>
 80080d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080dc:	3601      	adds	r6, #1
 80080de:	9b06      	ldr	r3, [sp, #24]
 80080e0:	429e      	cmp	r6, r3
 80080e2:	f1a7 0708 	sub.w	r7, r7, #8
 80080e6:	ddeb      	ble.n	80080c0 <__kernel_rem_pio2+0xa0>
 80080e8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80080ec:	f108 0801 	add.w	r8, r8, #1
 80080f0:	ecab 7b02 	vstmia	fp!, {d7}
 80080f4:	3508      	adds	r5, #8
 80080f6:	e7cc      	b.n	8008092 <__kernel_rem_pio2+0x72>
 80080f8:	9b02      	ldr	r3, [sp, #8]
 80080fa:	aa0e      	add	r2, sp, #56	; 0x38
 80080fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008100:	930d      	str	r3, [sp, #52]	; 0x34
 8008102:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008104:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008108:	9c02      	ldr	r4, [sp, #8]
 800810a:	930c      	str	r3, [sp, #48]	; 0x30
 800810c:	00e3      	lsls	r3, r4, #3
 800810e:	930a      	str	r3, [sp, #40]	; 0x28
 8008110:	ab9a      	add	r3, sp, #616	; 0x268
 8008112:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008116:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800811a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800811e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008120:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008124:	46c3      	mov	fp, r8
 8008126:	46a1      	mov	r9, r4
 8008128:	f1b9 0f00 	cmp.w	r9, #0
 800812c:	f1a5 0508 	sub.w	r5, r5, #8
 8008130:	dc77      	bgt.n	8008222 <__kernel_rem_pio2+0x202>
 8008132:	ec47 6b10 	vmov	d0, r6, r7
 8008136:	4650      	mov	r0, sl
 8008138:	f000 fc02 	bl	8008940 <scalbn>
 800813c:	ec57 6b10 	vmov	r6, r7, d0
 8008140:	2200      	movs	r2, #0
 8008142:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008146:	ee10 0a10 	vmov	r0, s0
 800814a:	4639      	mov	r1, r7
 800814c:	f7f8 fa5c 	bl	8000608 <__aeabi_dmul>
 8008150:	ec41 0b10 	vmov	d0, r0, r1
 8008154:	f000 fb74 	bl	8008840 <floor>
 8008158:	4b7c      	ldr	r3, [pc, #496]	; (800834c <__kernel_rem_pio2+0x32c>)
 800815a:	ec51 0b10 	vmov	r0, r1, d0
 800815e:	2200      	movs	r2, #0
 8008160:	f7f8 fa52 	bl	8000608 <__aeabi_dmul>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	4630      	mov	r0, r6
 800816a:	4639      	mov	r1, r7
 800816c:	f7f8 f894 	bl	8000298 <__aeabi_dsub>
 8008170:	460f      	mov	r7, r1
 8008172:	4606      	mov	r6, r0
 8008174:	f7f8 fcf8 	bl	8000b68 <__aeabi_d2iz>
 8008178:	9004      	str	r0, [sp, #16]
 800817a:	f7f8 f9db 	bl	8000534 <__aeabi_i2d>
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	4630      	mov	r0, r6
 8008184:	4639      	mov	r1, r7
 8008186:	f7f8 f887 	bl	8000298 <__aeabi_dsub>
 800818a:	f1ba 0f00 	cmp.w	sl, #0
 800818e:	4606      	mov	r6, r0
 8008190:	460f      	mov	r7, r1
 8008192:	dd6d      	ble.n	8008270 <__kernel_rem_pio2+0x250>
 8008194:	1e62      	subs	r2, r4, #1
 8008196:	ab0e      	add	r3, sp, #56	; 0x38
 8008198:	9d04      	ldr	r5, [sp, #16]
 800819a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800819e:	f1ca 0118 	rsb	r1, sl, #24
 80081a2:	fa40 f301 	asr.w	r3, r0, r1
 80081a6:	441d      	add	r5, r3
 80081a8:	408b      	lsls	r3, r1
 80081aa:	1ac0      	subs	r0, r0, r3
 80081ac:	ab0e      	add	r3, sp, #56	; 0x38
 80081ae:	9504      	str	r5, [sp, #16]
 80081b0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80081b4:	f1ca 0317 	rsb	r3, sl, #23
 80081b8:	fa40 fb03 	asr.w	fp, r0, r3
 80081bc:	f1bb 0f00 	cmp.w	fp, #0
 80081c0:	dd65      	ble.n	800828e <__kernel_rem_pio2+0x26e>
 80081c2:	9b04      	ldr	r3, [sp, #16]
 80081c4:	2200      	movs	r2, #0
 80081c6:	3301      	adds	r3, #1
 80081c8:	9304      	str	r3, [sp, #16]
 80081ca:	4615      	mov	r5, r2
 80081cc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80081d0:	4294      	cmp	r4, r2
 80081d2:	f300 809c 	bgt.w	800830e <__kernel_rem_pio2+0x2ee>
 80081d6:	f1ba 0f00 	cmp.w	sl, #0
 80081da:	dd07      	ble.n	80081ec <__kernel_rem_pio2+0x1cc>
 80081dc:	f1ba 0f01 	cmp.w	sl, #1
 80081e0:	f000 80c0 	beq.w	8008364 <__kernel_rem_pio2+0x344>
 80081e4:	f1ba 0f02 	cmp.w	sl, #2
 80081e8:	f000 80c6 	beq.w	8008378 <__kernel_rem_pio2+0x358>
 80081ec:	f1bb 0f02 	cmp.w	fp, #2
 80081f0:	d14d      	bne.n	800828e <__kernel_rem_pio2+0x26e>
 80081f2:	4632      	mov	r2, r6
 80081f4:	463b      	mov	r3, r7
 80081f6:	4956      	ldr	r1, [pc, #344]	; (8008350 <__kernel_rem_pio2+0x330>)
 80081f8:	2000      	movs	r0, #0
 80081fa:	f7f8 f84d 	bl	8000298 <__aeabi_dsub>
 80081fe:	4606      	mov	r6, r0
 8008200:	460f      	mov	r7, r1
 8008202:	2d00      	cmp	r5, #0
 8008204:	d043      	beq.n	800828e <__kernel_rem_pio2+0x26e>
 8008206:	4650      	mov	r0, sl
 8008208:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008340 <__kernel_rem_pio2+0x320>
 800820c:	f000 fb98 	bl	8008940 <scalbn>
 8008210:	4630      	mov	r0, r6
 8008212:	4639      	mov	r1, r7
 8008214:	ec53 2b10 	vmov	r2, r3, d0
 8008218:	f7f8 f83e 	bl	8000298 <__aeabi_dsub>
 800821c:	4606      	mov	r6, r0
 800821e:	460f      	mov	r7, r1
 8008220:	e035      	b.n	800828e <__kernel_rem_pio2+0x26e>
 8008222:	4b4c      	ldr	r3, [pc, #304]	; (8008354 <__kernel_rem_pio2+0x334>)
 8008224:	2200      	movs	r2, #0
 8008226:	4630      	mov	r0, r6
 8008228:	4639      	mov	r1, r7
 800822a:	f7f8 f9ed 	bl	8000608 <__aeabi_dmul>
 800822e:	f7f8 fc9b 	bl	8000b68 <__aeabi_d2iz>
 8008232:	f7f8 f97f 	bl	8000534 <__aeabi_i2d>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	ec43 2b18 	vmov	d8, r2, r3
 800823e:	4b46      	ldr	r3, [pc, #280]	; (8008358 <__kernel_rem_pio2+0x338>)
 8008240:	2200      	movs	r2, #0
 8008242:	f7f8 f9e1 	bl	8000608 <__aeabi_dmul>
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	4630      	mov	r0, r6
 800824c:	4639      	mov	r1, r7
 800824e:	f7f8 f823 	bl	8000298 <__aeabi_dsub>
 8008252:	f7f8 fc89 	bl	8000b68 <__aeabi_d2iz>
 8008256:	e9d5 2300 	ldrd	r2, r3, [r5]
 800825a:	f84b 0b04 	str.w	r0, [fp], #4
 800825e:	ec51 0b18 	vmov	r0, r1, d8
 8008262:	f7f8 f81b 	bl	800029c <__adddf3>
 8008266:	f109 39ff 	add.w	r9, r9, #4294967295
 800826a:	4606      	mov	r6, r0
 800826c:	460f      	mov	r7, r1
 800826e:	e75b      	b.n	8008128 <__kernel_rem_pio2+0x108>
 8008270:	d106      	bne.n	8008280 <__kernel_rem_pio2+0x260>
 8008272:	1e63      	subs	r3, r4, #1
 8008274:	aa0e      	add	r2, sp, #56	; 0x38
 8008276:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800827a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800827e:	e79d      	b.n	80081bc <__kernel_rem_pio2+0x19c>
 8008280:	4b36      	ldr	r3, [pc, #216]	; (800835c <__kernel_rem_pio2+0x33c>)
 8008282:	2200      	movs	r2, #0
 8008284:	f7f8 fc46 	bl	8000b14 <__aeabi_dcmpge>
 8008288:	2800      	cmp	r0, #0
 800828a:	d13d      	bne.n	8008308 <__kernel_rem_pio2+0x2e8>
 800828c:	4683      	mov	fp, r0
 800828e:	2200      	movs	r2, #0
 8008290:	2300      	movs	r3, #0
 8008292:	4630      	mov	r0, r6
 8008294:	4639      	mov	r1, r7
 8008296:	f7f8 fc1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800829a:	2800      	cmp	r0, #0
 800829c:	f000 80c0 	beq.w	8008420 <__kernel_rem_pio2+0x400>
 80082a0:	1e65      	subs	r5, r4, #1
 80082a2:	462b      	mov	r3, r5
 80082a4:	2200      	movs	r2, #0
 80082a6:	9902      	ldr	r1, [sp, #8]
 80082a8:	428b      	cmp	r3, r1
 80082aa:	da6c      	bge.n	8008386 <__kernel_rem_pio2+0x366>
 80082ac:	2a00      	cmp	r2, #0
 80082ae:	f000 8089 	beq.w	80083c4 <__kernel_rem_pio2+0x3a4>
 80082b2:	ab0e      	add	r3, sp, #56	; 0x38
 80082b4:	f1aa 0a18 	sub.w	sl, sl, #24
 80082b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 80ad 	beq.w	800841c <__kernel_rem_pio2+0x3fc>
 80082c2:	4650      	mov	r0, sl
 80082c4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008340 <__kernel_rem_pio2+0x320>
 80082c8:	f000 fb3a 	bl	8008940 <scalbn>
 80082cc:	ab9a      	add	r3, sp, #616	; 0x268
 80082ce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80082d2:	ec57 6b10 	vmov	r6, r7, d0
 80082d6:	00ec      	lsls	r4, r5, #3
 80082d8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80082dc:	46aa      	mov	sl, r5
 80082de:	f1ba 0f00 	cmp.w	sl, #0
 80082e2:	f280 80d6 	bge.w	8008492 <__kernel_rem_pio2+0x472>
 80082e6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008338 <__kernel_rem_pio2+0x318>
 80082ea:	462e      	mov	r6, r5
 80082ec:	2e00      	cmp	r6, #0
 80082ee:	f2c0 8104 	blt.w	80084fa <__kernel_rem_pio2+0x4da>
 80082f2:	ab72      	add	r3, sp, #456	; 0x1c8
 80082f4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80082f8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008360 <__kernel_rem_pio2+0x340>
 80082fc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008300:	f04f 0800 	mov.w	r8, #0
 8008304:	1baf      	subs	r7, r5, r6
 8008306:	e0ea      	b.n	80084de <__kernel_rem_pio2+0x4be>
 8008308:	f04f 0b02 	mov.w	fp, #2
 800830c:	e759      	b.n	80081c2 <__kernel_rem_pio2+0x1a2>
 800830e:	f8d8 3000 	ldr.w	r3, [r8]
 8008312:	b955      	cbnz	r5, 800832a <__kernel_rem_pio2+0x30a>
 8008314:	b123      	cbz	r3, 8008320 <__kernel_rem_pio2+0x300>
 8008316:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800831a:	f8c8 3000 	str.w	r3, [r8]
 800831e:	2301      	movs	r3, #1
 8008320:	3201      	adds	r2, #1
 8008322:	f108 0804 	add.w	r8, r8, #4
 8008326:	461d      	mov	r5, r3
 8008328:	e752      	b.n	80081d0 <__kernel_rem_pio2+0x1b0>
 800832a:	1acb      	subs	r3, r1, r3
 800832c:	f8c8 3000 	str.w	r3, [r8]
 8008330:	462b      	mov	r3, r5
 8008332:	e7f5      	b.n	8008320 <__kernel_rem_pio2+0x300>
 8008334:	f3af 8000 	nop.w
	...
 8008344:	3ff00000 	.word	0x3ff00000
 8008348:	08009690 	.word	0x08009690
 800834c:	40200000 	.word	0x40200000
 8008350:	3ff00000 	.word	0x3ff00000
 8008354:	3e700000 	.word	0x3e700000
 8008358:	41700000 	.word	0x41700000
 800835c:	3fe00000 	.word	0x3fe00000
 8008360:	08009650 	.word	0x08009650
 8008364:	1e62      	subs	r2, r4, #1
 8008366:	ab0e      	add	r3, sp, #56	; 0x38
 8008368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008370:	a90e      	add	r1, sp, #56	; 0x38
 8008372:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008376:	e739      	b.n	80081ec <__kernel_rem_pio2+0x1cc>
 8008378:	1e62      	subs	r2, r4, #1
 800837a:	ab0e      	add	r3, sp, #56	; 0x38
 800837c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008380:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008384:	e7f4      	b.n	8008370 <__kernel_rem_pio2+0x350>
 8008386:	a90e      	add	r1, sp, #56	; 0x38
 8008388:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800838c:	3b01      	subs	r3, #1
 800838e:	430a      	orrs	r2, r1
 8008390:	e789      	b.n	80082a6 <__kernel_rem_pio2+0x286>
 8008392:	3301      	adds	r3, #1
 8008394:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008398:	2900      	cmp	r1, #0
 800839a:	d0fa      	beq.n	8008392 <__kernel_rem_pio2+0x372>
 800839c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800839e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80083a2:	446a      	add	r2, sp
 80083a4:	3a98      	subs	r2, #152	; 0x98
 80083a6:	920a      	str	r2, [sp, #40]	; 0x28
 80083a8:	9a08      	ldr	r2, [sp, #32]
 80083aa:	18e3      	adds	r3, r4, r3
 80083ac:	18a5      	adds	r5, r4, r2
 80083ae:	aa22      	add	r2, sp, #136	; 0x88
 80083b0:	f104 0801 	add.w	r8, r4, #1
 80083b4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80083b8:	9304      	str	r3, [sp, #16]
 80083ba:	9b04      	ldr	r3, [sp, #16]
 80083bc:	4543      	cmp	r3, r8
 80083be:	da04      	bge.n	80083ca <__kernel_rem_pio2+0x3aa>
 80083c0:	461c      	mov	r4, r3
 80083c2:	e6a3      	b.n	800810c <__kernel_rem_pio2+0xec>
 80083c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083c6:	2301      	movs	r3, #1
 80083c8:	e7e4      	b.n	8008394 <__kernel_rem_pio2+0x374>
 80083ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083cc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80083d0:	f7f8 f8b0 	bl	8000534 <__aeabi_i2d>
 80083d4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80083d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083da:	46ab      	mov	fp, r5
 80083dc:	461c      	mov	r4, r3
 80083de:	f04f 0900 	mov.w	r9, #0
 80083e2:	2600      	movs	r6, #0
 80083e4:	2700      	movs	r7, #0
 80083e6:	9b06      	ldr	r3, [sp, #24]
 80083e8:	4599      	cmp	r9, r3
 80083ea:	dd06      	ble.n	80083fa <__kernel_rem_pio2+0x3da>
 80083ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ee:	e8e3 6702 	strd	r6, r7, [r3], #8
 80083f2:	f108 0801 	add.w	r8, r8, #1
 80083f6:	930a      	str	r3, [sp, #40]	; 0x28
 80083f8:	e7df      	b.n	80083ba <__kernel_rem_pio2+0x39a>
 80083fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80083fe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008402:	f7f8 f901 	bl	8000608 <__aeabi_dmul>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	4630      	mov	r0, r6
 800840c:	4639      	mov	r1, r7
 800840e:	f7f7 ff45 	bl	800029c <__adddf3>
 8008412:	f109 0901 	add.w	r9, r9, #1
 8008416:	4606      	mov	r6, r0
 8008418:	460f      	mov	r7, r1
 800841a:	e7e4      	b.n	80083e6 <__kernel_rem_pio2+0x3c6>
 800841c:	3d01      	subs	r5, #1
 800841e:	e748      	b.n	80082b2 <__kernel_rem_pio2+0x292>
 8008420:	ec47 6b10 	vmov	d0, r6, r7
 8008424:	f1ca 0000 	rsb	r0, sl, #0
 8008428:	f000 fa8a 	bl	8008940 <scalbn>
 800842c:	ec57 6b10 	vmov	r6, r7, d0
 8008430:	4ba0      	ldr	r3, [pc, #640]	; (80086b4 <__kernel_rem_pio2+0x694>)
 8008432:	ee10 0a10 	vmov	r0, s0
 8008436:	2200      	movs	r2, #0
 8008438:	4639      	mov	r1, r7
 800843a:	f7f8 fb6b 	bl	8000b14 <__aeabi_dcmpge>
 800843e:	b1f8      	cbz	r0, 8008480 <__kernel_rem_pio2+0x460>
 8008440:	4b9d      	ldr	r3, [pc, #628]	; (80086b8 <__kernel_rem_pio2+0x698>)
 8008442:	2200      	movs	r2, #0
 8008444:	4630      	mov	r0, r6
 8008446:	4639      	mov	r1, r7
 8008448:	f7f8 f8de 	bl	8000608 <__aeabi_dmul>
 800844c:	f7f8 fb8c 	bl	8000b68 <__aeabi_d2iz>
 8008450:	4680      	mov	r8, r0
 8008452:	f7f8 f86f 	bl	8000534 <__aeabi_i2d>
 8008456:	4b97      	ldr	r3, [pc, #604]	; (80086b4 <__kernel_rem_pio2+0x694>)
 8008458:	2200      	movs	r2, #0
 800845a:	f7f8 f8d5 	bl	8000608 <__aeabi_dmul>
 800845e:	460b      	mov	r3, r1
 8008460:	4602      	mov	r2, r0
 8008462:	4639      	mov	r1, r7
 8008464:	4630      	mov	r0, r6
 8008466:	f7f7 ff17 	bl	8000298 <__aeabi_dsub>
 800846a:	f7f8 fb7d 	bl	8000b68 <__aeabi_d2iz>
 800846e:	1c65      	adds	r5, r4, #1
 8008470:	ab0e      	add	r3, sp, #56	; 0x38
 8008472:	f10a 0a18 	add.w	sl, sl, #24
 8008476:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800847a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800847e:	e720      	b.n	80082c2 <__kernel_rem_pio2+0x2a2>
 8008480:	4630      	mov	r0, r6
 8008482:	4639      	mov	r1, r7
 8008484:	f7f8 fb70 	bl	8000b68 <__aeabi_d2iz>
 8008488:	ab0e      	add	r3, sp, #56	; 0x38
 800848a:	4625      	mov	r5, r4
 800848c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008490:	e717      	b.n	80082c2 <__kernel_rem_pio2+0x2a2>
 8008492:	ab0e      	add	r3, sp, #56	; 0x38
 8008494:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008498:	f7f8 f84c 	bl	8000534 <__aeabi_i2d>
 800849c:	4632      	mov	r2, r6
 800849e:	463b      	mov	r3, r7
 80084a0:	f7f8 f8b2 	bl	8000608 <__aeabi_dmul>
 80084a4:	4b84      	ldr	r3, [pc, #528]	; (80086b8 <__kernel_rem_pio2+0x698>)
 80084a6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80084aa:	2200      	movs	r2, #0
 80084ac:	4630      	mov	r0, r6
 80084ae:	4639      	mov	r1, r7
 80084b0:	f7f8 f8aa 	bl	8000608 <__aeabi_dmul>
 80084b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084b8:	4606      	mov	r6, r0
 80084ba:	460f      	mov	r7, r1
 80084bc:	e70f      	b.n	80082de <__kernel_rem_pio2+0x2be>
 80084be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80084c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80084c6:	f7f8 f89f 	bl	8000608 <__aeabi_dmul>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084d2:	f7f7 fee3 	bl	800029c <__adddf3>
 80084d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80084da:	f108 0801 	add.w	r8, r8, #1
 80084de:	9b02      	ldr	r3, [sp, #8]
 80084e0:	4598      	cmp	r8, r3
 80084e2:	dc01      	bgt.n	80084e8 <__kernel_rem_pio2+0x4c8>
 80084e4:	45b8      	cmp	r8, r7
 80084e6:	ddea      	ble.n	80084be <__kernel_rem_pio2+0x49e>
 80084e8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80084ec:	ab4a      	add	r3, sp, #296	; 0x128
 80084ee:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80084f2:	ed87 7b00 	vstr	d7, [r7]
 80084f6:	3e01      	subs	r6, #1
 80084f8:	e6f8      	b.n	80082ec <__kernel_rem_pio2+0x2cc>
 80084fa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	dc0b      	bgt.n	8008518 <__kernel_rem_pio2+0x4f8>
 8008500:	2b00      	cmp	r3, #0
 8008502:	dc35      	bgt.n	8008570 <__kernel_rem_pio2+0x550>
 8008504:	d059      	beq.n	80085ba <__kernel_rem_pio2+0x59a>
 8008506:	9b04      	ldr	r3, [sp, #16]
 8008508:	f003 0007 	and.w	r0, r3, #7
 800850c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008510:	ecbd 8b02 	vpop	{d8}
 8008514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008518:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800851a:	2b03      	cmp	r3, #3
 800851c:	d1f3      	bne.n	8008506 <__kernel_rem_pio2+0x4e6>
 800851e:	ab4a      	add	r3, sp, #296	; 0x128
 8008520:	4423      	add	r3, r4
 8008522:	9306      	str	r3, [sp, #24]
 8008524:	461c      	mov	r4, r3
 8008526:	469a      	mov	sl, r3
 8008528:	9502      	str	r5, [sp, #8]
 800852a:	9b02      	ldr	r3, [sp, #8]
 800852c:	2b00      	cmp	r3, #0
 800852e:	f1aa 0a08 	sub.w	sl, sl, #8
 8008532:	dc6b      	bgt.n	800860c <__kernel_rem_pio2+0x5ec>
 8008534:	46aa      	mov	sl, r5
 8008536:	f1ba 0f01 	cmp.w	sl, #1
 800853a:	f1a4 0408 	sub.w	r4, r4, #8
 800853e:	f300 8085 	bgt.w	800864c <__kernel_rem_pio2+0x62c>
 8008542:	9c06      	ldr	r4, [sp, #24]
 8008544:	2000      	movs	r0, #0
 8008546:	3408      	adds	r4, #8
 8008548:	2100      	movs	r1, #0
 800854a:	2d01      	cmp	r5, #1
 800854c:	f300 809d 	bgt.w	800868a <__kernel_rem_pio2+0x66a>
 8008550:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008554:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008558:	f1bb 0f00 	cmp.w	fp, #0
 800855c:	f040 809b 	bne.w	8008696 <__kernel_rem_pio2+0x676>
 8008560:	9b01      	ldr	r3, [sp, #4]
 8008562:	e9c3 5600 	strd	r5, r6, [r3]
 8008566:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800856a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800856e:	e7ca      	b.n	8008506 <__kernel_rem_pio2+0x4e6>
 8008570:	3408      	adds	r4, #8
 8008572:	ab4a      	add	r3, sp, #296	; 0x128
 8008574:	441c      	add	r4, r3
 8008576:	462e      	mov	r6, r5
 8008578:	2000      	movs	r0, #0
 800857a:	2100      	movs	r1, #0
 800857c:	2e00      	cmp	r6, #0
 800857e:	da36      	bge.n	80085ee <__kernel_rem_pio2+0x5ce>
 8008580:	f1bb 0f00 	cmp.w	fp, #0
 8008584:	d039      	beq.n	80085fa <__kernel_rem_pio2+0x5da>
 8008586:	4602      	mov	r2, r0
 8008588:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800858c:	9c01      	ldr	r4, [sp, #4]
 800858e:	e9c4 2300 	strd	r2, r3, [r4]
 8008592:	4602      	mov	r2, r0
 8008594:	460b      	mov	r3, r1
 8008596:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800859a:	f7f7 fe7d 	bl	8000298 <__aeabi_dsub>
 800859e:	ae4c      	add	r6, sp, #304	; 0x130
 80085a0:	2401      	movs	r4, #1
 80085a2:	42a5      	cmp	r5, r4
 80085a4:	da2c      	bge.n	8008600 <__kernel_rem_pio2+0x5e0>
 80085a6:	f1bb 0f00 	cmp.w	fp, #0
 80085aa:	d002      	beq.n	80085b2 <__kernel_rem_pio2+0x592>
 80085ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085b0:	4619      	mov	r1, r3
 80085b2:	9b01      	ldr	r3, [sp, #4]
 80085b4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80085b8:	e7a5      	b.n	8008506 <__kernel_rem_pio2+0x4e6>
 80085ba:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80085be:	eb0d 0403 	add.w	r4, sp, r3
 80085c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80085c6:	2000      	movs	r0, #0
 80085c8:	2100      	movs	r1, #0
 80085ca:	2d00      	cmp	r5, #0
 80085cc:	da09      	bge.n	80085e2 <__kernel_rem_pio2+0x5c2>
 80085ce:	f1bb 0f00 	cmp.w	fp, #0
 80085d2:	d002      	beq.n	80085da <__kernel_rem_pio2+0x5ba>
 80085d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085d8:	4619      	mov	r1, r3
 80085da:	9b01      	ldr	r3, [sp, #4]
 80085dc:	e9c3 0100 	strd	r0, r1, [r3]
 80085e0:	e791      	b.n	8008506 <__kernel_rem_pio2+0x4e6>
 80085e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80085e6:	f7f7 fe59 	bl	800029c <__adddf3>
 80085ea:	3d01      	subs	r5, #1
 80085ec:	e7ed      	b.n	80085ca <__kernel_rem_pio2+0x5aa>
 80085ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80085f2:	f7f7 fe53 	bl	800029c <__adddf3>
 80085f6:	3e01      	subs	r6, #1
 80085f8:	e7c0      	b.n	800857c <__kernel_rem_pio2+0x55c>
 80085fa:	4602      	mov	r2, r0
 80085fc:	460b      	mov	r3, r1
 80085fe:	e7c5      	b.n	800858c <__kernel_rem_pio2+0x56c>
 8008600:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008604:	f7f7 fe4a 	bl	800029c <__adddf3>
 8008608:	3401      	adds	r4, #1
 800860a:	e7ca      	b.n	80085a2 <__kernel_rem_pio2+0x582>
 800860c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008610:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008614:	9b02      	ldr	r3, [sp, #8]
 8008616:	3b01      	subs	r3, #1
 8008618:	9302      	str	r3, [sp, #8]
 800861a:	4632      	mov	r2, r6
 800861c:	463b      	mov	r3, r7
 800861e:	4640      	mov	r0, r8
 8008620:	4649      	mov	r1, r9
 8008622:	f7f7 fe3b 	bl	800029c <__adddf3>
 8008626:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	4640      	mov	r0, r8
 8008630:	4649      	mov	r1, r9
 8008632:	f7f7 fe31 	bl	8000298 <__aeabi_dsub>
 8008636:	4632      	mov	r2, r6
 8008638:	463b      	mov	r3, r7
 800863a:	f7f7 fe2f 	bl	800029c <__adddf3>
 800863e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008642:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008646:	ed8a 7b00 	vstr	d7, [sl]
 800864a:	e76e      	b.n	800852a <__kernel_rem_pio2+0x50a>
 800864c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008650:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008654:	4640      	mov	r0, r8
 8008656:	4632      	mov	r2, r6
 8008658:	463b      	mov	r3, r7
 800865a:	4649      	mov	r1, r9
 800865c:	f7f7 fe1e 	bl	800029c <__adddf3>
 8008660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4640      	mov	r0, r8
 800866a:	4649      	mov	r1, r9
 800866c:	f7f7 fe14 	bl	8000298 <__aeabi_dsub>
 8008670:	4632      	mov	r2, r6
 8008672:	463b      	mov	r3, r7
 8008674:	f7f7 fe12 	bl	800029c <__adddf3>
 8008678:	ed9d 7b02 	vldr	d7, [sp, #8]
 800867c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008680:	ed84 7b00 	vstr	d7, [r4]
 8008684:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008688:	e755      	b.n	8008536 <__kernel_rem_pio2+0x516>
 800868a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800868e:	f7f7 fe05 	bl	800029c <__adddf3>
 8008692:	3d01      	subs	r5, #1
 8008694:	e759      	b.n	800854a <__kernel_rem_pio2+0x52a>
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	9a01      	ldr	r2, [sp, #4]
 800869a:	601d      	str	r5, [r3, #0]
 800869c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80086a0:	605c      	str	r4, [r3, #4]
 80086a2:	609f      	str	r7, [r3, #8]
 80086a4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80086a8:	60d3      	str	r3, [r2, #12]
 80086aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086ae:	6110      	str	r0, [r2, #16]
 80086b0:	6153      	str	r3, [r2, #20]
 80086b2:	e728      	b.n	8008506 <__kernel_rem_pio2+0x4e6>
 80086b4:	41700000 	.word	0x41700000
 80086b8:	3e700000 	.word	0x3e700000
 80086bc:	00000000 	.word	0x00000000

080086c0 <__kernel_sin>:
 80086c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	ed2d 8b04 	vpush	{d8-d9}
 80086c8:	eeb0 8a41 	vmov.f32	s16, s2
 80086cc:	eef0 8a61 	vmov.f32	s17, s3
 80086d0:	ec55 4b10 	vmov	r4, r5, d0
 80086d4:	b083      	sub	sp, #12
 80086d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80086da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80086de:	9001      	str	r0, [sp, #4]
 80086e0:	da06      	bge.n	80086f0 <__kernel_sin+0x30>
 80086e2:	ee10 0a10 	vmov	r0, s0
 80086e6:	4629      	mov	r1, r5
 80086e8:	f7f8 fa3e 	bl	8000b68 <__aeabi_d2iz>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d051      	beq.n	8008794 <__kernel_sin+0xd4>
 80086f0:	4622      	mov	r2, r4
 80086f2:	462b      	mov	r3, r5
 80086f4:	4620      	mov	r0, r4
 80086f6:	4629      	mov	r1, r5
 80086f8:	f7f7 ff86 	bl	8000608 <__aeabi_dmul>
 80086fc:	4682      	mov	sl, r0
 80086fe:	468b      	mov	fp, r1
 8008700:	4602      	mov	r2, r0
 8008702:	460b      	mov	r3, r1
 8008704:	4620      	mov	r0, r4
 8008706:	4629      	mov	r1, r5
 8008708:	f7f7 ff7e 	bl	8000608 <__aeabi_dmul>
 800870c:	a341      	add	r3, pc, #260	; (adr r3, 8008814 <__kernel_sin+0x154>)
 800870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008712:	4680      	mov	r8, r0
 8008714:	4689      	mov	r9, r1
 8008716:	4650      	mov	r0, sl
 8008718:	4659      	mov	r1, fp
 800871a:	f7f7 ff75 	bl	8000608 <__aeabi_dmul>
 800871e:	a33f      	add	r3, pc, #252	; (adr r3, 800881c <__kernel_sin+0x15c>)
 8008720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008724:	f7f7 fdb8 	bl	8000298 <__aeabi_dsub>
 8008728:	4652      	mov	r2, sl
 800872a:	465b      	mov	r3, fp
 800872c:	f7f7 ff6c 	bl	8000608 <__aeabi_dmul>
 8008730:	a33c      	add	r3, pc, #240	; (adr r3, 8008824 <__kernel_sin+0x164>)
 8008732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008736:	f7f7 fdb1 	bl	800029c <__adddf3>
 800873a:	4652      	mov	r2, sl
 800873c:	465b      	mov	r3, fp
 800873e:	f7f7 ff63 	bl	8000608 <__aeabi_dmul>
 8008742:	a33a      	add	r3, pc, #232	; (adr r3, 800882c <__kernel_sin+0x16c>)
 8008744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008748:	f7f7 fda6 	bl	8000298 <__aeabi_dsub>
 800874c:	4652      	mov	r2, sl
 800874e:	465b      	mov	r3, fp
 8008750:	f7f7 ff5a 	bl	8000608 <__aeabi_dmul>
 8008754:	a337      	add	r3, pc, #220	; (adr r3, 8008834 <__kernel_sin+0x174>)
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	f7f7 fd9f 	bl	800029c <__adddf3>
 800875e:	9b01      	ldr	r3, [sp, #4]
 8008760:	4606      	mov	r6, r0
 8008762:	460f      	mov	r7, r1
 8008764:	b9eb      	cbnz	r3, 80087a2 <__kernel_sin+0xe2>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	4650      	mov	r0, sl
 800876c:	4659      	mov	r1, fp
 800876e:	f7f7 ff4b 	bl	8000608 <__aeabi_dmul>
 8008772:	a325      	add	r3, pc, #148	; (adr r3, 8008808 <__kernel_sin+0x148>)
 8008774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008778:	f7f7 fd8e 	bl	8000298 <__aeabi_dsub>
 800877c:	4642      	mov	r2, r8
 800877e:	464b      	mov	r3, r9
 8008780:	f7f7 ff42 	bl	8000608 <__aeabi_dmul>
 8008784:	4602      	mov	r2, r0
 8008786:	460b      	mov	r3, r1
 8008788:	4620      	mov	r0, r4
 800878a:	4629      	mov	r1, r5
 800878c:	f7f7 fd86 	bl	800029c <__adddf3>
 8008790:	4604      	mov	r4, r0
 8008792:	460d      	mov	r5, r1
 8008794:	ec45 4b10 	vmov	d0, r4, r5
 8008798:	b003      	add	sp, #12
 800879a:	ecbd 8b04 	vpop	{d8-d9}
 800879e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a2:	4b1b      	ldr	r3, [pc, #108]	; (8008810 <__kernel_sin+0x150>)
 80087a4:	ec51 0b18 	vmov	r0, r1, d8
 80087a8:	2200      	movs	r2, #0
 80087aa:	f7f7 ff2d 	bl	8000608 <__aeabi_dmul>
 80087ae:	4632      	mov	r2, r6
 80087b0:	ec41 0b19 	vmov	d9, r0, r1
 80087b4:	463b      	mov	r3, r7
 80087b6:	4640      	mov	r0, r8
 80087b8:	4649      	mov	r1, r9
 80087ba:	f7f7 ff25 	bl	8000608 <__aeabi_dmul>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	ec51 0b19 	vmov	r0, r1, d9
 80087c6:	f7f7 fd67 	bl	8000298 <__aeabi_dsub>
 80087ca:	4652      	mov	r2, sl
 80087cc:	465b      	mov	r3, fp
 80087ce:	f7f7 ff1b 	bl	8000608 <__aeabi_dmul>
 80087d2:	ec53 2b18 	vmov	r2, r3, d8
 80087d6:	f7f7 fd5f 	bl	8000298 <__aeabi_dsub>
 80087da:	a30b      	add	r3, pc, #44	; (adr r3, 8008808 <__kernel_sin+0x148>)
 80087dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e0:	4606      	mov	r6, r0
 80087e2:	460f      	mov	r7, r1
 80087e4:	4640      	mov	r0, r8
 80087e6:	4649      	mov	r1, r9
 80087e8:	f7f7 ff0e 	bl	8000608 <__aeabi_dmul>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	4630      	mov	r0, r6
 80087f2:	4639      	mov	r1, r7
 80087f4:	f7f7 fd52 	bl	800029c <__adddf3>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	4620      	mov	r0, r4
 80087fe:	4629      	mov	r1, r5
 8008800:	f7f7 fd4a 	bl	8000298 <__aeabi_dsub>
 8008804:	e7c4      	b.n	8008790 <__kernel_sin+0xd0>
 8008806:	bf00      	nop
 8008808:	55555549 	.word	0x55555549
 800880c:	3fc55555 	.word	0x3fc55555
 8008810:	3fe00000 	.word	0x3fe00000
 8008814:	5acfd57c 	.word	0x5acfd57c
 8008818:	3de5d93a 	.word	0x3de5d93a
 800881c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008820:	3e5ae5e6 	.word	0x3e5ae5e6
 8008824:	57b1fe7d 	.word	0x57b1fe7d
 8008828:	3ec71de3 	.word	0x3ec71de3
 800882c:	19c161d5 	.word	0x19c161d5
 8008830:	3f2a01a0 	.word	0x3f2a01a0
 8008834:	1110f8a6 	.word	0x1110f8a6
 8008838:	3f811111 	.word	0x3f811111
 800883c:	00000000 	.word	0x00000000

08008840 <floor>:
 8008840:	ec51 0b10 	vmov	r0, r1, d0
 8008844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008848:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800884c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008850:	2e13      	cmp	r6, #19
 8008852:	ee10 5a10 	vmov	r5, s0
 8008856:	ee10 8a10 	vmov	r8, s0
 800885a:	460c      	mov	r4, r1
 800885c:	dc32      	bgt.n	80088c4 <floor+0x84>
 800885e:	2e00      	cmp	r6, #0
 8008860:	da14      	bge.n	800888c <floor+0x4c>
 8008862:	a333      	add	r3, pc, #204	; (adr r3, 8008930 <floor+0xf0>)
 8008864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008868:	f7f7 fd18 	bl	800029c <__adddf3>
 800886c:	2200      	movs	r2, #0
 800886e:	2300      	movs	r3, #0
 8008870:	f7f8 f95a 	bl	8000b28 <__aeabi_dcmpgt>
 8008874:	b138      	cbz	r0, 8008886 <floor+0x46>
 8008876:	2c00      	cmp	r4, #0
 8008878:	da57      	bge.n	800892a <floor+0xea>
 800887a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800887e:	431d      	orrs	r5, r3
 8008880:	d001      	beq.n	8008886 <floor+0x46>
 8008882:	4c2d      	ldr	r4, [pc, #180]	; (8008938 <floor+0xf8>)
 8008884:	2500      	movs	r5, #0
 8008886:	4621      	mov	r1, r4
 8008888:	4628      	mov	r0, r5
 800888a:	e025      	b.n	80088d8 <floor+0x98>
 800888c:	4f2b      	ldr	r7, [pc, #172]	; (800893c <floor+0xfc>)
 800888e:	4137      	asrs	r7, r6
 8008890:	ea01 0307 	and.w	r3, r1, r7
 8008894:	4303      	orrs	r3, r0
 8008896:	d01f      	beq.n	80088d8 <floor+0x98>
 8008898:	a325      	add	r3, pc, #148	; (adr r3, 8008930 <floor+0xf0>)
 800889a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889e:	f7f7 fcfd 	bl	800029c <__adddf3>
 80088a2:	2200      	movs	r2, #0
 80088a4:	2300      	movs	r3, #0
 80088a6:	f7f8 f93f 	bl	8000b28 <__aeabi_dcmpgt>
 80088aa:	2800      	cmp	r0, #0
 80088ac:	d0eb      	beq.n	8008886 <floor+0x46>
 80088ae:	2c00      	cmp	r4, #0
 80088b0:	bfbe      	ittt	lt
 80088b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80088b6:	fa43 f606 	asrlt.w	r6, r3, r6
 80088ba:	19a4      	addlt	r4, r4, r6
 80088bc:	ea24 0407 	bic.w	r4, r4, r7
 80088c0:	2500      	movs	r5, #0
 80088c2:	e7e0      	b.n	8008886 <floor+0x46>
 80088c4:	2e33      	cmp	r6, #51	; 0x33
 80088c6:	dd0b      	ble.n	80088e0 <floor+0xa0>
 80088c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80088cc:	d104      	bne.n	80088d8 <floor+0x98>
 80088ce:	ee10 2a10 	vmov	r2, s0
 80088d2:	460b      	mov	r3, r1
 80088d4:	f7f7 fce2 	bl	800029c <__adddf3>
 80088d8:	ec41 0b10 	vmov	d0, r0, r1
 80088dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80088e4:	f04f 33ff 	mov.w	r3, #4294967295
 80088e8:	fa23 f707 	lsr.w	r7, r3, r7
 80088ec:	4207      	tst	r7, r0
 80088ee:	d0f3      	beq.n	80088d8 <floor+0x98>
 80088f0:	a30f      	add	r3, pc, #60	; (adr r3, 8008930 <floor+0xf0>)
 80088f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f6:	f7f7 fcd1 	bl	800029c <__adddf3>
 80088fa:	2200      	movs	r2, #0
 80088fc:	2300      	movs	r3, #0
 80088fe:	f7f8 f913 	bl	8000b28 <__aeabi_dcmpgt>
 8008902:	2800      	cmp	r0, #0
 8008904:	d0bf      	beq.n	8008886 <floor+0x46>
 8008906:	2c00      	cmp	r4, #0
 8008908:	da02      	bge.n	8008910 <floor+0xd0>
 800890a:	2e14      	cmp	r6, #20
 800890c:	d103      	bne.n	8008916 <floor+0xd6>
 800890e:	3401      	adds	r4, #1
 8008910:	ea25 0507 	bic.w	r5, r5, r7
 8008914:	e7b7      	b.n	8008886 <floor+0x46>
 8008916:	2301      	movs	r3, #1
 8008918:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800891c:	fa03 f606 	lsl.w	r6, r3, r6
 8008920:	4435      	add	r5, r6
 8008922:	4545      	cmp	r5, r8
 8008924:	bf38      	it	cc
 8008926:	18e4      	addcc	r4, r4, r3
 8008928:	e7f2      	b.n	8008910 <floor+0xd0>
 800892a:	2500      	movs	r5, #0
 800892c:	462c      	mov	r4, r5
 800892e:	e7aa      	b.n	8008886 <floor+0x46>
 8008930:	8800759c 	.word	0x8800759c
 8008934:	7e37e43c 	.word	0x7e37e43c
 8008938:	bff00000 	.word	0xbff00000
 800893c:	000fffff 	.word	0x000fffff

08008940 <scalbn>:
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	ec55 4b10 	vmov	r4, r5, d0
 8008946:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800894a:	4606      	mov	r6, r0
 800894c:	462b      	mov	r3, r5
 800894e:	b99a      	cbnz	r2, 8008978 <scalbn+0x38>
 8008950:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008954:	4323      	orrs	r3, r4
 8008956:	d036      	beq.n	80089c6 <scalbn+0x86>
 8008958:	4b39      	ldr	r3, [pc, #228]	; (8008a40 <scalbn+0x100>)
 800895a:	4629      	mov	r1, r5
 800895c:	ee10 0a10 	vmov	r0, s0
 8008960:	2200      	movs	r2, #0
 8008962:	f7f7 fe51 	bl	8000608 <__aeabi_dmul>
 8008966:	4b37      	ldr	r3, [pc, #220]	; (8008a44 <scalbn+0x104>)
 8008968:	429e      	cmp	r6, r3
 800896a:	4604      	mov	r4, r0
 800896c:	460d      	mov	r5, r1
 800896e:	da10      	bge.n	8008992 <scalbn+0x52>
 8008970:	a32b      	add	r3, pc, #172	; (adr r3, 8008a20 <scalbn+0xe0>)
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	e03a      	b.n	80089ee <scalbn+0xae>
 8008978:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800897c:	428a      	cmp	r2, r1
 800897e:	d10c      	bne.n	800899a <scalbn+0x5a>
 8008980:	ee10 2a10 	vmov	r2, s0
 8008984:	4620      	mov	r0, r4
 8008986:	4629      	mov	r1, r5
 8008988:	f7f7 fc88 	bl	800029c <__adddf3>
 800898c:	4604      	mov	r4, r0
 800898e:	460d      	mov	r5, r1
 8008990:	e019      	b.n	80089c6 <scalbn+0x86>
 8008992:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008996:	460b      	mov	r3, r1
 8008998:	3a36      	subs	r2, #54	; 0x36
 800899a:	4432      	add	r2, r6
 800899c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80089a0:	428a      	cmp	r2, r1
 80089a2:	dd08      	ble.n	80089b6 <scalbn+0x76>
 80089a4:	2d00      	cmp	r5, #0
 80089a6:	a120      	add	r1, pc, #128	; (adr r1, 8008a28 <scalbn+0xe8>)
 80089a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ac:	da1c      	bge.n	80089e8 <scalbn+0xa8>
 80089ae:	a120      	add	r1, pc, #128	; (adr r1, 8008a30 <scalbn+0xf0>)
 80089b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089b4:	e018      	b.n	80089e8 <scalbn+0xa8>
 80089b6:	2a00      	cmp	r2, #0
 80089b8:	dd08      	ble.n	80089cc <scalbn+0x8c>
 80089ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80089be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80089c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80089c6:	ec45 4b10 	vmov	d0, r4, r5
 80089ca:	bd70      	pop	{r4, r5, r6, pc}
 80089cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80089d0:	da19      	bge.n	8008a06 <scalbn+0xc6>
 80089d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80089d6:	429e      	cmp	r6, r3
 80089d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80089dc:	dd0a      	ble.n	80089f4 <scalbn+0xb4>
 80089de:	a112      	add	r1, pc, #72	; (adr r1, 8008a28 <scalbn+0xe8>)
 80089e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e2      	bne.n	80089ae <scalbn+0x6e>
 80089e8:	a30f      	add	r3, pc, #60	; (adr r3, 8008a28 <scalbn+0xe8>)
 80089ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ee:	f7f7 fe0b 	bl	8000608 <__aeabi_dmul>
 80089f2:	e7cb      	b.n	800898c <scalbn+0x4c>
 80089f4:	a10a      	add	r1, pc, #40	; (adr r1, 8008a20 <scalbn+0xe0>)
 80089f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0b8      	beq.n	8008970 <scalbn+0x30>
 80089fe:	a10e      	add	r1, pc, #56	; (adr r1, 8008a38 <scalbn+0xf8>)
 8008a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a04:	e7b4      	b.n	8008970 <scalbn+0x30>
 8008a06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008a0a:	3236      	adds	r2, #54	; 0x36
 8008a0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008a14:	4620      	mov	r0, r4
 8008a16:	4b0c      	ldr	r3, [pc, #48]	; (8008a48 <scalbn+0x108>)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	e7e8      	b.n	80089ee <scalbn+0xae>
 8008a1c:	f3af 8000 	nop.w
 8008a20:	c2f8f359 	.word	0xc2f8f359
 8008a24:	01a56e1f 	.word	0x01a56e1f
 8008a28:	8800759c 	.word	0x8800759c
 8008a2c:	7e37e43c 	.word	0x7e37e43c
 8008a30:	8800759c 	.word	0x8800759c
 8008a34:	fe37e43c 	.word	0xfe37e43c
 8008a38:	c2f8f359 	.word	0xc2f8f359
 8008a3c:	81a56e1f 	.word	0x81a56e1f
 8008a40:	43500000 	.word	0x43500000
 8008a44:	ffff3cb0 	.word	0xffff3cb0
 8008a48:	3c900000 	.word	0x3c900000

08008a4c <_init>:
 8008a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4e:	bf00      	nop
 8008a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a52:	bc08      	pop	{r3}
 8008a54:	469e      	mov	lr, r3
 8008a56:	4770      	bx	lr

08008a58 <_fini>:
 8008a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5a:	bf00      	nop
 8008a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a5e:	bc08      	pop	{r3}
 8008a60:	469e      	mov	lr, r3
 8008a62:	4770      	bx	lr
